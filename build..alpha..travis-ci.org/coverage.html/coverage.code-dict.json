{"/home/travis/build/npmtest/node-npmtest-react-toolbox/test.js":"/* istanbul instrument in package npmtest_react_toolbox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/lib.npmtest_react_toolbox.js":"/* istanbul instrument in package npmtest_react_toolbox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_toolbox = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_toolbox = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-toolbox && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_toolbox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_toolbox\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_toolbox.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_toolbox.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_toolbox.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_toolbox.__dirname + '/lib.npmtest_react_toolbox.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TimePicker = exports.Tooltip = exports.Switch = exports.Snackbar = exports.Slider = exports.Ripple = exports.ProgressBar = exports.Navigation = exports.Link = exports.Input = exports.FontIcon = exports.Dropdown = exports.Drawer = exports.Dialog = exports.DatePicker = exports.Checkbox = exports.Chip = exports.Avatar = exports.Autocomplete = exports.AppBar = exports.overrideComponentTypeChecker = undefined;\n\nvar _isComponentOfType = require('./utils/is-component-of-type');\n\nObject.defineProperty(exports, 'overrideComponentTypeChecker', {\n  enumerable: true,\n  get: function get() {\n    return _isComponentOfType.overrideComponentTypeChecker;\n  }\n});\n\nvar _app_bar = require('./app_bar');\n\nObject.defineProperty(exports, 'AppBar', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_app_bar).default;\n  }\n});\n\nvar _autocomplete = require('./autocomplete');\n\nObject.defineProperty(exports, 'Autocomplete', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_autocomplete).default;\n  }\n});\n\nvar _avatar = require('./avatar');\n\nObject.defineProperty(exports, 'Avatar', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_avatar).default;\n  }\n});\n\nvar _button = require('./button');\n\nObject.keys(_button).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _button[key];\n    }\n  });\n});\n\nvar _card = require('./card');\n\nObject.keys(_card).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _card[key];\n    }\n  });\n});\n\nvar _chip = require('./chip');\n\nObject.defineProperty(exports, 'Chip', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_chip).default;\n  }\n});\n\nvar _checkbox = require('./checkbox');\n\nObject.defineProperty(exports, 'Checkbox', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_checkbox).default;\n  }\n});\n\nvar _date_picker = require('./date_picker');\n\nObject.defineProperty(exports, 'DatePicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_date_picker).default;\n  }\n});\n\nvar _dialog = require('./dialog');\n\nObject.defineProperty(exports, 'Dialog', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_dialog).default;\n  }\n});\n\nvar _drawer = require('./drawer');\n\nObject.defineProperty(exports, 'Drawer', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_drawer).default;\n  }\n});\n\nvar _dropdown = require('./dropdown');\n\nObject.defineProperty(exports, 'Dropdown', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_dropdown).default;\n  }\n});\n\nvar _font_icon = require('./font_icon');\n\nObject.defineProperty(exports, 'FontIcon', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_font_icon).default;\n  }\n});\n\nvar _input = require('./input');\n\nObject.defineProperty(exports, 'Input', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_input).default;\n  }\n});\n\nvar _layout = require('./layout');\n\nObject.keys(_layout).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _layout[key];\n    }\n  });\n});\n\nvar _link = require('./link');\n\nObject.defineProperty(exports, 'Link', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_link).default;\n  }\n});\n\nvar _list = require('./list');\n\nObject.keys(_list).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _list[key];\n    }\n  });\n});\n\nvar _menu = require('./menu');\n\nObject.keys(_menu).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _menu[key];\n    }\n  });\n});\n\nvar _navigation = require('./navigation');\n\nObject.defineProperty(exports, 'Navigation', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_navigation).default;\n  }\n});\n\nvar _progress_bar = require('./progress_bar');\n\nObject.defineProperty(exports, 'ProgressBar', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_progress_bar).default;\n  }\n});\n\nvar _radio = require('./radio');\n\nObject.keys(_radio).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _radio[key];\n    }\n  });\n});\n\nvar _slider = require('./slider');\n\nObject.defineProperty(exports, 'Slider', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_slider).default;\n  }\n});\n\nvar _snackbar = require('./snackbar');\n\nObject.defineProperty(exports, 'Snackbar', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_snackbar).default;\n  }\n});\n\nvar _switch = require('./switch');\n\nObject.defineProperty(exports, 'Switch', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_switch).default;\n  }\n});\n\nvar _table = require('./table');\n\nObject.keys(_table).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _table[key];\n    }\n  });\n});\n\nvar _tabs = require('./tabs');\n\nObject.keys(_tabs).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _tabs[key];\n    }\n  });\n});\n\nvar _time_picker = require('./time_picker');\n\nObject.defineProperty(exports, 'TimePicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_time_picker).default;\n  }\n});\n\nrequire('./utils/polyfills');\n\nvar _ripple = require('./ripple');\n\nvar _ripple2 = _interopRequireDefault(_ripple);\n\nvar _tooltip = require('./tooltip');\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Ripple = _ripple2.default;\nexports.Tooltip = _tooltip2.default;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/utils/is-component-of-type.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.overrideComponentTypeChecker = overrideComponentTypeChecker;\nexports.defaultChecker = defaultChecker;\nexports.default = isComponentOfType;\nvar customChecker = void 0;\n\n/**\n *  Sets customChecker which will be used for all components.\n *\n * @param providedChecker {Function} - Checker function\n */\nfunction overrideComponentTypeChecker(providedChecker) {\n  customChecker = providedChecker;\n}\n\n/**\n * Returns true if the provided element is a component of the provided type.\n *\n * @param classType {ReactElement class} - the class of a React Element\n * @param reactElement {ReactElement} - any React Element (not a real DOM node)\n */\nfunction defaultChecker(classType, reactElement) {\n  return reactElement && reactElement.type === classType;\n}\n\n/**\n * Executes customChecker if it's set or defaultChecker.\n *\n * @param classType {ReactElement class} - the class of a React Element\n * @param reactElement {ReactElement} - any React Element (not a real DOM node)\n */\nfunction isComponentOfType(classType, reactElement) {\n  return customChecker ? customChecker(classType, reactElement) : defaultChecker(classType, reactElement);\n}","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/app_bar/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppBar = undefined;\n\nvar _reactCssThemr = require('react-css-themr');\n\nvar _identifiers = require('../identifiers');\n\nvar _AppBar = require('./AppBar');\n\nvar _button = require('../button');\n\nvar _theme = require('./theme.css');\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AppBar = (0, _AppBar.appBarFactory)(_button.IconButton);\nvar ThemedAppBar = (0, _reactCssThemr.themr)(_identifiers.APP_BAR, _theme2.default)(AppBar);\n\nexports.default = ThemedAppBar;\nexports.AppBar = ThemedAppBar;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/identifiers.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar APP_BAR = exports.APP_BAR = 'RTAppBar';\nvar AUTOCOMPLETE = exports.AUTOCOMPLETE = 'RTAutocomplete';\nvar AVATAR = exports.AVATAR = 'RTAvatar';\nvar BUTTON = exports.BUTTON = 'RTButton';\nvar CARD = exports.CARD = 'RTCard';\nvar CHIP = exports.CHIP = 'RTChip';\nvar CHECKBOX = exports.CHECKBOX = 'RTCheckbox';\nvar DATE_PICKER = exports.DATE_PICKER = 'RTDatePicker';\nvar DIALOG = exports.DIALOG = 'RTDialog';\nvar DRAWER = exports.DRAWER = 'RTDrawer';\nvar DROPDOWN = exports.DROPDOWN = 'RTDropdown';\nvar INPUT = exports.INPUT = 'RTInput';\nvar LAYOUT = exports.LAYOUT = 'RTLayout';\nvar LINK = exports.LINK = 'RTLink';\nvar LIST = exports.LIST = 'RTList';\nvar MENU = exports.MENU = 'RTMenu';\nvar NAVIGATION = exports.NAVIGATION = 'RTNavigation';\nvar OVERLAY = exports.OVERLAY = 'RTOverlay';\nvar PROGRESS_BAR = exports.PROGRESS_BAR = 'RTProgressBar';\nvar RADIO = exports.RADIO = 'RTRadio';\nvar RIPPLE = exports.RIPPLE = 'RTRipple';\nvar SLIDER = exports.SLIDER = 'RTSlider';\nvar SNACKBAR = exports.SNACKBAR = 'RTSnackbar';\nvar SWITCH = exports.SWITCH = 'RTSwitch';\nvar TABLE = exports.TABLE = 'RTTable';\nvar TABS = exports.TABS = 'RTTabs';\nvar TOOLTIP = exports.TOOLTIP = 'RTTooltip';\nvar TIME_PICKER = exports.TIME_PICKER = 'RTTimePicker';","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/app_bar/AppBar.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppBar = exports.appBarFactory = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactCssThemr = require('react-css-themr');\n\nvar _identifiers = require('../identifiers');\n\nvar _IconButton = require('../button/IconButton');\n\nvar _IconButton2 = _interopRequireDefault(_IconButton);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar factory = function factory(IconButton) {\n  var AppBar = function (_React$Component) {\n    _inherits(AppBar, _React$Component);\n\n    function AppBar() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, AppBar);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AppBar.__proto__ || Object.getPrototypeOf(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hidden: false, height: 0 }, _this.handleScroll = function () {\n        var scrollDiff = _this.curScroll - window.scrollY;\n        var hidden = scrollDiff < 0 && window.scrollY !== undefined && window.scrollY > _this.state.height;\n        _this.setState({ hidden: hidden });\n        _this.curScroll = window.scrollY;\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(AppBar, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        if (this.props.scrollHide) {\n          this.initializeScroll();\n        }\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if (!this.props.scrollHide && nextProps.scrollHide) {\n          this.initializeScroll();\n        }\n\n        if (this.props.scrollHide && !nextProps.scrollHide) {\n          this.endScroll();\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        if (this.props.scrollHide) {\n          this.endScroll();\n        }\n      }\n    }, {\n      key: 'initializeScroll',\n      value: function initializeScroll() {\n        window.addEventListener('scroll', this.handleScroll);\n\n        var _rootNode$getBounding = this.rootNode.getBoundingClientRect(),\n            height = _rootNode$getBounding.height;\n\n        this.curScroll = window.scrollY;\n        this.setState({ height: height });\n      }\n    }, {\n      key: 'endScroll',\n      value: function endScroll() {\n        window.removeEventListener('scroll', this.handleScroll);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _cn,\n            _this2 = this;\n\n        var _props = this.props,\n            children = _props.children,\n            leftIcon = _props.leftIcon,\n            onLeftIconClick = _props.onLeftIconClick,\n            onRightIconClick = _props.onRightIconClick,\n            rightIcon = _props.rightIcon,\n            theme = _props.theme,\n            title = _props.title;\n\n\n        var className = (0, _classnames2.default)(theme.appBar, (_cn = {}, _defineProperty(_cn, theme.fixed, this.props.fixed), _defineProperty(_cn, theme.flat, this.props.flat), _defineProperty(_cn, theme.scrollHide, this.state.hidden), _cn), this.props.className);\n\n        var renderedTitle = typeof title === 'string' ? _react2.default.createElement(\n          'h1',\n          { className: (0, _classnames2.default)(theme.title) },\n          title\n        ) : title;\n\n        var renderedLeftIcon = leftIcon && _react2.default.createElement(IconButton, {\n          inverse: true,\n          className: (0, _classnames2.default)(theme.leftIcon),\n          onClick: onLeftIconClick,\n          icon: leftIcon\n        });\n\n        var renderedRightIcon = rightIcon && _react2.default.createElement(IconButton, {\n          inverse: true,\n          className: (0, _classnames2.default)(theme.rightIcon),\n          onClick: onRightIconClick,\n          icon: rightIcon\n        });\n\n        return _react2.default.createElement(\n          'header',\n          {\n            className: className,\n            'data-react-toolbox': 'app-bar',\n            ref: function ref(node) {\n              _this2.rootNode = node;\n            }\n          },\n          _react2.default.createElement(\n            'div',\n            { className: theme.inner },\n            renderedLeftIcon,\n            renderedTitle,\n            children,\n            renderedRightIcon\n          )\n        );\n      }\n    }]);\n\n    return AppBar;\n  }(_react2.default.Component);\n\n  AppBar.propTypes = {\n    children: _react.PropTypes.node,\n    className: _react.PropTypes.string,\n    fixed: _react.PropTypes.bool,\n    flat: _react.PropTypes.bool,\n    leftIcon: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),\n    onLeftIconClick: _react.PropTypes.func,\n    onRightIconClick: _react.PropTypes.func,\n    rightIcon: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),\n    scrollHide: _react.PropTypes.bool,\n    theme: _react.PropTypes.shape({\n      appBar: _react.PropTypes.string,\n      inner: _react.PropTypes.string,\n      fixed: _react.PropTypes.string,\n      flat: _react.PropTypes.string,\n      leftIcon: _react.PropTypes.string,\n      rightIcon: _react.PropTypes.string,\n      scrollHide: _react.PropTypes.string,\n      title: _react.PropTypes.string\n    }),\n    title: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element])\n  };\n  AppBar.defaultProps = {\n    className: '',\n    fixed: false,\n    flat: false,\n    scrollHide: false\n  };\n\n\n  return AppBar;\n};\n\nvar AppBar = factory(_IconButton2.default);\nexports.default = (0, _reactCssThemr.themr)(_identifiers.APP_BAR)(AppBar);\nexports.appBarFactory = factory;\nexports.AppBar = AppBar;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/button/IconButton.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IconButton = exports.iconButtonFactory = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames2 = require('classnames');\n\nvar _classnames3 = _interopRequireDefault(_classnames2);\n\nvar _reactCssThemr = require('react-css-themr');\n\nvar _identifiers = require('../identifiers');\n\nvar _FontIcon = require('../font_icon/FontIcon');\n\nvar _FontIcon2 = _interopRequireDefault(_FontIcon);\n\nvar _Ripple = require('../ripple/Ripple');\n\nvar _Ripple2 = _interopRequireDefault(_Ripple);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar factory = function factory(ripple, FontIcon) {\n  var IconButton = function (_Component) {\n    _inherits(IconButton, _Component);\n\n    function IconButton() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, IconButton);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IconButton.__proto__ || Object.getPrototypeOf(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.getLevel = function () {\n        if (_this.props.primary) return 'primary';\n        if (_this.props.accent) return 'accent';\n        return 'neutral';\n      }, _this.handleMouseUp = function (event) {\n        _this.buttonNode.blur();\n        if (_this.props.onMouseUp) _this.props.onMouseUp(event);\n      }, _this.handleMouseLeave = function (event) {\n        _this.buttonNode.blur();\n        if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(IconButton, [{\n      key: 'render',\n      value: function render() {\n        var _classnames,\n            _this2 = this;\n\n        var _props = this.props,\n            accent = _props.accent,\n            children = _props.children,\n            className = _props.className,\n            href = _props.href,\n            icon = _props.icon,\n            inverse = _props.inverse,\n            neutral = _props.neutral,\n            primary = _props.primary,\n            theme = _props.theme,\n            type = _props.type,\n            others = _objectWithoutProperties(_props, ['accent', 'children', 'className', 'href', 'icon', 'inverse', 'neutral', 'primary', 'theme', 'type']);\n\n        var element = href ? 'a' : 'button';\n        var level = this.getLevel();\n        var classes = (0, _classnames3.default)([theme.toggle], (_classnames = {}, _defineProperty(_classnames, theme[level], neutral), _defineProperty(_classnames, theme.inverse, inverse), _classnames), className);\n\n        var props = _extends({}, others, {\n          href: href,\n          ref: function ref(node) {\n            _this2.buttonNode = node;\n          },\n          className: classes,\n          disabled: this.props.disabled,\n          onMouseUp: this.handleMouseUp,\n          onMouseLeave: this.handleMouseLeave,\n          type: !href ? type : null,\n          'data-react-toolbox': 'button'\n        });\n\n        var iconElement = typeof icon === 'string' ? _react2.default.createElement(FontIcon, { className: theme.icon, value: icon }) : icon;\n\n        return _react2.default.createElement(element, props, icon && iconElement, children);\n      }\n    }]);\n\n    return IconButton;\n  }(_react.Component);\n\n  IconButton.propTypes = {\n    accent: _react.PropTypes.bool,\n    children: _react.PropTypes.node,\n    className: _react.PropTypes.string,\n    disabled: _react.PropTypes.bool,\n    href: _react.PropTypes.string,\n    icon: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),\n    inverse: _react.PropTypes.bool,\n    neutral: _react.PropTypes.bool,\n    onMouseLeave: _react.PropTypes.func,\n    onMouseUp: _react.PropTypes.func,\n    primary: _react.PropTypes.bool,\n    theme: _react.PropTypes.shape({\n      accent: _react.PropTypes.string,\n      button: _react.PropTypes.string,\n      flat: _react.PropTypes.string,\n      floating: _react.PropTypes.string,\n      icon: _react.PropTypes.string,\n      inverse: _react.PropTypes.string,\n      mini: _react.PropTypes.string,\n      neutral: _react.PropTypes.string,\n      primary: _react.PropTypes.string,\n      raised: _react.PropTypes.string,\n      rippleWrapper: _react.PropTypes.string,\n      toggle: _react.PropTypes.string\n    }),\n    type: _react.PropTypes.string\n  };\n  IconButton.defaultProps = {\n    accent: false,\n    className: '',\n    neutral: true,\n    primary: false,\n    type: 'button'\n  };\n\n\n  return ripple(IconButton);\n};\n\nvar IconButton = factory((0, _Ripple2.default)({ centered: true }), _FontIcon2.default);\nexports.default = (0, _reactCssThemr.themr)(_identifiers.BUTTON)(IconButton);\nexports.iconButtonFactory = factory;\nexports.IconButton = IconButton;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/font_icon/FontIcon.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FontIcon = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar FontIcon = function FontIcon(_ref) {\n  var alt = _ref.alt,\n      children = _ref.children,\n      className = _ref.className,\n      theme = _ref.theme,\n      value = _ref.value,\n      other = _objectWithoutProperties(_ref, ['alt', 'children', 'className', 'theme', 'value']);\n\n  return (// eslint-disable-line\n    _react2.default.createElement(\n      'span',\n      _extends({\n        'data-react-toolbox': 'font-icon',\n        'aria-label': alt,\n        className: (0, _classnames2.default)({ 'material-icons': typeof value === 'string' || typeof children === 'string' }, className)\n      }, other),\n      value,\n      children\n    )\n  );\n};\n\nFontIcon.propTypes = {\n  alt: _react.PropTypes.string,\n  children: _react.PropTypes.node,\n  className: _react.PropTypes.string,\n  theme: _react.PropTypes.object, // eslint-disable-line\n  value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element])\n};\n\nFontIcon.defaultProps = {\n  alt: '',\n  className: ''\n};\n\nexports.default = FontIcon;\nexports.FontIcon = FontIcon;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/ripple/Ripple.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _classnames2 = require('classnames');\n\nvar _classnames3 = _interopRequireDefault(_classnames2);\n\nvar _reactCssThemr = require('react-css-themr');\n\nvar _dissoc = require('ramda/src/dissoc');\n\nvar _dissoc2 = _interopRequireDefault(_dissoc);\n\nvar _identifiers = require('../identifiers');\n\nvar _events = require('../utils/events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _prefixer = require('../utils/prefixer');\n\nvar _prefixer2 = _interopRequireDefault(_prefixer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar defaults = {\n  centered: false,\n  className: '',\n  multiple: true,\n  passthrough: true,\n  spread: 2,\n  theme: {}\n};\n\nvar rippleFactory = function rippleFactory() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _defaults$options = _extends({}, defaults, options),\n      defaultCentered = _defaults$options.centered,\n      defaultClassName = _defaults$options.className,\n      defaultMultiple = _defaults$options.multiple,\n      defaultPassthrough = _defaults$options.passthrough,\n      defaultSpread = _defaults$options.spread,\n      defaultTheme = _defaults$options.theme,\n      props = _objectWithoutProperties(_defaults$options, ['centered', 'className', 'multiple', 'passthrough', 'spread', 'theme']);\n\n  return function (ComposedComponent) {\n    var RippledComponent = function (_Component) {\n      _inherits(RippledComponent, _Component);\n\n      function RippledComponent() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, RippledComponent);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RippledComponent.__proto__ || Object.getPrototypeOf(RippledComponent)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n          ripples: {}\n        }, _this.rippleNodes = {}, _this.doRipple = function () {\n          return !_this.props.disabled && _this.props.ripple;\n        }, _this.handleMouseDown = function (event) {\n          if (_this.props.onMouseDown) _this.props.onMouseDown(event);\n          if (_this.doRipple()) {\n            var _events$getMousePosit = _events2.default.getMousePosition(event),\n                x = _events$getMousePosit.x,\n                y = _events$getMousePosit.y;\n\n            _this.animateRipple(x, y, false);\n          }\n        }, _this.handleTouchStart = function (event) {\n          if (_this.props.onTouchStart) _this.props.onTouchStart(event);\n          if (_this.doRipple()) {\n            var _events$getTouchPosit = _events2.default.getTouchPosition(event),\n                x = _events$getTouchPosit.x,\n                y = _events$getTouchPosit.y;\n\n            _this.animateRipple(x, y, true);\n          }\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n      }\n\n      _createClass(RippledComponent, [{\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps, prevState) {\n          // If a new ripple was just added, add a remove event listener to its animation\n          if (Object.keys(prevState.ripples).length < Object.keys(this.state.ripples).length) {\n            this.addRippleRemoveEventListener(this.getLastKey());\n          }\n        }\n      }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n          var _this2 = this;\n\n          // Remove document event listeners for ripple if they still exists\n          Object.keys(this.state.ripples).forEach(function (key) {\n            _this2.state.ripples[key].endRipple();\n          });\n        }\n\n        /**\n         * Find out a descriptor object for the ripple element being created depending on\n         * the position where the it was triggered and the component's dimensions.\n         *\n         * @param {Number} x Coordinate x in the viewport where ripple was triggered\n         * @param {Number} y Coordinate y in the viewport where ripple was triggered\n         * @return {Object} Descriptor element including position and size of the element\n         */\n\n      }, {\n        key: 'getDescriptor',\n        value: function getDescriptor(x, y) {\n          var _ReactDOM$findDOMNode = _reactDom2.default.findDOMNode(this).getBoundingClientRect(),\n              left = _ReactDOM$findDOMNode.left,\n              top = _ReactDOM$findDOMNode.top,\n              height = _ReactDOM$findDOMNode.height,\n              width = _ReactDOM$findDOMNode.width;\n\n          var _props = this.props,\n              centered = _props.rippleCentered,\n              spread = _props.rippleSpread;\n\n          return {\n            left: centered ? 0 : x - left - width / 2,\n            top: centered ? 0 : y - top - height / 2,\n            width: width * spread\n          };\n        }\n\n        /**\n         * Increments and internal counter and returns the next value as a string. It\n         * is used to assign key references to new ripple elements.\n         *\n         * @return {String} Key to be assigned to a ripple.\n         */\n\n      }, {\n        key: 'getNextKey',\n        value: function getNextKey() {\n          this.currentCount = this.currentCount ? this.currentCount + 1 : 1;\n          return 'ripple' + this.currentCount;\n        }\n\n        /**\n         * Return the last generated key for a ripple element. When there is only one ripple\n         * and to get the reference when a ripple was just created.\n         *\n         * @return {String} The last generated ripple key.\n         */\n\n      }, {\n        key: 'getLastKey',\n        value: function getLastKey() {\n          return 'ripple' + this.currentCount;\n        }\n\n        /**\n         * Variable to store the ripple references\n         */\n\n      }, {\n        key: 'rippleShouldTrigger',\n\n\n        /**\n         * Determine if a ripple should start depending if its a touch event. For mobile both\n         * touchStart and mouseDown are launched so in case is touch we should always trigger\n         * but if its not we should check if a touch was already triggered to decide.\n         *\n         * @param {Boolean} isTouch True in case a touch event triggered the ripple false otherwise.\n         * @return {Boolean} True in case the ripple should trigger or false if it shouldn't.\n         */\n        value: function rippleShouldTrigger(isTouch) {\n          var shouldStart = isTouch ? true : !this.touchCache;\n          this.touchCache = isTouch;\n          return shouldStart;\n        }\n\n        /**\n         * Start a ripple animation on an specific point with touch or mouse events. First\n         * decides if the animation should trigger. If the ripple is multiple or there is no\n         * ripple present, it creates a new key. If it's a simple ripple and already exists,\n         * it just restarts the current ripple. The animation happens in two state changes\n         * to allow triggering via css.\n         *\n         * @param {Number} x Coordinate X on the screen where animation should start\n         * @param {Number} y Coordinate Y on the screen where animation should start\n         * @param {Boolean} isTouch Use events from touch or mouse.\n         */\n\n      }, {\n        key: 'animateRipple',\n        value: function animateRipple(x, y, isTouch) {\n          var _this3 = this;\n\n          if (this.rippleShouldTrigger(isTouch)) {\n            (function () {\n              var _getDescriptor = _this3.getDescriptor(x, y),\n                  top = _getDescriptor.top,\n                  left = _getDescriptor.left,\n                  width = _getDescriptor.width;\n\n              var noRipplesActive = Object.keys(_this3.state.ripples).length === 0;\n              var key = _this3.props.rippleMultiple || noRipplesActive ? _this3.getNextKey() : _this3.getLastKey();\n              var endRipple = _this3.addRippleDeactivateEventListener(isTouch, key);\n              var initialState = { active: false, restarting: true, top: top, left: left, width: width, endRipple: endRipple };\n              var runningState = { active: true, restarting: false };\n              var ripples = _extends({}, _this3.state.ripples, _defineProperty({}, key, initialState));\n              _this3.setState({ ripples: ripples }, function () {\n                if (_this3.rippleNodes[key]) _this3.rippleNodes[key].offsetWidth; // eslint-disable-line\n                _this3.setState({ ripples: _extends({}, _this3.state.ripples, _defineProperty({}, key, Object.assign({}, _this3.state.ripples[key], runningState))) });\n              });\n            })();\n          }\n        }\n\n        /**\n         * Add an event listener to the reference with given key so when the animation transition\n         * ends we can be sure that it finished and it can be safely removed from the state.\n         * This function is called whenever a new ripple is added to the component.\n         *\n         * @param {String} rippleKey Is the key of the ripple to add the event.\n         */\n\n      }, {\n        key: 'addRippleRemoveEventListener',\n        value: function addRippleRemoveEventListener(rippleKey) {\n          var self = this;\n          var rippleNode = this.rippleNodes[rippleKey];\n          _events2.default.addEventListenerOnTransitionEnded(rippleNode, function onOpacityEnd(e) {\n            if (e.propertyName === 'opacity') {\n              if (self.props.onRippleEnded) self.props.onRippleEnded(e);\n              _events2.default.removeEventListenerOnTransitionEnded(self.rippleNodes[rippleKey], onOpacityEnd);\n              // self.rippleNodes = dissoc(rippleKey, self.rippleNodes);\n              delete self.rippleNodes[rippleKey];\n              self.setState({ ripples: (0, _dissoc2.default)(rippleKey, self.state.ripples) });\n            }\n          });\n        }\n\n        /**\n         * Add an event listener to the document needed to deactivate a ripple and make it dissappear.\n         * Deactivation can happen with a touchend or mouseup depending on the trigger type. The\n         * ending function is created from a factory function and returned.\n         *\n         * @param {Boolean} isTouch True in case the trigger was a touch event false otherwise.\n         * @param {String} rippleKey It's a key to identify the ripple that should be deactivated.\n         * @return {Function} Callback function that deactivates the ripple and removes the listener\n         */\n\n      }, {\n        key: 'addRippleDeactivateEventListener',\n        value: function addRippleDeactivateEventListener(isTouch, rippleKey) {\n          var eventType = isTouch ? 'touchend' : 'mouseup';\n          var endRipple = this.createRippleDeactivateCallback(eventType, rippleKey);\n          document.addEventListener(eventType, endRipple);\n          return endRipple;\n        }\n\n        /**\n         * Generates a function that can be called to deactivate a ripple and remove its finishing\n         * event listener. If is generated because we need to store it to be called on unmount in case\n         * the ripple is still running.\n         *\n         * @param {String} eventType Is the event type that can be touchend or mouseup\n         * @param {String} rippleKey Is the key representing the ripple\n         * @return {Function} Callback function that deactivates the ripple and removes the listener\n         */\n\n      }, {\n        key: 'createRippleDeactivateCallback',\n        value: function createRippleDeactivateCallback(eventType, rippleKey) {\n          var self = this;\n          return function endRipple() {\n            document.removeEventListener(eventType, endRipple);\n            self.setState({ ripples: _extends({}, self.state.ripples, _defineProperty({}, rippleKey, Object.assign({}, self.state.ripples[rippleKey], { active: false }))) });\n          };\n        }\n      }, {\n        key: 'renderRipple',\n        value: function renderRipple(key, className, _ref2) {\n          var _classnames,\n              _this4 = this;\n\n          var active = _ref2.active,\n              left = _ref2.left,\n              restarting = _ref2.restarting,\n              top = _ref2.top,\n              width = _ref2.width;\n\n          var scale = restarting ? 0 : 1;\n          var transform = 'translate3d(' + (-width / 2 + left) + 'px, ' + (-width / 2 + top) + 'px, 0) scale(' + scale + ')';\n          var _className = (0, _classnames3.default)(this.props.theme.ripple, (_classnames = {}, _defineProperty(_classnames, this.props.theme.rippleActive, active), _defineProperty(_classnames, this.props.theme.rippleRestarting, restarting), _classnames), className);\n          return _react2.default.createElement(\n            'span',\n            _extends({ key: key, 'data-react-toolbox': 'ripple', className: this.props.theme.rippleWrapper }, props),\n            _react2.default.createElement('span', {\n              className: _className,\n              ref: function ref(node) {\n                if (node) _this4.rippleNodes[key] = node;\n              },\n              style: (0, _prefixer2.default)({ transform: transform }, { width: width, height: width })\n            })\n          );\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var _this5 = this;\n\n          var _props2 = this.props,\n              children = _props2.children,\n              disabled = _props2.disabled,\n              ripple = _props2.ripple,\n              onRippleEnded = _props2.onRippleEnded,\n              rippleCentered = _props2.rippleCentered,\n              rippleClassName = _props2.rippleClassName,\n              rippleMultiple = _props2.rippleMultiple,\n              rippleSpread = _props2.rippleSpread,\n              theme = _props2.theme,\n              other = _objectWithoutProperties(_props2, ['children', 'disabled', 'ripple', 'onRippleEnded', 'rippleCentered', 'rippleClassName', 'rippleMultiple', 'rippleSpread', 'theme']);\n\n          var ripples = this.state.ripples;\n\n          var childRipples = Object.keys(ripples).map(function (key) {\n            return _this5.renderRipple(key, rippleClassName, ripples[key]);\n          });\n          var childProps = _extends({\n            onMouseDown: this.handleMouseDown,\n            onTouchStart: this.handleTouchStart\n          }, other);\n          var finalProps = defaultPassthrough ? _extends({}, childProps, { theme: theme, disabled: disabled }) : childProps;\n\n          return !ripple ? _react2.default.createElement(ComposedComponent, finalProps, children) : _react2.default.createElement(ComposedComponent, finalProps, [children, childRipples]);\n        }\n      }]);\n\n      return RippledComponent;\n    }(_react.Component);\n\n    RippledComponent.propTypes = {\n      children: _react.PropTypes.node,\n      disabled: _react.PropTypes.bool,\n      onMouseDown: _react.PropTypes.func,\n      onRippleEnded: _react.PropTypes.func,\n      onTouchStart: _react.PropTypes.func,\n      ripple: _react.PropTypes.bool,\n      rippleCentered: _react.PropTypes.bool,\n      rippleClassName: _react.PropTypes.string,\n      rippleMultiple: _react.PropTypes.bool,\n      rippleSpread: _react.PropTypes.number,\n      theme: _react.PropTypes.shape({\n        ripple: _react.PropTypes.string,\n        rippleActive: _react.PropTypes.string,\n        rippleRestarting: _react.PropTypes.string,\n        rippleWrapper: _react.PropTypes.string\n      })\n    };\n    RippledComponent.defaultProps = {\n      disabled: false,\n      ripple: true,\n      rippleCentered: defaultCentered,\n      rippleClassName: defaultClassName,\n      rippleMultiple: defaultMultiple,\n      rippleSpread: defaultSpread\n    };\n\n\n    return (0, _reactCssThemr.themr)(_identifiers.RIPPLE, defaultTheme)(RippledComponent);\n  };\n};\n\nexports.default = rippleFactory;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/utils/events.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = require('ramda/src/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n  getMousePosition: function getMousePosition(event) {\n    return {\n      x: event.pageX - (window.scrollX || window.pageXOffset),\n      y: event.pageY - (window.scrollY || window.pageYOffset)\n    };\n  },\n  getTouchPosition: function getTouchPosition(event) {\n    return {\n      x: event.touches[0].pageX - (window.scrollX || window.pageXOffset),\n      y: event.touches[0].pageY - (window.scrollY || window.pageYOffset)\n    };\n  },\n  pauseEvent: function pauseEvent(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  },\n  addEventsToDocument: function addEventsToDocument(eventMap) {\n    Object.keys(eventMap).forEach(function (key) {\n      document.addEventListener(key, eventMap[key], false);\n    });\n  },\n  removeEventsFromDocument: function removeEventsFromDocument(eventMap) {\n    Object.keys(eventMap).forEach(function (key) {\n      document.removeEventListener(key, eventMap[key], false);\n    });\n  },\n  targetIsDescendant: function targetIsDescendant(event, parent) {\n    var node = event.target;\n    while (node !== null) {\n      if (node === parent) return true;\n      node = node.parentNode;\n    }\n    return false;\n  },\n  addEventListenerOnTransitionEnded: function addEventListenerOnTransitionEnded(element, fn) {\n    var eventName = transitionEventNamesFor(element);\n    if (!eventName) return false;\n    element.addEventListener(eventName, fn);\n    return true;\n  },\n  removeEventListenerOnTransitionEnded: function removeEventListenerOnTransitionEnded(element, fn) {\n    var eventName = transitionEventNamesFor(element);\n    if (!eventName) return false;\n    element.removeEventListener(eventName, fn);\n    return true;\n  }\n};\n\n\nvar TRANSITIONS = {\n  transition: 'transitionend',\n  OTransition: 'oTransitionEnd',\n  MozTransition: 'transitionend',\n  WebkitTransition: 'webkitTransitionEnd'\n};\n\nfunction transitionEventNamesFor(element) {\n  return (0, _keys2.default)(TRANSITIONS).reduce(function (result, transition) {\n    return !result && element && element.style[transition] !== undefined ? TRANSITIONS[transition] : result;\n  }, null);\n}","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/utils/prefixer.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar WEBKIT = 'Webkit';\nvar MICROSOFT = 'Ms';\n\nvar properties = {\n  transform: [WEBKIT, MICROSOFT]\n};\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.substr(1);\n}\n\nfunction getPrefixes(property, value) {\n  return properties[property].reduce(function (acc, item) {\n    acc['' + item + capitalize(property)] = value; // eslint-disable-line no-param-reassign\n    return acc;\n  }, {});\n}\n\nfunction addPrefixesTo(style, property, value) {\n  var vendor = getPrefixes(property, value);\n  for (var prefix in vendor) {\n    // eslint-disable-line no-restricted-syntax\n    if ({}.hasOwnProperty.call(vendor, prefix)) {\n      style[prefix] = vendor[prefix]; // eslint-disable-line no-param-reassign\n    }\n  }\n\n  return style;\n}\n\nfunction prefixer(style) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _style = defaultValue;\n  for (var property in style) {\n    // eslint-disable-line no-restricted-syntax\n    if ({}.hasOwnProperty.call(style, property)) {\n      _style[property] = style[property];\n      if (properties[property]) {\n        addPrefixesTo(_style, property, style[property]);\n      }\n    }\n  }\n\n  return _style;\n}\n\nexports.default = prefixer;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/button/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowseButton = exports.IconButton = exports.Button = undefined;\n\nvar _reactCssThemr = require('react-css-themr');\n\nvar _identifiers = require('../identifiers');\n\nvar _Button = require('./Button');\n\nvar _BrowseButton = require('./BrowseButton');\n\nvar _IconButton = require('./IconButton');\n\nvar _FontIcon = require('../font_icon/FontIcon');\n\nvar _ripple = require('../ripple');\n\nvar _ripple2 = _interopRequireDefault(_ripple);\n\nvar _theme = require('./theme.css');\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Button = (0, _Button.buttonFactory)((0, _ripple2.default)({ centered: false }), _FontIcon.FontIcon);\nvar IconButton = (0, _IconButton.iconButtonFactory)((0, _ripple2.default)({ centered: true }), _FontIcon.FontIcon);\nvar BrowseButton = (0, _BrowseButton.browseButtonFactory)((0, _ripple2.default)({ centered: false }), _FontIcon.FontIcon);\nvar ThemedButton = (0, _reactCssThemr.themr)(_identifiers.BUTTON, _theme2.default)(Button);\nvar ThemedIconButton = (0, _reactCssThemr.themr)(_identifiers.BUTTON, _theme2.default)(IconButton);\nvar ThemedBrowseButton = (0, _reactCssThemr.themr)(_identifiers.BUTTON, _theme2.default)(BrowseButton);\n\nexports.default = ThemedButton;\nexports.Button = ThemedButton;\nexports.IconButton = ThemedIconButton;\nexports.BrowseButton = ThemedBrowseButton;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/button/Button.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Button = exports.buttonFactory = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames2 = require('classnames');\n\nvar _classnames3 = _interopRequireDefault(_classnames2);\n\nvar _reactCssThemr = require('react-css-themr');\n\nvar _identifiers = require('../identifiers');\n\nvar _FontIcon = require('../font_icon/FontIcon');\n\nvar _FontIcon2 = _interopRequireDefault(_FontIcon);\n\nvar _Ripple = require('../ripple/Ripple');\n\nvar _Ripple2 = _interopRequireDefault(_Ripple);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar factory = function factory(ripple, FontIcon) {\n  var Button = function (_Component) {\n    _inherits(Button, _Component);\n\n    function Button() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Button);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Button.__proto__ || Object.getPrototypeOf(Button)).call.apply(_ref, [this].concat(args))), _this), _this.getLevel = function () {\n        if (_this.props.primary) return 'primary';\n        if (_this.props.accent) return 'accent';\n        return 'neutral';\n      }, _this.getShape = function () {\n        if (_this.props.raised) return 'raised';\n        if (_this.props.floating) return 'floating';\n        return 'flat';\n      }, _this.handleMouseUp = function (event) {\n        _this.buttonNode.blur();\n        if (_this.props.onMouseUp) _this.props.onMouseUp(event);\n      }, _this.handleMouseLeave = function (event) {\n        _this.buttonNode.blur();\n        if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(Button, [{\n      key: 'render',\n      value: function render() {\n        var _classnames,\n            _this2 = this;\n\n        var _props = this.props,\n            accent = _props.accent,\n            children = _props.children,\n            className = _props.className,\n            flat = _props.flat,\n            floating = _props.floating,\n            href = _props.href,\n            icon = _props.icon,\n            inverse = _props.inverse,\n            label = _props.label,\n            mini = _props.mini,\n            neutral = _props.neutral,\n            primary = _props.primary,\n            raised = _props.raised,\n            theme = _props.theme,\n            type = _props.type,\n            others = _objectWithoutProperties(_props, ['accent', 'children', 'className', 'flat', 'floating', 'href', 'icon', 'inverse', 'label', 'mini', 'neutral', 'primary', 'raised', 'theme', 'type']);\n\n        var element = href ? 'a' : 'button';\n        var level = this.getLevel();\n        var shape = this.getShape();\n\n        var classes = (0, _classnames3.default)(theme.button, [theme[shape]], (_classnames = {}, _defineProperty(_classnames, theme[level], neutral), _defineProperty(_classnames, theme.mini, mini), _defineProperty(_classnames, theme.inverse, inverse), _classnames), className);\n\n        var props = _extends({}, others, {\n          href: href,\n          ref: function ref(node) {\n            _this2.buttonNode = node;\n          },\n          className: classes,\n          disabled: this.props.disabled,\n          onMouseUp: this.handleMouseUp,\n          onMouseLeave: this.handleMouseLeave,\n          type: !href ? type : null,\n          'data-react-toolbox': 'button'\n        });\n\n        return _react2.default.createElement(element, props, icon ? _react2.default.createElement(FontIcon, { className: theme.icon, value: icon }) : null, label, children);\n      }\n    }]);\n\n    return Button;\n  }(_react.Component);\n\n  Button.propTypes = {\n    accent: _react.PropTypes.bool,\n    children: _react.PropTypes.node,\n    className: _react.PropTypes.string,\n    disabled: _react.PropTypes.bool,\n    flat: _react.PropTypes.bool,\n    floating: _react.PropTypes.bool,\n    href: _react.PropTypes.string,\n    icon: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),\n    inverse: _react.PropTypes.bool,\n    label: _react.PropTypes.string,\n    mini: _react.PropTypes.bool,\n    neutral: _react.PropTypes.bool,\n    onMouseLeave: _react.PropTypes.func,\n    onMouseUp: _react.PropTypes.func,\n    primary: _react.PropTypes.bool,\n    raised: _react.PropTypes.bool,\n    theme: _react.PropTypes.shape({\n      accent: _react.PropTypes.string,\n      button: _react.PropTypes.string,\n      flat: _react.PropTypes.string,\n      floating: _react.PropTypes.string,\n      icon: _react.PropTypes.string,\n      inverse: _react.PropTypes.string,\n      mini: _react.PropTypes.string,\n      neutral: _react.PropTypes.string,\n      primary: _react.PropTypes.string,\n      raised: _react.PropTypes.string,\n      rippleWrapper: _react.PropTypes.string,\n      toggle: _react.PropTypes.string\n    }),\n    type: _react.PropTypes.string\n  };\n  Button.defaultProps = {\n    accent: false,\n    className: '',\n    flat: false,\n    floating: false,\n    mini: false,\n    neutral: true,\n    primary: false,\n    raised: false,\n    type: 'button'\n  };\n\n\n  return ripple(Button);\n};\n\nvar Button = factory((0, _Ripple2.default)({ centered: false }), _FontIcon2.default);\nexports.default = (0, _reactCssThemr.themr)(_identifiers.BUTTON)(Button);\nexports.buttonFactory = factory;\nexports.Button = Button;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/button/BrowseButton.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowseButton = exports.browseButtonFactory = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames2 = require('classnames');\n\nvar _classnames3 = _interopRequireDefault(_classnames2);\n\nvar _reactCssThemr = require('react-css-themr');\n\nvar _identifiers = require('../identifiers');\n\nvar _FontIcon = require('../font_icon/FontIcon');\n\nvar _FontIcon2 = _interopRequireDefault(_FontIcon);\n\nvar _Ripple = require('../ripple/Ripple');\n\nvar _Ripple2 = _interopRequireDefault(_Ripple);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar factory = function factory(ripple, FontIcon) {\n  var SimpleBrowseButton = function (_Component) {\n    _inherits(SimpleBrowseButton, _Component);\n\n    function SimpleBrowseButton() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, SimpleBrowseButton);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SimpleBrowseButton.__proto__ || Object.getPrototypeOf(SimpleBrowseButton)).call.apply(_ref, [this].concat(args))), _this), _this.getLevel = function () {\n        if (_this.props.primary) return 'primary';\n        if (_this.props.accent) return 'accent';\n        return 'neutral';\n      }, _this.getShape = function () {\n        if (_this.props.raised) return 'raised';\n        if (_this.props.floating) return 'floating';\n        return 'flat';\n      }, _this.handleMouseUp = function (event) {\n        _this.labelNode.blur();\n        if (_this.props.onMouseUp) _this.props.onMouseUp(event);\n      }, _this.handleMouseLeave = function (event) {\n        _this.labelNode.blur();\n        if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);\n      }, _this.handleFileChange = function (event) {\n        if (_this.props.onChange) _this.props.onChange(event);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(SimpleBrowseButton, [{\n      key: 'render',\n      value: function render() {\n        var _classnames,\n            _this2 = this;\n\n        var _props = this.props,\n            accent = _props.accent,\n            children = _props.children,\n            className = _props.className,\n            flat = _props.flat,\n            floating = _props.floating,\n            icon = _props.icon,\n            inverse = _props.inverse,\n            label = _props.label,\n            mini = _props.mini,\n            neutral = _props.neutral,\n            primary = _props.primary,\n            raised = _props.raised,\n            theme = _props.theme,\n            others = _objectWithoutProperties(_props, ['accent', 'children', 'className', 'flat', 'floating', 'icon', 'inverse', 'label', 'mini', 'neutral', 'primary', 'raised', 'theme']);\n\n        var element = 'label';\n        var level = this.getLevel();\n        var shape = this.getShape();\n\n        var classes = (0, _classnames3.default)(theme.button, [theme[shape]], (_classnames = {}, _defineProperty(_classnames, theme[level], neutral), _defineProperty(_classnames, theme.mini, mini), _defineProperty(_classnames, theme.inverse, inverse), _classnames), className);\n\n        var props = _extends({}, others, {\n          ref: function ref(node) {\n            _this2.labelNode = node;\n          },\n          className: classes,\n          disabled: this.props.disabled,\n          onMouseUp: this.handleMouseUp,\n          onMouseLeave: this.handleMouseLeave,\n          'data-react-toolbox': 'label'\n        });\n\n        return _react2.default.createElement(element, props, icon ? _react2.default.createElement(FontIcon, { className: theme.icon, value: icon }) : null, _react2.default.createElement(\n          'span',\n          null,\n          label\n        ), _react2.default.createElement('input', { className: classes, type: 'file', onChange: this.handleFileChange }), children);\n      }\n    }]);\n\n    return SimpleBrowseButton;\n  }(_react.Component);\n\n  SimpleBrowseButton.propTypes = {\n    accent: _react.PropTypes.bool,\n    children: _react.PropTypes.node,\n    className: _react.PropTypes.string,\n    disabled: _react.PropTypes.bool,\n    flat: _react.PropTypes.bool,\n    floating: _react.PropTypes.bool,\n    icon: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]),\n    inverse: _react.PropTypes.bool,\n    label: _react.PropTypes.string,\n    mini: _react.PropTypes.bool,\n    neutral: _react.PropTypes.bool,\n    onChange: _react.PropTypes.func,\n    onMouseLeave: _react.PropTypes.func,\n    onMouseUp: _react.PropTypes.func,\n    primary: _react.PropTypes.bool,\n    raised: _react.PropTypes.bool,\n    theme: _react.PropTypes.shape({\n      accent: _react.PropTypes.string,\n      button: _react.PropTypes.string,\n      flat: _react.PropTypes.string,\n      floating: _react.PropTypes.string,\n      icon: _react.PropTypes.string,\n      inverse: _react.PropTypes.string,\n      mini: _react.PropTypes.string,\n      neutral: _react.PropTypes.string,\n      primary: _react.PropTypes.string,\n      raised: _react.PropTypes.string,\n      rippleWrapper: _react.PropTypes.string,\n      toggle: _react.PropTypes.string\n    }),\n    type: _react.PropTypes.string\n  };\n  SimpleBrowseButton.defaultProps = {\n    accent: false,\n    className: '',\n    flat: false,\n    floating: false,\n    mini: false,\n    neutral: true,\n    primary: false,\n    raised: false\n  };\n\n\n  return ripple(SimpleBrowseButton);\n};\n\nvar BrowseButton = factory((0, _Ripple2.default)({ centered: false }), _FontIcon2.default);\nexports.default = (0, _reactCssThemr.themr)(_identifiers.BUTTON)(BrowseButton);\nexports.browseButtonFactory = factory;\nexports.BrowseButton = BrowseButton;","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/ripple/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _Ripple = require('./Ripple');\n\nvar _Ripple2 = _interopRequireDefault(_Ripple);\n\nvar _theme = require('./theme.css');\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (options) {\n  return (0, _Ripple2.default)(_extends({}, options, { theme: _theme2.default }));\n};","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/lib/ripple/theme.css":":root {\n  --color-divider: var(--palette-grey-200);\n  --color-background: var(--color-white);\n  --color-text: var(--palette-grey-900);\n  --color-text-secondary: var(--palette-grey-600);\n\n  --color-primary: var(--palette-indigo-500);\n  --color-primary-dark: var(--palette-indigo-700);\n  --color-accent: var(--palette-pink-a200);\n  --color-accent-dark: var(--palette-pink-700);\n  --color-primary-contrast: var(--color-dark-contrast);\n  --color-accent-contrast: var(--color-dark-contrast);\n\n  --unit: 10px;\n\n  --preferred-font: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n  --font-size: calc(1.6 * var(--unit));\n  --font-size-tiny: calc(1.2 * var(--unit));\n  --font-size-small: calc(1.4 * var(--unit));\n  --font-size-normal: var(--font-size);\n  --font-size-big: calc(1.8 * var(--unit));\n  --font-weight-thin: 300;\n  --font-weight-normal: 400;\n  --font-weight-semi-bold: 500;\n  --font-weight-bold: 700;\n\n  --shadow-2p:\n    0 2px 2px 0 rgba(0, 0, 0, 0.14),\n    0 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0 1px 5px 0 rgba(0, 0, 0, 0.12);\n\n  --shadow-3p:\n    0 3px 4px 0 rgba(0, 0, 0, 0.14),\n    0 3px 3px -2px rgba(0, 0, 0, 0.2),\n    0 1px 8px 0 rgba(0, 0, 0, 0.12);\n\n  --shadow-4p:\n    0 4px 5px 0 rgba(0, 0, 0, 0.14),\n    0 1px 10px 0 rgba(0, 0, 0, 0.12),\n    0 2px 4px -1px rgba(0, 0, 0, 0.2);\n\n  --shadow-6p:\n    0 6px 10px 0 rgba(0, 0, 0, 0.14),\n    0 1px 18px 0 rgba(0, 0, 0, 0.12),\n    0 3px 5px -1px rgba(0, 0, 0, 0.2);\n\n  --shadow-8p:\n    0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12),\n    0 5px 5px -3px rgba(0, 0, 0, 0.2);\n\n  --shadow-16p:\n    0 16px 24px 2px rgba(0, 0, 0, 0.14),\n    0 6px 30px 5px rgba(0, 0, 0, 0.12),\n    0 8px 10px -5px rgba(0, 0, 0, 0.2);\n\n  --shadow-key-umbra-opacity: 0.2;\n  --shadow-key-penumbra-opacity: 0.14;\n  --shadow-ambient-shadow-opacity: 0.12;\n\n  --zdepth-shadow-1: 0 1px 6px rgba(0, 0, 0, 0.12), 0 1px 4px rgba(0, 0, 0, 0.24);\n  --zdepth-shadow-2: 0 3px 10px rgba(0, 0, 0, 0.16), 0 3px 10px rgba(0, 0, 0, 0.23);\n  --zdepth-shadow-3: 0 10px 30px rgba(0, 0, 0, 0.19), 0 6px 10px rgba(0, 0, 0, 0.23);\n  --zdepth-shadow-4: 0 14px 45px rgba(0, 0, 0, 0.25), 0 10px 18px rgba(0, 0, 0, 0.22);\n  --zdepth-shadow-5: 0 19px 60px rgba(0, 0, 0, 0.3), 0 15px 20px rgba(0, 0, 0, 0.22);\n\n  --animation-duration: 0.35s;\n  --animation-delay: calc(var(--animation-duration) / 5);\n  --animation-curve-fast-out-slow-in: cubic-bezier(0.4, 0, 0.2, 1);\n  --animation-curve-linear-out-slow-in: cubic-bezier(0, 0, 0.2, 1);\n  --animation-curve-fast-out-linear-in: cubic-bezier(0.4, 0, 1, 1);\n  --animation-curve-default: var(--animation-curve-fast-out-slow-in);\n\n  --z-index-highest: 300;\n  --z-index-higher: 200;\n  --z-index-high: 100;\n  --z-index-normal: 1;\n  --z-index-low: -100;\n  --z-index-lower: -200;\n\n  --reset: {\n    box-sizing: border-box;\n    font-family: var(--preferred-font);\n    -webkit-font-smoothing: antialiased;\n    font-smoothing: antialiased;\n    text-size-adjust: 100%;\n\n    & *,\n    & *::after,\n    & *::before {\n      box-sizing: border-box;\n      -webkit-font-smoothing: antialiased;\n      font-smoothing: antialiased;\n      text-size-adjust: 100%;\n      -webkit-touch-callout: none;\n    }\n  }\n}\n:root {\n  --ripple-duration: 800ms;\n  --ripple-final-opacity: 0.3;\n  --ripple-size: calc(15 * var(--unit));\n}\n.rippleWrapper {\n  bottom: 0;\n  left: 0;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: var(--z-index-normal);\n}\n.ripple {\n  background-color: currentColor;\n  border-radius: 50%;\n  left: 50%;\n  pointer-events: none;\n  position: absolute;\n  top: 50%;\n  transform-origin: 50% 50%;\n  transition-duration: var(--ripple-duration);\n  z-index: var(--z-index-high);\n\n  &.rippleRestarting {\n    opacity: var(--ripple-final-opacity);\n    transition-property: none;\n  }\n\n  &.rippleActive {\n    opacity: var(--ripple-final-opacity);\n    transition-property: transform;\n  }\n\n  &:not(.rippleActive):not(.rippleRestarting) {\n    opacity: 0;\n    transition-property: opacity, transform;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/gulpfile.js":"const path = require('path');\nconst gulp = require('gulp');\nconst babel = require('gulp-babel');\nconst postcss = require('gulp-postcss');\n\ngulp.task('js', function () {\n  return gulp.src([\n    './components/**/*.js',\n    '!./components/**/__test__/*.js',\n    '!./components/__mocks__/**/*.js'\n  ])\n    .pipe(babel())\n    .pipe(gulp.dest('./lib'));\n});\n\ngulp.task('css', function () {\n  const plugins = [\n    require('postcss-import')({\n      root: __dirname,\n      path: [path.join(__dirname, './components')]\n    }),\n    require('postcss-mixins')(),\n    require('postcss-each')(),\n    require('postcss-reporter')({ clearMessages: true })\n  ];\n\n  return gulp.src([\n      './components/*.css',\n      './components/**/*.css'\n    ])\n    .pipe(postcss(plugins))\n    .pipe(gulp.dest('./lib'));\n});\n\ngulp.task('default', ['js', 'css']);\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/jest.config.js":"Object.defineProperty(window, 'requestAnimationFrame', { value: fn => fn() });\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/identifiers.js":"export const APP_BAR = 'RTAppBar';\nexport const AUTOCOMPLETE = 'RTAutocomplete';\nexport const AVATAR = 'RTAvatar';\nexport const BUTTON = 'RTButton';\nexport const CARD = 'RTCard';\nexport const CHIP = 'RTChip';\nexport const CHECKBOX = 'RTCheckbox';\nexport const DATE_PICKER = 'RTDatePicker';\nexport const DIALOG = 'RTDialog';\nexport const DRAWER = 'RTDrawer';\nexport const DROPDOWN = 'RTDropdown';\nexport const INPUT = 'RTInput';\nexport const LAYOUT = 'RTLayout';\nexport const LINK = 'RTLink';\nexport const LIST = 'RTList';\nexport const MENU = 'RTMenu';\nexport const NAVIGATION = 'RTNavigation';\nexport const OVERLAY = 'RTOverlay';\nexport const PROGRESS_BAR = 'RTProgressBar';\nexport const RADIO = 'RTRadio';\nexport const RIPPLE = 'RTRipple';\nexport const SLIDER = 'RTSlider';\nexport const SNACKBAR = 'RTSnackbar';\nexport const SWITCH = 'RTSwitch';\nexport const TABLE = 'RTTable';\nexport const TABS = 'RTTabs';\nexport const TOOLTIP = 'RTTooltip';\nexport const TIME_PICKER = 'RTTimePicker';\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/index.js":"import './utils/polyfills'; // Import polyfills for IE11\n\nexport { overrideComponentTypeChecker } from './utils/is-component-of-type';\nexport { default as AppBar } from './app_bar';\nexport { default as Autocomplete } from './autocomplete';\nexport { default as Avatar } from './avatar';\nexport * from './button';\nexport * from './card';\nexport { default as Chip } from './chip';\nexport { default as Checkbox } from './checkbox';\nexport { default as DatePicker } from './date_picker';\nexport { default as Dialog } from './dialog';\nexport { default as Drawer } from './drawer';\nexport { default as Dropdown } from './dropdown';\nexport { default as FontIcon } from './font_icon';\nexport { default as Input } from './input';\nexport * from './layout';\nexport { default as Link } from './link';\nexport * from './list';\nexport * from './menu';\nexport { default as Navigation } from './navigation';\nexport { default as ProgressBar } from './progress_bar';\nexport * from './radio';\nexport Ripple from './ripple';\nexport { default as Slider } from './slider';\nexport { default as Snackbar } from './snackbar';\nexport { default as Switch } from './switch';\nexport * from './table';\nexport * from './tabs';\nexport Tooltip from './tooltip';\nexport { default as TimePicker } from './time_picker';\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/ThemeProvider.js":"export { ThemeProvider as default } from 'react-css-themr';\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/app_bar/AppBar.js":"import React, { PropTypes } from 'react';\nimport cn from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { APP_BAR } from '../identifiers';\nimport InjectIconButton from '../button/IconButton';\n\nconst factory = (IconButton) => {\n  class AppBar extends React.Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      fixed: PropTypes.bool,\n      flat: PropTypes.bool,\n      leftIcon: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      onLeftIconClick: PropTypes.func,\n      onRightIconClick: PropTypes.func,\n      rightIcon: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      scrollHide: PropTypes.bool,\n      theme: PropTypes.shape({\n        appBar: PropTypes.string,\n        inner: PropTypes.string,\n        fixed: PropTypes.string,\n        flat: PropTypes.string,\n        leftIcon: PropTypes.string,\n        rightIcon: PropTypes.string,\n        scrollHide: PropTypes.string,\n        title: PropTypes.string,\n      }),\n      title: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n    };\n\n    static defaultProps = {\n      className: '',\n      fixed: false,\n      flat: false,\n      scrollHide: false,\n    };\n\n    state = { hidden: false, height: 0 };\n\n    componentDidMount() {\n      if (this.props.scrollHide) {\n        this.initializeScroll();\n      }\n    }\n\n    componentWillReceiveProps(nextProps) {\n      if (!this.props.scrollHide && nextProps.scrollHide) {\n        this.initializeScroll();\n      }\n\n      if (this.props.scrollHide && !nextProps.scrollHide) {\n        this.endScroll();\n      }\n    }\n\n    componentWillUnmount() {\n      if (this.props.scrollHide) {\n        this.endScroll();\n      }\n    }\n\n    initializeScroll() {\n      window.addEventListener('scroll', this.handleScroll);\n      const { height } = this.rootNode.getBoundingClientRect();\n      this.curScroll = window.scrollY;\n      this.setState({ height });\n    }\n\n    endScroll() {\n      window.removeEventListener('scroll', this.handleScroll);\n    }\n\n    handleScroll = () => {\n      const scrollDiff = this.curScroll - window.scrollY;\n      const hidden = scrollDiff < 0\n        && window.scrollY !== undefined\n        && window.scrollY > this.state.height;\n      this.setState({ hidden });\n      this.curScroll = window.scrollY;\n    };\n\n    render() {\n      const {\n        children,\n        leftIcon,\n        onLeftIconClick,\n        onRightIconClick,\n        rightIcon,\n        theme,\n        title,\n      } = this.props;\n\n      const className = cn(theme.appBar, {\n        [theme.fixed]: this.props.fixed,\n        [theme.flat]: this.props.flat,\n        [theme.scrollHide]: this.state.hidden,\n      }, this.props.className);\n\n      const renderedTitle = typeof title === 'string'\n        ? <h1 className={cn(theme.title)}>{title}</h1>\n        : title;\n\n      const renderedLeftIcon = leftIcon && (\n        <IconButton\n          inverse\n          className={cn(theme.leftIcon)}\n          onClick={onLeftIconClick}\n          icon={leftIcon}\n        />\n      );\n\n      const renderedRightIcon = rightIcon && (\n        <IconButton\n          inverse\n          className={cn(theme.rightIcon)}\n          onClick={onRightIconClick}\n          icon={rightIcon}\n        />\n      );\n\n      return (\n        <header\n          className={className}\n          data-react-toolbox=\"app-bar\"\n          ref={(node) => { this.rootNode = node; }}\n        >\n          <div className={theme.inner}>\n            {renderedLeftIcon}\n            {renderedTitle}\n            {children}\n            {renderedRightIcon}\n          </div>\n        </header>\n      );\n    }\n  }\n\n  return AppBar;\n};\n\nconst AppBar = factory(InjectIconButton);\nexport default themr(APP_BAR)(AppBar);\nexport { factory as appBarFactory };\nexport { AppBar };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/app_bar/index.js":"import { themr } from 'react-css-themr';\nimport { APP_BAR } from '../identifiers';\nimport { appBarFactory } from './AppBar';\nimport { IconButton } from '../button';\nimport theme from './theme.css';\n\nconst AppBar = appBarFactory(IconButton);\nconst ThemedAppBar = themr(APP_BAR, theme)(AppBar);\n\nexport default ThemedAppBar;\nexport { ThemedAppBar as AppBar };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/autocomplete/Autocomplete.js":"/* eslint-disable */\nimport React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { AUTOCOMPLETE } from '../identifiers.js';\nimport InjectChip from '../chip/Chip.js';\nimport InjectInput from '../input/Input.js';\nimport events from '../utils/events.js';\n\nconst POSITION = {\n  AUTO: 'auto',\n  DOWN: 'down',\n  UP: 'up',\n};\n\nconst factory = (Chip, Input) => {\n  class Autocomplete extends Component {\n    static propTypes = {\n      allowCreate: PropTypes.bool,\n      className: PropTypes.string,\n      direction: PropTypes.oneOf(['auto', 'up', 'down']),\n      disabled: PropTypes.bool,\n      error: React.PropTypes.oneOfType([\n        React.PropTypes.string,\n        React.PropTypes.node,\n      ]),\n      keepFocusOnChange: PropTypes.bool,\n      label: React.PropTypes.oneOfType([\n        React.PropTypes.string,\n        React.PropTypes.node,\n      ]),\n      multiple: PropTypes.bool,\n      onBlur: PropTypes.func,\n      onChange: PropTypes.func,\n      onFocus: PropTypes.func,\n      onQueryChange: PropTypes.func,\n      query: PropTypes.string,\n      selectedPosition: PropTypes.oneOf(['above', 'below', 'none']),\n      showSelectedWhenNotInSource: PropTypes.bool,\n      showSuggestionsWhenValueIsSet: PropTypes.bool,\n      source: PropTypes.any,\n      suggestionMatch: PropTypes.oneOf(['disabled', 'start', 'anywhere', 'word', 'none']),\n      theme: PropTypes.shape({\n        active: PropTypes.string,\n        autocomplete: PropTypes.string,\n        focus: PropTypes.string,\n        input: PropTypes.string,\n        suggestion: PropTypes.string,\n        suggestions: PropTypes.string,\n        up: PropTypes.string,\n        value: PropTypes.string,\n        values: PropTypes.string,\n      }),\n      value: PropTypes.any,\n    };\n\n    static defaultProps = {\n      allowCreate: false,\n      className: '',\n      direction: 'auto',\n      keepFocusOnChange: false,\n      multiple: true,\n      selectedPosition: 'above',\n      showSelectedWhenNotInSource: false,\n      showSuggestionsWhenValueIsSet: false,\n      source: {},\n      suggestionMatch: 'start',\n    };\n\n    state = {\n      direction: this.props.direction,\n      focus: false,\n      showAllSuggestions: this.props.showSuggestionsWhenValueIsSet,\n      query: this.props.query ? this.props.query : this.query(this.props.value),\n      isValueAnObject: false,\n    };\n\n    componentWillReceiveProps(nextProps) {\n      if (!this.props.multiple) {\n        const query = nextProps.query ? nextProps.query : this.query(nextProps.value);\n        this.updateQuery(query, false);\n      }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n      if (!this.state.focus && nextState.focus && this.props.direction === POSITION.AUTO) {\n        const direction = this.calculateDirection();\n        if (this.state.direction !== direction) {\n          this.setState({ direction });\n        }\n      }\n      return true;\n    }\n\n    handleChange = (values, event) => {\n      const value = this.props.multiple ? values : values[0];\n      const { showSuggestionsWhenValueIsSet: showAllSuggestions } = this.props;\n      const query = this.query(value);\n      if (this.props.onChange) this.props.onChange(value, event);\n      if (this.props.keepFocusOnChange) {\n        this.setState({ query, showAllSuggestions });\n      } else {\n        this.setState({ focus: false, query, showAllSuggestions }, () => {\n          ReactDOM.findDOMNode(this).querySelector('input').blur();\n        });\n      }\n      this.updateQuery(query, this.props.query);\n    };\n\n    handleMouseDown = (event) => {\n      this.selectOrCreateActiveItem(event);\n    }\n\n    handleQueryBlur = (event) => {\n      if (this.state.focus) this.setState({ focus: false });\n      if (this.props.onBlur) this.props.onBlur(event, this.state.active);\n    };\n\n    updateQuery = (query, notify) => {\n      if (notify && this.props.onQueryChange) this.props.onQueryChange(query);\n      this.setState({ query });\n    }\n\n    handleQueryChange = (value) => {\n      const query = this.clearQuery ? '' : value;\n      this.clearQuery = false;\n\n      this.updateQuery(query, true);\n      this.setState({ showAllSuggestions: query ? false : this.props.showSuggestionsWhenValueIsSet, active: null });\n    };\n\n    handleQueryFocus = (event) => {\n      this.suggestionsNode.scrollTop = 0;\n      this.setState({ active: '', focus: true });\n      if (this.props.onFocus) this.props.onFocus(event);\n    };\n\n    handleQueryKeyDown = (event) => {\n     // Mark query for clearing in handleQueryChange when pressing backspace and showing all suggestions.\n      this.clearQuery = (\n       event.which === 8\n       && this.props.showSuggestionsWhenValueIsSet\n       && this.state.showAllSuggestions\n     );\n\n      if (event.which === 13) {\n        this.selectOrCreateActiveItem(event);\n      }\n    };\n\n    handleQueryKeyUp = (event) => {\n      if (event.which === 27) ReactDOM.findDOMNode(this).querySelector('input').blur();\n\n      if ([40, 38].indexOf(event.which) !== -1) {\n        const suggestionsKeys = [...this.suggestions().keys()];\n        let index = suggestionsKeys.indexOf(this.state.active) + (event.which === 40 ? +1 : -1);\n        if (index < 0) index = suggestionsKeys.length - 1;\n        if (index >= suggestionsKeys.length) index = 0;\n        this.setState({ active: suggestionsKeys[index] });\n      }\n    };\n\n    handleSuggestionHover = (event) => {\n      this.setState({ active: event.target.id });\n    };\n\n    calculateDirection() {\n      if (this.props.direction === 'auto') {\n        const client = ReactDOM.findDOMNode(this.inputNode).getBoundingClientRect();\n        const screen_height = window.innerHeight || document.documentElement.offsetHeight;\n        const up = client.top > ((screen_height / 2) + client.height);\n        return up ? 'up' : 'down';\n      }\n      return this.props.direction;\n    }\n\n    query(key) {\n      let query_value = '';\n      if (!this.props.multiple && key) {\n        const source_value = this.source().get(`${key}`);\n        query_value = source_value || key;\n      }\n      return query_value;\n    }\n\n    selectOrCreateActiveItem(event) {\n      let target = this.state.active;\n      if (!target) {\n        target = this.props.allowCreate\n         ? this.state.query\n         : [...this.suggestions().keys()][0];\n        this.setState({ active: target });\n      }\n      this.select(event, target);\n    }\n\n    normalise(value) {\n      const sdiak = 'áâäąáâäąččććççĉĉďđďđééěëēėęéěëēėęĝĝğğġġģģĥĥħħíîíîĩĩīīĭĭįįi̇ıĵĵķķĸĺĺļļŀŀłłĺľĺľňńņŋŋņňńŉóöôőøōōóöőôøřřŕŕŗŗššśśŝŝşşţţťťŧŧũũūūŭŭůůűűúüúüűųųŵŵýyŷŷýyžžźźżżß';\n      const bdiak = 'AAAAAAAACCCCCCCCDDDDEEEEEEEEEEEEEGGGGGGGGHHHHIIIIIIIIIIIIIIJJKKKLLLLLLLLLLLLNNNNNNNNNOOOOOOOOOOOORRRRRRSSSSSSSSTTTTTTUUUUUUUUUUUUUUUUUWWYYYYYYZZZZZZS';\n\n      let normalised = '';\n      for (let p = 0; p < value.length; p++) {\n        if (sdiak.indexOf(value.charAt(p)) !== -1) {\n          normalised += bdiak.charAt(sdiak.indexOf(value.charAt(p)));\n        } else {\n          normalised += value.charAt(p);\n        }\n      }\n\n      return normalised.toLowerCase().trim();\n    }\n\n    suggestions() {\n      let suggest = new Map();\n      const rawQuery = this.state.query || (this.props.multiple ? '' : this.props.value);\n      const query = this.normalise((`${rawQuery}`));\n      const values = this.values();\n      const source = this.source();\n\n     // Suggest any non-set value which matches the query\n      if (this.props.multiple) {\n        for (const [key, value] of source) {\n          if (!values.has(key) && this.matches(this.normalise(value), query)) {\n            suggest.set(key, value);\n          }\n        }\n\n     // When multiple is false, suggest any value which matches the query if showAllSuggestions is false\n      } else if (query && !this.state.showAllSuggestions) {\n        for (const [key, value] of source) {\n          if (this.matches(this.normalise(value), query)) {\n            suggest.set(key, value);\n          }\n        }\n\n     // When multiple is false, suggest all values when showAllSuggestions is true\n      } else {\n        suggest = source;\n      }\n\n      return suggest;\n    }\n\n    matches(value, query) {\n      const { suggestionMatch } = this.props;\n\n      if (suggestionMatch === 'disabled') {\n        return true;\n      } else if (suggestionMatch === 'start') {\n        return value.startsWith(query);\n      } else if (suggestionMatch === 'anywhere') {\n        return value.includes(query);\n      } else if (suggestionMatch === 'word') {\n        const re = new RegExp(`\\\\b${query}`, 'g');\n        return re.test(value);\n      }else if(suggestionMatch === 'none'){\n        return value\n      }\n\n      return false;\n    }\n\n    source() {\n      const { source: src } = this.props;\n      if (src.hasOwnProperty('length')) {\n        return new Map(src.map(item => Array.isArray(item) ? [...item] : [item, item]));\n      }\n      return new Map(Object.keys(src).map(key => [`${key}`, src[key]]));\n    }\n\n    values() {\n      let vals = this.props.multiple ? this.props.value : [this.props.value];\n\n      if (!vals) vals = [];\n\n      if (this.props.showSelectedWhenNotInSource && this.isValueAnObject()) {\n        return new Map(Object.entries(vals));\n      }\n\n      const valueMap = new Map();\n\n      const stringVals = vals.map(v => `${v}`);\n      for (const [k, v] of this.source()) {\n        if (stringVals.indexOf(k) !== -1) valueMap.set(k, v);\n      }\n\n      return valueMap;\n    }\n\n    select = (event, target) => {\n      events.pauseEvent(event);\n      const values = this.values(this.props.value);\n      const source = this.source();\n      const newValue = target === void 0 ? event.target.id : target;\n\n      if (this.isValueAnObject()) {\n        const newItem = Array.from(source).reduce((obj, [k, value]) => {\n          if (k === newValue) {\n            obj[k] = value;\n          }\n          return obj;\n        }, {});\n\n        if (Object.keys(newItem).length === 0 && newValue) {\n          newItem[newValue] = newValue;\n        }\n\n        return this.handleChange(Object.assign(this.mapToObject(values), newItem), event);\n      }\n\n      this.handleChange([newValue, ...values.keys()], event);\n    };\n\n    unselect(key, event) {\n      if (!this.props.disabled) {\n        const values = this.values(this.props.value);\n\n        values.delete(key);\n\n        if (this.isValueAnObject()) {\n          return this.handleChange(this.mapToObject(values), event);\n        }\n\n        this.handleChange([...values.keys()], event);\n      }\n    }\n\n    isValueAnObject() {\n      return !Array.isArray(this.props.value) && typeof this.props.value === 'object';\n    }\n\n    mapToObject(map) {\n      return Array.from(map).reduce((obj, [k, value]) => {\n        obj[k] = value;\n        return obj;\n      }, {});\n    }\n\n    renderSelected() {\n      if (this.props.multiple) {\n        const selectedItems = [...this.values()].map(([key, value]) => (\n          <Chip\n            key={key}\n            className={this.props.theme.value}\n            deletable\n            onDeleteClick={this.unselect.bind(this, key)}\n          >\n            {value}\n          </Chip>\n         ));\n\n        return <ul className={this.props.theme.values}>{selectedItems}</ul>;\n      }\n    }\n\n    renderSuggestions() {\n      const { theme } = this.props;\n      const suggestions = [...this.suggestions()].map(([key, value]) => {\n        const className = classnames(theme.suggestion, { [theme.active]: this.state.active === key });\n        return (\n          <li\n            id={key}\n            key={key}\n            className={className}\n            onMouseDown={this.handleMouseDown}\n            onMouseOver={this.handleSuggestionHover}\n          >\n            {value}\n          </li>\n        );\n      });\n\n      return (\n        <ul\n          className={classnames(theme.suggestions, { [theme.up]: this.state.direction === 'up' })}\n          ref={(node) => { this.suggestionsNode = node; }}\n        >\n          {suggestions}\n        </ul>\n      );\n    }\n\n    render() {\n      const {\n      allowCreate, error, label, source, suggestionMatch, query, // eslint-disable-line no-unused-vars\n      selectedPosition, keepFocusOnChange, showSuggestionsWhenValueIsSet, showSelectedWhenNotInSource, onQueryChange,   // eslint-disable-line no-unused-vars\n      theme, ...other\n    } = this.props;\n      const className = classnames(theme.autocomplete, {\n        [theme.focus]: this.state.focus,\n      }, this.props.className);\n\n      return (\n        <div data-react-toolbox=\"autocomplete\" className={className}>\n          {this.props.selectedPosition === 'above' ? this.renderSelected() : null}\n          <Input\n            {...other}\n            ref={(node) => { this.inputNode = node; }}\n            autoComplete=\"off\"\n            className={theme.input}\n            error={error}\n            label={label}\n            onBlur={this.handleQueryBlur}\n            onChange={this.handleQueryChange}\n            onFocus={this.handleQueryFocus}\n            onKeyDown={this.handleQueryKeyDown}\n            onKeyUp={this.handleQueryKeyUp}\n            theme={theme}\n            themeNamespace=\"input\"\n            value={this.state.query}\n          />\n          {this.renderSuggestions()}\n          {this.props.selectedPosition === 'below' ? this.renderSelected() : null}\n        </div>\n      );\n    }\n  }\n\n  return Autocomplete;\n};\n\nconst Autocomplete = factory(InjectChip, InjectInput);\nexport default themr(AUTOCOMPLETE, null, { withRef: true })(Autocomplete);\nexport { factory as autocompleteFactory };\nexport { Autocomplete };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/autocomplete/index.js":"import { themr } from 'react-css-themr';\nimport { AUTOCOMPLETE } from '../identifiers';\nimport { autocompleteFactory } from './Autocomplete';\nimport { Chip } from '../chip';\nimport { Input } from '../input';\nimport theme from './theme.css';\n\nconst Autocomplete = autocompleteFactory(Chip, Input);\nconst ThemedAutocomplete = themr(AUTOCOMPLETE, theme, { withRef: true })(Autocomplete);\n\nexport default ThemedAutocomplete;\nexport { ThemedAutocomplete as Autocomplete };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/avatar/Avatar.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { AVATAR } from '../identifiers';\nimport InjectFontIcon from '../font_icon/FontIcon';\n\nconst factory = (FontIcon) => {\n  const Avatar = ({ alt, children, className, cover, icon, image, theme, title, ...other }) => (\n    <div data-react-toolbox=\"avatar\" className={classnames(theme.avatar, className)} {...other}>\n      {children}\n      {cover && typeof image === 'string' && <span aria-label={alt} className={theme.image} style={{ backgroundImage: `url(${image})` }} />}\n      {!cover && (typeof image === 'string' ? <img alt={alt} className={theme.image} src={image} /> : image)}\n      {typeof icon === 'string' ? <FontIcon className={theme.letter} value={icon} alt={alt} /> : icon}\n      {title ? <span className={theme.letter}>{title[0]}</span> : null}\n    </div>\n  );\n\n  Avatar.propTypes = {\n    alt: PropTypes.string,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    cover: PropTypes.bool,\n    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    image: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    theme: PropTypes.shape({\n      avatar: PropTypes.string,\n      image: PropTypes.string,\n      letter: PropTypes.string,\n    }),\n    title: PropTypes.string,\n  };\n\n  Avatar.defaultProps = {\n    alt: '',\n    cover: false,\n  };\n\n  return Avatar;\n};\n\nconst Avatar = factory(InjectFontIcon);\nexport default themr(AVATAR)(Avatar);\nexport { factory as avatarFactory };\nexport { Avatar };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/avatar/index.js":"import { themr } from 'react-css-themr';\nimport { AVATAR } from '../identifiers';\nimport { avatarFactory } from './Avatar';\nimport { FontIcon } from '../font_icon/FontIcon';\nimport theme from './theme.css';\n\nconst Avatar = avatarFactory(FontIcon);\nconst ThemedAvatar = themr(AVATAR, theme)(Avatar);\n\nexport default ThemedAvatar;\nexport { ThemedAvatar as Avatar };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/button/BrowseButton.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { BUTTON } from '../identifiers';\nimport InjectFontIcon from '../font_icon/FontIcon';\nimport rippleFactory from '../ripple/Ripple';\n\nconst factory = (ripple, FontIcon) => {\n  class SimpleBrowseButton extends Component {\n    static propTypes = {\n      accent: PropTypes.bool,\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      flat: PropTypes.bool,\n      floating: PropTypes.bool,\n      icon: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      inverse: PropTypes.bool,\n      label: PropTypes.string,\n      mini: PropTypes.bool,\n      neutral: PropTypes.bool,\n      onChange: PropTypes.func,\n      onMouseLeave: PropTypes.func,\n      onMouseUp: PropTypes.func,\n      primary: PropTypes.bool,\n      raised: PropTypes.bool,\n      theme: PropTypes.shape({\n        accent: PropTypes.string,\n        button: PropTypes.string,\n        flat: PropTypes.string,\n        floating: PropTypes.string,\n        icon: PropTypes.string,\n        inverse: PropTypes.string,\n        mini: PropTypes.string,\n        neutral: PropTypes.string,\n        primary: PropTypes.string,\n        raised: PropTypes.string,\n        rippleWrapper: PropTypes.string,\n        toggle: PropTypes.string,\n      }),\n      type: PropTypes.string,\n    };\n\n    static defaultProps = {\n      accent: false,\n      className: '',\n      flat: false,\n      floating: false,\n      mini: false,\n      neutral: true,\n      primary: false,\n      raised: false,\n    };\n\n    getLevel = () => {\n      if (this.props.primary) return 'primary';\n      if (this.props.accent) return 'accent';\n      return 'neutral';\n    }\n\n    getShape = () => {\n      if (this.props.raised) return 'raised';\n      if (this.props.floating) return 'floating';\n      return 'flat';\n    }\n\n    handleMouseUp = (event) => {\n      this.labelNode.blur();\n      if (this.props.onMouseUp) this.props.onMouseUp(event);\n    };\n\n    handleMouseLeave = (event) => {\n      this.labelNode.blur();\n      if (this.props.onMouseLeave) this.props.onMouseLeave(event);\n    };\n\n    handleFileChange = (event) => {\n      if (this.props.onChange) this.props.onChange(event);\n    };\n\n    render() {\n      const {\n        accent,    // eslint-disable-line\n        children,\n        className,\n        flat,      // eslint-disable-line\n        floating,  // eslint-disable-line\n        icon,\n        inverse,\n        label,\n        mini,\n        neutral,\n        primary,   // eslint-disable-line\n        raised,    // eslint-disable-line\n        theme,\n        ...others\n      } = this.props;\n      const element = 'label';\n      const level = this.getLevel();\n      const shape = this.getShape();\n\n      const classes = classnames(theme.button, [theme[shape]], {\n        [theme[level]]: neutral,\n        [theme.mini]: mini,\n        [theme.inverse]: inverse,\n      }, className);\n\n      const props = {\n        ...others,\n        ref: (node) => { this.labelNode = node; },\n        className: classes,\n        disabled: this.props.disabled,\n        onMouseUp: this.handleMouseUp,\n        onMouseLeave: this.handleMouseLeave,\n        'data-react-toolbox': 'label',\n      };\n\n      return React.createElement(element, props,\n          icon ? <FontIcon className={theme.icon} value={icon} /> : null,\n        <span>{label}</span>,\n        <input className={classes} type=\"file\" onChange={this.handleFileChange} />,\n          children,\n        );\n    }\n  }\n\n  return ripple(SimpleBrowseButton);\n};\n\nconst BrowseButton = factory(rippleFactory({ centered: false }), InjectFontIcon);\nexport default themr(BUTTON)(BrowseButton);\nexport { factory as browseButtonFactory };\nexport { BrowseButton };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/button/Button.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { BUTTON } from '../identifiers';\nimport InjectFontIcon from '../font_icon/FontIcon';\nimport rippleFactory from '../ripple/Ripple';\n\nconst factory = (ripple, FontIcon) => {\n  class Button extends Component {\n    static propTypes = {\n      accent: PropTypes.bool,\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      flat: PropTypes.bool,\n      floating: PropTypes.bool,\n      href: PropTypes.string,\n      icon: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      inverse: PropTypes.bool,\n      label: PropTypes.string,\n      mini: PropTypes.bool,\n      neutral: PropTypes.bool,\n      onMouseLeave: PropTypes.func,\n      onMouseUp: PropTypes.func,\n      primary: PropTypes.bool,\n      raised: PropTypes.bool,\n      theme: PropTypes.shape({\n        accent: PropTypes.string,\n        button: PropTypes.string,\n        flat: PropTypes.string,\n        floating: PropTypes.string,\n        icon: PropTypes.string,\n        inverse: PropTypes.string,\n        mini: PropTypes.string,\n        neutral: PropTypes.string,\n        primary: PropTypes.string,\n        raised: PropTypes.string,\n        rippleWrapper: PropTypes.string,\n        toggle: PropTypes.string,\n      }),\n      type: PropTypes.string,\n    };\n\n    static defaultProps = {\n      accent: false,\n      className: '',\n      flat: false,\n      floating: false,\n      mini: false,\n      neutral: true,\n      primary: false,\n      raised: false,\n      type: 'button',\n    };\n\n    getLevel = () => {\n      if (this.props.primary) return 'primary';\n      if (this.props.accent) return 'accent';\n      return 'neutral';\n    }\n\n    getShape = () => {\n      if (this.props.raised) return 'raised';\n      if (this.props.floating) return 'floating';\n      return 'flat';\n    }\n\n    handleMouseUp = (event) => {\n      this.buttonNode.blur();\n      if (this.props.onMouseUp) this.props.onMouseUp(event);\n    };\n\n    handleMouseLeave = (event) => {\n      this.buttonNode.blur();\n      if (this.props.onMouseLeave) this.props.onMouseLeave(event);\n    };\n\n    render() {\n      const {\n        accent,    // eslint-disable-line\n        children,\n        className,\n        flat,      // eslint-disable-line\n        floating,  // eslint-disable-line\n        href,\n        icon,\n        inverse,\n        label,\n        mini,\n        neutral,\n        primary,   // eslint-disable-line\n        raised,    // eslint-disable-line\n        theme,\n        type,\n        ...others\n      } = this.props;\n      const element = href ? 'a' : 'button';\n      const level = this.getLevel();\n      const shape = this.getShape();\n\n      const classes = classnames(theme.button, [theme[shape]], {\n        [theme[level]]: neutral,\n        [theme.mini]: mini,\n        [theme.inverse]: inverse,\n      }, className);\n\n      const props = {\n        ...others,\n        href,\n        ref: (node) => { this.buttonNode = node; },\n        className: classes,\n        disabled: this.props.disabled,\n        onMouseUp: this.handleMouseUp,\n        onMouseLeave: this.handleMouseLeave,\n        type: !href ? type : null,\n        'data-react-toolbox': 'button',\n      };\n\n      return React.createElement(element, props,\n        icon ? <FontIcon className={theme.icon} value={icon} /> : null,\n        label,\n        children,\n      );\n    }\n  }\n\n  return ripple(Button);\n};\n\nconst Button = factory(rippleFactory({ centered: false }), InjectFontIcon);\nexport default themr(BUTTON)(Button);\nexport { factory as buttonFactory };\nexport { Button };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/button/IconButton.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { BUTTON } from '../identifiers';\nimport InjectFontIcon from '../font_icon/FontIcon';\nimport rippleFactory from '../ripple/Ripple';\n\nconst factory = (ripple, FontIcon) => {\n  class IconButton extends Component {\n    static propTypes = {\n      accent: PropTypes.bool,\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      href: PropTypes.string,\n      icon: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      inverse: PropTypes.bool,\n      neutral: PropTypes.bool,\n      onMouseLeave: PropTypes.func,\n      onMouseUp: PropTypes.func,\n      primary: PropTypes.bool,\n      theme: PropTypes.shape({\n        accent: PropTypes.string,\n        button: PropTypes.string,\n        flat: PropTypes.string,\n        floating: PropTypes.string,\n        icon: PropTypes.string,\n        inverse: PropTypes.string,\n        mini: PropTypes.string,\n        neutral: PropTypes.string,\n        primary: PropTypes.string,\n        raised: PropTypes.string,\n        rippleWrapper: PropTypes.string,\n        toggle: PropTypes.string,\n      }),\n      type: PropTypes.string,\n    };\n\n    static defaultProps = {\n      accent: false,\n      className: '',\n      neutral: true,\n      primary: false,\n      type: 'button',\n    };\n\n    getLevel = () => {\n      if (this.props.primary) return 'primary';\n      if (this.props.accent) return 'accent';\n      return 'neutral';\n    }\n\n    handleMouseUp = (event) => {\n      this.buttonNode.blur();\n      if (this.props.onMouseUp) this.props.onMouseUp(event);\n    };\n\n    handleMouseLeave = (event) => {\n      this.buttonNode.blur();\n      if (this.props.onMouseLeave) this.props.onMouseLeave(event);\n    };\n\n    render() {\n      const {\n        accent,    // eslint-disable-line\n        children,\n        className,\n        href,\n        icon,\n        inverse,\n        neutral,\n        primary,   // eslint-disable-line\n        theme,\n        type,\n        ...others\n      } = this.props;\n      const element = href ? 'a' : 'button';\n      const level = this.getLevel();\n      const classes = classnames([theme.toggle], {\n        [theme[level]]: neutral,\n        [theme.inverse]: inverse,\n      }, className);\n\n      const props = {\n        ...others,\n        href,\n        ref: (node) => { this.buttonNode = node; },\n        className: classes,\n        disabled: this.props.disabled,\n        onMouseUp: this.handleMouseUp,\n        onMouseLeave: this.handleMouseLeave,\n        type: !href ? type : null,\n        'data-react-toolbox': 'button',\n      };\n\n      const iconElement = typeof icon === 'string'\n        ? <FontIcon className={theme.icon} value={icon} />\n        : icon;\n\n      return React.createElement(element, props,\n        icon && iconElement,\n        children,\n      );\n    }\n  }\n\n  return ripple(IconButton);\n};\n\nconst IconButton = factory(rippleFactory({ centered: true }), InjectFontIcon);\nexport default themr(BUTTON)(IconButton);\nexport { factory as iconButtonFactory };\nexport { IconButton };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/button/index.js":"import { themr } from 'react-css-themr';\nimport { BUTTON } from '../identifiers';\nimport { buttonFactory } from './Button';\nimport { browseButtonFactory } from './BrowseButton';\nimport { iconButtonFactory } from './IconButton';\nimport { FontIcon } from '../font_icon/FontIcon';\nimport themedRippleFactory from '../ripple';\nimport theme from './theme.css';\n\nconst Button = buttonFactory(themedRippleFactory({ centered: false }), FontIcon);\nconst IconButton = iconButtonFactory(themedRippleFactory({ centered: true }), FontIcon);\nconst BrowseButton = browseButtonFactory(themedRippleFactory({ centered: false }), FontIcon);\nconst ThemedButton = themr(BUTTON, theme)(Button);\nconst ThemedIconButton = themr(BUTTON, theme)(IconButton);\nconst ThemedBrowseButton = themr(BUTTON, theme)(BrowseButton);\n\nexport default ThemedButton;\nexport { ThemedButton as Button };\nexport { ThemedIconButton as IconButton };\nexport { ThemedBrowseButton as BrowseButton };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/card/CardActions.js":"import React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport classnames from 'classnames';\nimport { CARD } from '../identifiers';\n\nconst CardActions = ({ children, className, theme, ...other }) => (\n  <div className={classnames(theme.cardActions, className)} {...other}>\n    {children}\n  </div>\n);\n\nCardActions.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  theme: PropTypes.shape({\n    cardActions: PropTypes.string,\n  }),\n};\n\nexport default themr(CARD)(CardActions);\nexport { CardActions };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/card/Card.js":"import React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport classnames from 'classnames';\nimport { CARD } from '../identifiers';\n\nconst Card = ({ children, className, raised, theme, ...other }) => {\n  const classes = classnames(theme.card, {\n    [theme.raised]: raised,\n  }, className);\n\n  return (\n    <div data-react-toolbox=\"card\" className={classes} {...other}>\n      {children}\n    </div>\n  );\n};\n\nCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  raised: PropTypes.bool,\n  theme: PropTypes.shape({\n    card: PropTypes.string,\n    raised: PropTypes.string,\n  }),\n};\n\nexport default themr(CARD)(Card);\nexport { Card };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/card/CardMedia.js":"import React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport classnames from 'classnames';\nimport { CARD } from '../identifiers';\n\nconst CardMedia = ({\n  aspectRatio,\n  children,\n  className,\n  color,\n  contentOverlay,\n  image,\n  theme,\n  ...other\n}) => {\n  const classes = classnames(theme.cardMedia, {\n    [theme[aspectRatio]]: aspectRatio,\n  }, className);\n\n  const innerClasses = classnames(theme.content, {\n    [theme.contentOverlay]: contentOverlay,\n  });\n\n  const bgStyle = {\n    backgroundColor: color || undefined,\n    backgroundImage: typeof image === 'string' ? `url('${image}')` : undefined,\n  };\n\n  return (\n    <div style={bgStyle} className={classes} {...other}>\n      <div className={innerClasses}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nCardMedia.propTypes = {\n  aspectRatio: PropTypes.oneOf(['wide', 'square']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  contentOverlay: PropTypes.bool,\n  image: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n  theme: PropTypes.shape({\n    cardMedia: PropTypes.string,\n    content: PropTypes.string,\n    contentOverlay: PropTypes.string,\n    square: PropTypes.string,\n    wide: PropTypes.string,\n  }),\n};\n\nexport default themr(CARD)(CardMedia);\nexport { CardMedia };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/card/CardText.js":"import React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport classnames from 'classnames';\nimport { CARD } from '../identifiers';\n\nconst CardText = ({ children, className, theme, ...other }) => (\n  <div className={classnames(theme.cardText, className)} {...other}>\n    {typeof children === 'string' ? <p>{children}</p> : children}\n  </div>\n);\n\nCardText.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  theme: PropTypes.shape({\n    cardText: PropTypes.string,\n  }),\n};\n\nexport default themr(CARD)(CardText);\nexport { CardText };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/card/CardTitle.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { CARD } from '../identifiers';\nimport InjectAvatar from '../avatar/Avatar';\n\nconst factory = (Avatar) => {\n  const CardTitle = ({ avatar, children, className, subtitle, theme, title, ...other }) => {\n    const classes = classnames(theme.cardTitle, {\n      [theme.small]: avatar,\n      [theme.large]: !avatar,\n    }, className);\n\n    return (\n      <div className={classes} {...other}>\n        {typeof avatar === 'string' ? <Avatar image={avatar} theme={theme} /> : avatar}\n        <div>\n          {title && <h5 className={theme.title}>{title}</h5>}\n          {children && typeof children === 'string' && (\n            <h5 className={theme.title}>{children}</h5>\n          )}\n          {subtitle && <p className={theme.subtitle}>{subtitle}</p>}\n          {children && typeof children !== 'string' && children}\n        </div>\n      </div>\n    );\n  };\n\n  CardTitle.propTypes = {\n    avatar: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n    ]),\n    children: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n      PropTypes.array,\n    ]),\n    className: PropTypes.string,\n    subtitle: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n    ]),\n    theme: PropTypes.shape({\n      large: PropTypes.string,\n      title: PropTypes.string,\n      small: PropTypes.string,\n      subtitle: PropTypes.string,\n    }),\n    title: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n    ]),\n  };\n\n  return CardTitle;\n};\n\nconst CardTitle = factory(InjectAvatar);\nexport default themr(CARD)(CardTitle);\nexport { CardTitle };\nexport { factory as cardTitleFactory };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/card/index.js":"import { themr } from 'react-css-themr';\nimport { CARD } from '../identifiers';\nimport { Card } from './Card';\nimport { CardActions } from './CardActions';\nimport { CardMedia } from './CardMedia';\nimport { CardText } from './CardText';\nimport { cardTitleFactory } from './CardTitle';\nimport { Avatar } from '../avatar';\nimport theme from './theme.css';\n\nconst CardTitle = cardTitleFactory(Avatar);\nconst ThemedCard = themr(CARD, theme)(Card);\nconst ThemedCardActions = themr(CARD, theme)(CardActions);\nconst ThemedCardMedia = themr(CARD, theme)(CardMedia);\nconst ThemedCardText = themr(CARD, theme)(CardText);\nconst ThemedCardTitle = themr(CARD, theme)(CardTitle);\n\nexport default ThemedCard;\nexport { ThemedCard as Card };\nexport { ThemedCardActions as CardActions };\nexport { ThemedCardMedia as CardMedia };\nexport { ThemedCardText as CardText };\nexport { ThemedCardTitle as CardTitle };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/checkbox/Checkbox.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport styleShape from 'react-style-proptype';\nimport { themr } from 'react-css-themr';\nimport { CHECKBOX } from '../identifiers';\nimport rippleFactory from '../ripple/Ripple';\nimport checkFactory from './Check';\n\nconst factory = (Check) => {\n  class Checkbox extends Component {\n    static propTypes = {\n      checked: PropTypes.bool,\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.node,\n      ]),\n      name: PropTypes.string,\n      onChange: PropTypes.func,\n      onMouseEnter: PropTypes.func,\n      onMouseLeave: PropTypes.func,\n      style: styleShape,\n      theme: PropTypes.shape({\n        disabled: PropTypes.string,\n        field: PropTypes.string,\n        input: PropTypes.string,\n        ripple: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      checked: false,\n      className: '',\n      disabled: false,\n    };\n\n    handleToggle = (event) => {\n      if (event.pageX !== 0 && event.pageY !== 0) this.blur();\n      if (!this.props.disabled && this.props.onChange) {\n        this.props.onChange(!this.props.checked, event);\n      }\n    };\n\n    blur() {\n      if (this.inputNode) {\n        this.inputNode.blur();\n      }\n    }\n\n    focus() {\n      if (this.inputNode) {\n        this.inputNode.focus();\n      }\n    }\n\n    render() {\n      const { checked, children, disabled, label, name, style, onChange, // eslint-disable-line\n        onMouseEnter, onMouseLeave, theme, ...others } = this.props;\n      const className = classnames(theme.field, {\n        [theme.disabled]: this.props.disabled,\n      }, this.props.className);\n\n      return (\n        <label\n          data-react-toolbox=\"checkbox\"\n          className={className}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          <input\n            {...others}\n            checked={checked}\n            className={theme.input}\n            disabled={disabled}\n            name={name}\n            onChange={() => {}}\n            onClick={this.handleToggle}\n            ref={(node) => { this.inputNode = node; }}\n            type=\"checkbox\"\n          />\n          <Check\n            checked={checked}\n            disabled={disabled}\n            rippleClassName={theme.ripple}\n            style={style}\n            theme={theme}\n          />\n          {label ? <span data-react-toolbox=\"label\" className={theme.text}>{label}</span> : null}\n          {children}\n        </label>\n      );\n    }\n  }\n\n  return Checkbox;\n};\n\nconst Check = checkFactory(rippleFactory({ centered: true, spread: 2.6 }));\nconst Checkbox = factory(Check);\nexport default themr(CHECKBOX)(Checkbox);\nexport { factory as checkboxFactory };\nexport { Checkbox };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/checkbox/Check.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport styleShape from 'react-style-proptype';\n\nconst factory = (ripple) => {\n  const Check = ({ checked, children, onMouseDown, theme, style }) => (\n    <div\n      data-react-toolbox=\"check\"\n      className={classnames(theme.check, { [theme.checked]: checked })}\n      onMouseDown={onMouseDown}\n      style={style}\n    >\n      {children}\n    </div>\n  );\n\n  Check.propTypes = {\n    checked: PropTypes.bool,\n    children: PropTypes.node,\n    onMouseDown: PropTypes.func,\n    style: styleShape,\n    theme: PropTypes.shape({\n      check: PropTypes.string,\n      checked: PropTypes.string,\n    }),\n  };\n\n  return ripple(Check);\n};\n\nexport default factory;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/checkbox/index.js":"import { themr } from 'react-css-themr';\nimport { CHECKBOX } from '../identifiers';\nimport themedRippleFactory from '../ripple';\nimport { checkboxFactory } from './Checkbox';\nimport checkFactory from './Check';\nimport theme from './theme.css';\n\nconst ThemedCheck = checkFactory(themedRippleFactory({ centered: true, spread: 2.6 }));\nconst ThemedCheckbox = themr(CHECKBOX, theme)(checkboxFactory(ThemedCheck));\n\nexport default ThemedCheckbox;\nexport { ThemedCheckbox as Checkbox };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/chip/Chip.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { CHIP } from '../identifiers';\nimport InjectAvatar from '../avatar/Avatar';\n\nconst factory = (Avatar) => {\n  const Chip = ({ children, className, deletable, onDeleteClick, theme, ...other }) => {\n    let hasAvatar = false;\n    if (React.Children.count(children)) {\n      const flatChildren = React.Children.toArray(children);\n      const firstChild = flatChildren[0];\n      hasAvatar = firstChild && firstChild.type && firstChild.type === Avatar;\n    }\n\n    const classes = classnames(theme.chip, {\n      [theme.deletable]: !!deletable,\n      [theme.avatar]: !!hasAvatar,\n    }, className);\n\n    return (\n      <div data-react-toolbox=\"chip\" className={classes} {...other}>\n        {typeof children === 'string' ? <span>{children}</span> : children}\n        {\n          deletable ? (\n            <span className={theme.delete} onClick={onDeleteClick}>\n              <svg viewBox=\"0 0 40 40\" className={theme.deleteIcon}>\n                <path className={theme.deleteX} d=\"M 12,12 L 28,28 M 28,12 L 12,28\" />\n              </svg>\n            </span>\n          ) : null\n        }\n      </div>\n    );\n  };\n\n  Chip.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    deletable: PropTypes.bool,\n    onDeleteClick: PropTypes.func,\n    theme: PropTypes.shape({\n      avatar: PropTypes.string,\n      chip: PropTypes.string,\n      deletable: PropTypes.string,\n      delete: PropTypes.string,\n      deleteIcon: PropTypes.string,\n      deleteX: PropTypes.string,\n    }),\n  };\n\n  Chip.defaultProps = {\n    className: '',\n    deletable: false,\n  };\n\n  return Chip;\n};\n\nconst Chip = factory(InjectAvatar);\nexport default themr(CHIP)(Chip);\nexport { factory as chipFactory };\nexport { Chip };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/chip/index.js":"import { themr } from 'react-css-themr';\nimport { CHIP } from '../identifiers';\nimport { chipFactory } from './Chip';\nimport { Avatar } from '../avatar';\nimport theme from './theme.css';\n\nconst Chip = chipFactory(Avatar);\nconst ThemedChip = themr(CHIP, theme)(Chip);\n\nexport default ThemedChip;\nexport { ThemedChip as Chip };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/date_picker/CalendarDay.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport time from '../utils/time';\n\nclass Day extends Component {\n  static propTypes = {\n    day: PropTypes.number,\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func,\n    selectedDate: PropTypes.instanceOf(Date),\n    sundayFirstDayOfWeek: PropTypes.bool,\n    theme: PropTypes.shape({\n      active: PropTypes.string,\n      day: PropTypes.string,\n      disabled: PropTypes.string,\n    }),\n    viewDate: PropTypes.instanceOf(Date),\n  };\n\n  dayStyle() {\n    if (this.props.day === 1) {\n      const e = (this.props.sundayFirstDayOfWeek) ? 0 : 1;\n      const firstDay = time.getFirstWeekDay(this.props.viewDate) - e;\n      return {\n        marginLeft: `${(firstDay >= 0 ? firstDay : 6) * (100 / 7)}%`,\n      };\n    }\n    return undefined;\n  }\n\n  isSelected() {\n    const sameYear = this.props.viewDate.getFullYear() === this.props.selectedDate.getFullYear();\n    const sameMonth = this.props.viewDate.getMonth() === this.props.selectedDate.getMonth();\n    const sameDay = this.props.day === this.props.selectedDate.getDate();\n    return sameYear && sameMonth && sameDay;\n  }\n\n  handleClick = () => {\n    if (!this.props.disabled && this.props.onClick) {\n      this.props.onClick(this.props.day);\n    }\n  };\n\n  render() {\n    const className = classnames(this.props.theme.day, {\n      [this.props.theme.active]: this.isSelected(),\n      [this.props.theme.disabled]: this.props.disabled,\n    });\n\n    return (\n      <div data-react-toolbox=\"day\" className={className} style={this.dayStyle()}>\n        <span onClick={this.handleClick}>\n          {this.props.day}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Day;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/date_picker/Calendar.js":"import React, { Component, PropTypes } from 'react';\nimport CssTransitionGroup from 'react-addons-css-transition-group';\nimport { range, getAnimationModule } from '../utils/utils';\nimport time from '../utils/time';\nimport CalendarMonth from './CalendarMonth';\n\nconst DIRECTION_STEPS = { left: -1, right: 1 };\n\nconst factory = (IconButton) => {\n  class Calendar extends Component {\n    static propTypes = {\n      disabledDates: React.PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n      display: PropTypes.oneOf(['months', 'years']),\n      enabledDates: React.PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n      handleSelect: PropTypes.func,\n      locale: React.PropTypes.oneOfType([\n        React.PropTypes.string,\n        React.PropTypes.object,\n      ]),\n      maxDate: PropTypes.instanceOf(Date),\n      minDate: PropTypes.instanceOf(Date),\n      onChange: PropTypes.func,\n      selectedDate: PropTypes.instanceOf(Date),\n      sundayFirstDayOfWeek: React.PropTypes.bool,\n      theme: PropTypes.shape({\n        active: PropTypes.string,\n        calendar: PropTypes.string,\n        next: PropTypes.string,\n        prev: PropTypes.string,\n        years: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      display: 'months',\n      selectedDate: new Date(),\n    };\n\n    state = {\n      viewDate: this.props.selectedDate,\n    };\n\n    componentWillMount() {\n      document.body.addEventListener('keydown', this.handleKeys);\n    }\n\n    componentDidUpdate() {\n      if (this.activeYearNode) {\n        this.scrollToActive();\n      }\n    }\n\n    componentWillUnmount() {\n      document.body.removeEventListener('keydown', this.handleKeys);\n    }\n\n    scrollToActive() {\n      const offset = (this.yearsNode.offsetHeight / 2) + (this.activeYearNode.offsetHeight / 2);\n      this.yearsNode.scrollTop = this.activeYearNode.offsetTop - offset;\n    }\n\n    handleDayClick = (day) => {\n      this.props.onChange(time.setDay(this.state.viewDate, day), true);\n    };\n\n    handleYearClick = (event) => {\n      const year = parseInt(event.currentTarget.id, 10);\n      const viewDate = time.setYear(this.props.selectedDate, year);\n      this.setState({ viewDate });\n      this.props.onChange(viewDate, false);\n    };\n\n    handleKeys = (e) => {\n      const { selectedDate } = this.props;\n\n      if (e.which === 37 || e.which === 38 || e.which === 39 || e.which === 40 || e.which === 13) {\n        e.preventDefault();\n      }\n\n      switch (e.which) {\n        case 13: this.props.handleSelect(); break; // enter\n        case 37: this.handleDayArrowKey(time.addDays(selectedDate, -1)); break; // left\n        case 38: this.handleDayArrowKey(time.addDays(selectedDate, -7)); break; // up\n        case 39: this.handleDayArrowKey(time.addDays(selectedDate, 1)); break; // right\n        case 40: this.handleDayArrowKey(time.addDays(selectedDate, 7)); break; // down\n        default: break;\n      }\n    }\n\n    handleDayArrowKey = (date) => {\n      this.setState({ viewDate: date });\n      this.props.onChange(date, false);\n    }\n\n    changeViewMonth = (event) => {\n      const direction = event.currentTarget.id;\n      this.setState({\n        direction,\n        viewDate: time.addMonths(this.state.viewDate, DIRECTION_STEPS[direction]),\n      });\n    };\n\n    renderYears() {\n      return (\n        <ul\n          data-react-toolbox=\"years\"\n          className={this.props.theme.years}\n          ref={(node) => { this.yearsNode = node; }}\n        >\n          {range(1900, 2100).map(year => (\n            <li\n              className={year === this.state.viewDate.getFullYear() ? this.props.theme.active : ''}\n              id={year}\n              key={year}\n              onClick={this.handleYearClick}\n              ref={(node) => {\n                if (year === this.state.viewDate.getFullYear()) {\n                  this.activeYearNode = node;\n                }\n              }}\n            >\n              {year}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n\n    renderMonths() {\n      const { theme } = this.props;\n      const animation = this.state.direction === 'left' ? 'slideLeft' : 'slideRight';\n      const animationModule = getAnimationModule(animation, theme);\n      return (\n        <div data-react-toolbox=\"calendar\">\n          <IconButton id=\"left\" className={theme.prev} icon=\"chevron_left\" onClick={this.changeViewMonth} />\n          <IconButton id=\"right\" className={theme.next} icon=\"chevron_right\" onClick={this.changeViewMonth} />\n          <CssTransitionGroup\n            transitionName={animationModule}\n            transitionEnterTimeout={350}\n            transitionLeaveTimeout={350}\n          >\n            <CalendarMonth\n              enabledDates={this.props.enabledDates}\n              disabledDates={this.props.disabledDates}\n              key={this.state.viewDate.getMonth()}\n              locale={this.props.locale}\n              maxDate={this.props.maxDate}\n              minDate={this.props.minDate}\n              onDayClick={this.handleDayClick}\n              selectedDate={this.props.selectedDate}\n              sundayFirstDayOfWeek={this.props.sundayFirstDayOfWeek}\n              theme={this.props.theme}\n              viewDate={this.state.viewDate}\n            />\n          </CssTransitionGroup>\n        </div>\n      );\n    }\n\n    render() {\n      return (\n        <div className={this.props.theme.calendar}>\n          {this.props.display === 'months' ? this.renderMonths() : this.renderYears()}\n        </div>\n      );\n    }\n  }\n\n  return Calendar;\n};\n\nexport default factory;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/date_picker/CalendarMonth.js":"import React, { Component, PropTypes } from 'react';\nimport { range } from '../utils/utils';\nimport time from '../utils/time';\nimport CalendarDay from './CalendarDay';\n\nclass Month extends Component {\n  static propTypes = {\n    disabledDates: React.PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n    enabledDates: React.PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n    locale: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.object,\n    ]),\n    maxDate: PropTypes.instanceOf(Date),\n    minDate: PropTypes.instanceOf(Date),\n    onDayClick: PropTypes.func,\n    selectedDate: PropTypes.instanceOf(Date),\n    sundayFirstDayOfWeek: React.PropTypes.bool,\n    theme: PropTypes.shape({\n      days: PropTypes.string,\n      month: PropTypes.string,\n      title: PropTypes.string,\n      week: PropTypes.string,\n    }),\n    viewDate: PropTypes.instanceOf(Date),\n  };\n\n  static defaultProps = {\n    disabledDates: [],\n    enabledDates: [],\n  };\n\n  handleDayClick = (day) => {\n    if (this.props.onDayClick) this.props.onDayClick(day);\n  };\n\n  isDayDisabled(date) {\n    const { minDate, maxDate, enabledDates, disabledDates } = this.props;\n    const compareDate = compDate => date.getTime() === compDate.getTime();\n    const dateInDisabled = disabledDates.filter(compareDate).length > 0;\n    const dateInEnabled = enabledDates.filter(compareDate).length > 0;\n    return time.dateOutOfRange(date, minDate, maxDate)\n      || (enabledDates.length > 0 && !dateInEnabled)\n      || dateInDisabled;\n  }\n\n  renderWeeks() {\n    const days = range(0, 7).map(d => time.getDayOfWeekLetter(d, this.props.locale));\n    const source = (this.props.sundayFirstDayOfWeek) ? days : [...days.slice(1), days[0]];\n    return source.map((day, i) => (<span key={i}>{day}</span>)); // eslint-disable-line\n  }\n\n  renderDays() {\n    return range(1, time.getDaysInMonth(this.props.viewDate) + 1).map((i) => {\n      const date = new Date(this.props.viewDate.getFullYear(), this.props.viewDate.getMonth(), i);\n      return (\n        <CalendarDay\n          key={i}\n          day={i}\n          disabled={this.isDayDisabled(date)}\n          onClick={this.handleDayClick}\n          selectedDate={this.props.selectedDate}\n          theme={this.props.theme}\n          viewDate={this.props.viewDate}\n          sundayFirstDayOfWeek={this.props.sundayFirstDayOfWeek}\n        />\n      );\n    });\n  }\n\n  render() {\n    const fullMonth = time.getFullMonth(this.props.viewDate, this.props.locale);\n    const fullYear = this.props.viewDate.getFullYear();\n    return (\n      <div data-react-toolbox=\"month\" className={this.props.theme.month}>\n        <span className={this.props.theme.title}>\n          {fullMonth} {fullYear}\n        </span>\n        <div className={this.props.theme.week}>{this.renderWeeks()}</div>\n        <div className={this.props.theme.days}>{this.renderDays()}</div>\n      </div>\n    );\n  }\n}\n\nexport default Month;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/date_picker/DatePickerDialog.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport time from '../utils/time';\n\nconst factory = (Dialog, Calendar) => {\n  class CalendarDialog extends Component {\n    static propTypes = {\n      active: PropTypes.bool,\n      autoOk: PropTypes.bool,\n      cancelLabel: PropTypes.string,\n      className: PropTypes.string,\n      disabledDates: React.PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n      enabledDates: React.PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n      locale: React.PropTypes.oneOfType([\n        React.PropTypes.string,\n        React.PropTypes.object,\n      ]),\n      maxDate: PropTypes.instanceOf(Date),\n      minDate: PropTypes.instanceOf(Date),\n      name: PropTypes.string,\n      okLabel: PropTypes.string,\n      onDismiss: PropTypes.func,\n      onEscKeyDown: PropTypes.func,\n      onOverlayClick: PropTypes.func,\n      onSelect: PropTypes.func,\n      sundayFirstDayOfWeek: React.PropTypes.bool,\n      theme: PropTypes.shape({\n        button: PropTypes.string,\n        calendarWrapper: PropTypes.string,\n        date: PropTypes.string,\n        dialog: PropTypes.string,\n        header: PropTypes.string,\n        monthsDisplay: PropTypes.string,\n        year: PropTypes.string,\n        yearsDisplay: PropTypes.string,\n      }),\n      value: PropTypes.instanceOf(Date),\n    };\n\n    static defaultProps = {\n      active: false,\n      cancelLabel: 'Cancel',\n      className: '',\n      okLabel: 'Ok',\n      value: new Date(),\n    };\n\n    state = {\n      display: 'months',\n      date: this.props.value,\n    };\n\n    componentWillMount() {\n      this.updateStateDate(this.props.value);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this.updateStateDate(nextProps.value);\n    }\n\n    handleNewDate = (value, dayClick) => {\n      const state = { display: 'months', date: value };\n      if (time.dateOutOfRange(value, this.props.minDate, this.props.maxDate)) {\n        if (this.props.maxDate && this.props.minDate) {\n          state.date = time.closestDate(value, this.props.maxDate, this.props.minDate);\n        } else {\n          state.date = this.props.maxDate || this.props.minDate;\n        }\n      }\n      this.setState(state);\n      if (dayClick && this.props.autoOk && this.props.onSelect) {\n        this.props.onSelect(value);\n      }\n    };\n\n    handleSelect = (event) => {\n      if (this.props.onSelect) this.props.onSelect(this.state.date, event);\n    };\n\n    handleSwitchDisplay = (event) => {\n      this.setState({ display: event.target.id });\n    };\n\n    updateStateDate = (date) => {\n      if (Object.prototype.toString.call(date) === '[object Date]') {\n        this.handleNewDate(date, false);\n      }\n    };\n\n    actions = [{\n      label: this.props.cancelLabel,\n      className: this.props.theme.button,\n      onClick: this.props.onDismiss,\n    }, {\n      label: this.props.okLabel,\n      className: this.props.theme.button,\n      name: this.props.name,\n      onClick: this.handleSelect,\n    }];\n\n    render() {\n      const { theme } = this.props;\n      const display = `${this.state.display}Display`;\n      const className = classnames(theme.dialog, this.props.className);\n      const headerClassName = classnames(theme.header, theme[display]);\n      const shortDayOfWeek = time.getShortDayOfWeek(this.state.date.getDay(), this.props.locale);\n      const shortMonth = time.getShortMonth(this.state.date, this.props.locale);\n      const date = this.state.date.getDate();\n\n      return (\n        <Dialog\n          actions={this.actions}\n          active={this.props.active}\n          className={className}\n          onEscKeyDown={this.props.onEscKeyDown}\n          onOverlayClick={this.props.onOverlayClick}\n          type=\"custom\"\n        >\n          <header className={headerClassName}>\n            <span id=\"years\" className={theme.year} onClick={this.handleSwitchDisplay}>\n              {this.state.date.getFullYear()}\n            </span>\n            <h3 id=\"months\" className={theme.date} onClick={this.handleSwitchDisplay}>\n              {shortDayOfWeek}, {shortMonth} {date}\n            </h3>\n          </header>\n\n          <div className={theme.calendarWrapper}>\n            <Calendar\n              disabledDates={this.props.disabledDates}\n              display={this.state.display}\n              enabledDates={this.props.enabledDates}\n              handleSelect={this.handleSelect}\n              maxDate={this.props.maxDate}\n              minDate={this.props.minDate}\n              onChange={this.handleNewDate}\n              selectedDate={this.state.date}\n              theme={this.props.theme}\n              locale={this.props.locale}\n              sundayFirstDayOfWeek={this.props.sundayFirstDayOfWeek}\n            />\n          </div>\n        </Dialog>\n      );\n    }\n  }\n\n  return CalendarDialog;\n};\n\nexport default factory;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/date_picker/DatePicker.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { DATE_PICKER } from '../identifiers';\nimport events from '../utils/events';\nimport time from '../utils/time';\n\nimport InjectIconButton from '../button/IconButton';\nimport InjectInput from '../input/Input';\nimport InjectDialog from '../dialog/Dialog';\nimport calendarFactory from './Calendar';\nimport datePickerDialogFactory from './DatePickerDialog';\n\nconst factory = (Input, DatePickerDialog) => {\n  class DatePicker extends Component {\n    static propTypes = {\n      active: PropTypes.bool,\n      autoOk: PropTypes.bool,\n      cancelLabel: PropTypes.string,\n      className: PropTypes.string,\n      disabledDates: React.PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n      enabledDates: React.PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n      error: PropTypes.string,\n      icon: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      inputClassName: PropTypes.string,\n      inputFormat: PropTypes.func,\n      label: PropTypes.string,\n      locale: React.PropTypes.oneOfType([\n        React.PropTypes.string,\n        React.PropTypes.object,\n      ]),\n      maxDate: PropTypes.instanceOf(Date),\n      minDate: PropTypes.instanceOf(Date),\n      name: PropTypes.string,\n      okLabel: PropTypes.string,\n      onChange: PropTypes.func,\n      onClick: PropTypes.func,\n      onDismiss: PropTypes.func,\n      onEscKeyDown: PropTypes.func,\n      onKeyPress: PropTypes.func,\n      onOverlayClick: PropTypes.func,\n      readonly: PropTypes.bool,\n      sundayFirstDayOfWeek: React.PropTypes.bool,\n      theme: PropTypes.shape({\n        container: PropTypes.string,\n        input: PropTypes.string,\n      }),\n      value: PropTypes.oneOfType([\n        PropTypes.instanceOf(Date),\n        PropTypes.string,\n      ]),\n    };\n\n    static defaultProps = {\n      active: false,\n      locale: 'en',\n      sundayFirstDayOfWeek: false,\n    };\n\n    state = {\n      active: this.props.active,\n    };\n\n    componentWillReceiveProps(nextProps) {\n      if (nextProps.active !== this.props.active && this.state.active !== nextProps.active) {\n        this.setState({ active: nextProps.active });\n      }\n    }\n\n    handleDismiss = () => {\n      this.setState({ active: false });\n      if (this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n    };\n\n    handleInputFocus = (event) => {\n      events.pauseEvent(event);\n      this.setState({ active: true });\n    };\n\n    handleInputBlur = (event) => {\n      events.pauseEvent(event);\n      this.setState({ active: false });\n    };\n\n    handleInputClick = (event) => {\n      events.pauseEvent(event);\n      this.setState({ active: true });\n      if (this.props.onClick) this.props.onClick(event);\n    };\n\n    handleInputKeyPress = (event) => {\n      if (event.charCode === 13) {\n        events.pauseEvent(event);\n        this.setState({ active: true });\n      }\n      if (this.props.onKeyPress) this.props.onKeyPress(event);\n    };\n\n    handleSelect = (value, event) => {\n      if (this.props.onChange) this.props.onChange(value, event);\n      this.setState({ active: false });\n    };\n\n    render() {\n      const { active, onDismiss,// eslint-disable-line\n        autoOk, cancelLabel, enabledDates, disabledDates, inputClassName, inputFormat,\n        locale, maxDate, minDate, okLabel, onEscKeyDown, onOverlayClick, readonly,\n        sundayFirstDayOfWeek, value, ...others } = this.props;\n      const finalInputFormat = inputFormat || time.formatDate;\n      const date = Object.prototype.toString.call(value) === '[object Date]' ? value : undefined;\n      const formattedDate = date === undefined ? '' : finalInputFormat(value, locale);\n\n      return (\n        <div data-react-toolbox=\"date-picker\" className={this.props.theme.container}>\n          <Input\n            {...others}\n            className={classnames(this.props.theme.input, { [inputClassName]: inputClassName })}\n            disabled={readonly}\n            error={this.props.error}\n            icon={this.props.icon}\n            label={this.props.label}\n            name={this.props.name}\n            onFocus={this.handleInputFocus}\n            onKeyPress={this.handleInputKeyPress}\n            onClick={this.handleInputClick}\n            readOnly\n            type=\"text\"\n            value={formattedDate}\n          />\n          <DatePickerDialog\n            active={this.state.active}\n            autoOk={autoOk}\n            cancelLabel={cancelLabel}\n            className={this.props.className}\n            disabledDates={disabledDates}\n            enabledDates={enabledDates}\n            locale={locale}\n            maxDate={maxDate}\n            minDate={minDate}\n            name={this.props.name}\n            onDismiss={this.handleDismiss}\n            okLabel={okLabel}\n            onEscKeyDown={onEscKeyDown || this.handleDismiss}\n            onOverlayClick={onOverlayClick || this.handleDismiss}\n            onSelect={this.handleSelect}\n            sundayFirstDayOfWeek={sundayFirstDayOfWeek}\n            theme={this.props.theme}\n            value={date}\n          />\n        </div>\n      );\n    }\n  }\n\n  return DatePicker;\n};\n\nconst Calendar = calendarFactory(InjectIconButton);\nconst DatePickerDialog = datePickerDialogFactory(InjectDialog, Calendar);\nconst DatePicker = factory(InjectInput, DatePickerDialog);\n\nexport default themr(DATE_PICKER)(DatePicker);\nexport {\n  DatePickerDialog,\n  factory as datePickerFactory,\n};\nexport { Calendar };\nexport { DatePicker };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/date_picker/index.js":"import { themr } from 'react-css-themr';\nimport { DATE_PICKER, DIALOG } from '../identifiers';\nimport { datePickerFactory } from './DatePicker';\nimport datePickerDialogFactory from './DatePickerDialog';\nimport calendarFactory from './Calendar';\n\nimport { IconButton } from '../button';\nimport { Input } from '../input';\nimport { Dialog } from '../dialog';\nimport theme from './theme.css';\n\nconst Calendar = calendarFactory(IconButton);\nconst DatePickerDialog = datePickerDialogFactory(Dialog, Calendar);\nconst DatePicker = datePickerFactory(Input, DatePickerDialog);\n\nconst ThemedDatePicker = themr(DATE_PICKER, theme)(DatePicker);\nexport default ThemedDatePicker;\nexport { ThemedDatePicker as DatePicker };\n\nconst ThemedDatePickerDialog = themr(DIALOG, theme)(DatePickerDialog);\nexport { ThemedDatePickerDialog as DatePickerDialog };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/dialog/Dialog.js":"/* eslint-disable jsx-a11y/aria-role */\nimport React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport classnames from 'classnames';\nimport { DIALOG } from '../identifiers';\nimport Portal from '../hoc/Portal';\nimport ActivableRenderer from '../hoc/ActivableRenderer';\nimport InjectButton from '../button/Button';\nimport InjectOverlay from '../overlay/Overlay';\n\nconst factory = (Overlay, Button) => {\n  const Dialog = (props) => {\n    const actions = props.actions.map((action, idx) => {\n      const className = classnames(props.theme.button, { [action.className]: action.className });\n      return <Button key={idx} {...action} className={className} />; // eslint-disable-line\n    });\n\n    const className = classnames([props.theme.dialog, props.theme[props.type]], {\n      [props.theme.active]: props.active,\n    }, props.className);\n\n    return (\n      <Portal className={props.theme.wrapper}>\n        <Overlay\n          active={props.active}\n          className={props.theme.overlay}\n          onClick={props.onOverlayClick}\n          onEscKeyDown={props.onEscKeyDown}\n          onMouseDown={props.onOverlayMouseDown}\n          onMouseMove={props.onOverlayMouseMove}\n          onMouseUp={props.onOverlayMouseUp}\n          theme={props.theme}\n          themeNamespace=\"overlay\"\n        />\n        <div data-react-toolbox=\"dialog\" className={className}>\n          <section role=\"body\" className={props.theme.body}>\n            {props.title ? <h6 className={props.theme.title}>{props.title}</h6> : null}\n            {props.children}\n          </section>\n          {actions.length\n            ? <nav role=\"navigation\" className={props.theme.navigation}>\n              {actions}\n            </nav>\n            : null\n          }\n        </div>\n      </Portal>\n    );\n  };\n\n  Dialog.propTypes = {\n    actions: PropTypes.arrayOf(PropTypes.shape({\n      className: PropTypes.string,\n      label: PropTypes.string,\n      children: PropTypes.node,\n    })),\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    onEscKeyDown: PropTypes.func,\n    onOverlayClick: PropTypes.func,\n    onOverlayMouseDown: PropTypes.func,\n    onOverlayMouseMove: PropTypes.func,\n    onOverlayMouseUp: PropTypes.func,\n    theme: PropTypes.shape({\n      active: PropTypes.string,\n      body: PropTypes.string,\n      button: PropTypes.string,\n      dialog: PropTypes.string,\n      navigation: PropTypes.string,\n      overflow: PropTypes.string,\n      overlay: PropTypes.string,\n      title: PropTypes.string,\n      wrapper: PropTypes.string,\n    }),\n    title: PropTypes.string,\n    type: PropTypes.string,\n  };\n\n  Dialog.defaultProps = {\n    actions: [],\n    active: false,\n    type: 'normal',\n  };\n\n  return ActivableRenderer()(Dialog);\n};\n\nconst Dialog = factory(InjectOverlay, InjectButton);\nexport default themr(DIALOG)(Dialog);\nexport { Dialog };\nexport { factory as dialogFactory };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/dialog/index.js":"import { themr } from 'react-css-themr';\nimport { DIALOG } from '../identifiers';\nimport { dialogFactory } from './Dialog';\nimport { Overlay } from '../overlay';\nimport { Button } from '../button';\nimport theme from './theme.css';\n\nconst Dialog = dialogFactory(Overlay, Button);\nconst ThemedDialog = themr(DIALOG, theme)(Dialog);\n\nexport default ThemedDialog;\nexport { ThemedDialog as Dialog };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/drawer/Drawer.js":"import React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport classnames from 'classnames';\nimport Portal from '../hoc/Portal';\nimport { DRAWER } from '../identifiers';\nimport ActivableRenderer from '../hoc/ActivableRenderer';\nimport InjectOverlay from '../overlay/Overlay';\n\nconst factory = (Overlay) => {\n  const Drawer = ({\n    active,\n    children,\n    className,\n    insideTree,\n    onOverlayClick,\n    onEscKeyDown,\n    theme,\n    type,\n    withOverlay,\n  }) => {\n    const _className = classnames([theme.drawer, theme[type]], {\n      [theme.active]: active,\n    }, className);\n\n    const content = (\n      <aside data-react-toolbox=\"drawer\" className={_className}>\n        {children}\n      </aside>\n    );\n\n    return React.createElement(\n      insideTree ? 'div' : Portal,\n      { className: theme.wrapper },\n      withOverlay && (\n        <Overlay\n          active={active}\n          onClick={onOverlayClick}\n          onEscKeyDown={onEscKeyDown}\n          theme={theme}\n          themeNamespace=\"overlay\"\n        />\n      ),\n      content,\n    );\n  };\n\n  Drawer.propTypes = {\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    insideTree: PropTypes.bool,\n    onEscKeyDown: PropTypes.func,\n    onOverlayClick: PropTypes.func,\n    theme: PropTypes.shape({\n      active: PropTypes.string,\n      drawer: PropTypes.string,\n      left: PropTypes.string,\n      right: PropTypes.string,\n    }),\n    type: PropTypes.oneOf([\n      'left', 'right',\n    ]),\n    withOverlay: PropTypes.bool,\n  };\n\n  Drawer.defaultProps = {\n    active: false,\n    className: '',\n    insideTree: false,\n    type: 'left',\n    withOverlay: true,\n  };\n\n  return ActivableRenderer()(Drawer);\n};\n\nconst Drawer = factory(InjectOverlay);\nexport default themr(DRAWER)(Drawer);\nexport { factory as drawerFactory };\nexport { Drawer };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/drawer/index.js":"import { themr } from 'react-css-themr';\nimport { DRAWER } from '../identifiers';\nimport { Overlay } from '../overlay';\nimport { drawerFactory } from './Drawer';\nimport theme from './theme.css';\n\nconst Drawer = drawerFactory(Overlay);\nconst ThemedDrawer = themr(DRAWER, theme)(Drawer);\n\nexport default ThemedDrawer;\nexport { ThemedDrawer as Drawer };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/dropdown/Dropdown.js":"/* eslint-disable */\nimport React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { DROPDOWN } from '../identifiers';\nimport InjectInput from '../input/Input';\nimport events from '../utils/events';\n\nconst factory = (Input) => {\n  class Dropdown extends Component {\n    static propTypes = {\n      allowBlank: PropTypes.bool,\n      auto: PropTypes.bool,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      error: PropTypes.string,\n      label: PropTypes.string,\n      labelKey: PropTypes.string,\n      name: PropTypes.string,\n      onBlur: PropTypes.func,\n      onChange: PropTypes.func,\n      onClick: PropTypes.func,\n      onFocus: PropTypes.func,\n      required: PropTypes.bool,\n      source: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object,\n      ])).isRequired,\n      template: PropTypes.func,\n      theme: PropTypes.shape({\n        active: PropTypes.string,\n        disabled: PropTypes.string,\n        dropdown: PropTypes.string,\n        error: PropTypes.string,\n        errored: PropTypes.string,\n        field: PropTypes.string,\n        label: PropTypes.string,\n        required: PropTypes.string,\n        selected: PropTypes.string,\n        templateValue: PropTypes.string,\n        up: PropTypes.string,\n        value: PropTypes.string,\n        values: PropTypes.string,\n      }),\n      value: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]),\n      valueKey: PropTypes.string,\n    };\n\n    static defaultProps = {\n      auto: true,\n      className: '',\n      allowBlank: true,\n      disabled: false,\n      labelKey: 'label',\n      required: false,\n      valueKey: 'value',\n    };\n\n    state = {\n      active: false,\n      up: false,\n    };\n\n    componentWillUpdate(nextProps, nextState) {\n      if (!this.state.active && nextState.active) {\n        events.addEventsToDocument(this.getDocumentEvents());\n      }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      if (prevState.active && !this.state.active) {\n        events.removeEventsFromDocument(this.getDocumentEvents());\n      }\n    }\n\n    componentWillUnmount() {\n      if (this.state.active) {\n        events.removeEventsFromDocument(this.getDocumentEvents());\n      }\n    }\n\n    getDocumentEvents = () => ({\n      click: this.handleDocumentClick,\n      touchend: this.handleDocumentClick,\n    });\n\n    getSelectedItem = () => {\n      for (const item of this.props.source) {\n        if (item[this.props.valueKey] === this.props.value) return item;\n      }\n      return !this.props.allowBlank\n        ? this.props.source[0]\n        : undefined;\n    };\n\n    handleSelect = (item, event) => {\n      if (this.props.onBlur) this.props.onBlur(event);\n      if (!this.props.disabled && this.props.onChange) {\n        if (this.props.name) event.target.name = this.props.name;\n        this.props.onChange(item, event);\n        this.close();\n      }\n    };\n\n    handleClick = (event) => {\n      this.open(event);\n      events.pauseEvent(event);\n      if (this.props.onClick) this.props.onClick(event);\n    };\n\n    handleDocumentClick = (event) => {\n      if (this.state.active && !events.targetIsDescendant(event, ReactDOM.findDOMNode(this))) {\n        this.setState({ active: false });\n      }\n    };\n\n    close = () => {\n      if (this.state.active) {\n        this.setState({ active: false });\n      }\n    }\n\n    open = (event) => {\n      if (this.state.active) return;\n      const client = event.target.getBoundingClientRect();\n      const screenHeight = window.innerHeight || document.documentElement.offsetHeight;\n      const up = this.props.auto ? client.top > ((screenHeight / 2) + client.height) : false;\n      if (this.inputNode) this.inputNode.blur();\n      this.setState({ active: true, up });\n    };\n\n    handleFocus = (event) => {\n      event.stopPropagation();\n      if (!this.props.disabled) this.open(event);\n      if (this.props.onFocus) this.props.onFocus(event);\n    };\n\n    handleBlur = (event) => {\n      event.stopPropagation();\n      if (this.state.active) this.close();\n      if (this.props.onBlur) this.props.onBlur(event);\n    }\n\n    renderTemplateValue(selected) {\n      const { theme } = this.props;\n      const className = classnames(theme.field, {\n        [theme.errored]: this.props.error,\n        [theme.disabled]: this.props.disabled,\n        [theme.required]: this.props.required,\n      });\n\n      return (\n        <div className={className} onClick={this.handleClick}>\n          <div className={`${theme.templateValue} ${theme.value}`}>\n            {this.props.template(selected)}\n          </div>\n          {this.props.label\n            ? (\n              <label className={theme.label}>\n                {this.props.label}\n                {this.props.required ? <span className={theme.required}> * </span> : null}\n              </label>\n            ) : null}\n          {this.props.error ? <span className={theme.error}>{this.props.error}</span> : null}\n        </div>\n      );\n    }\n\n    renderValue = (item, idx) => {\n      const { labelKey, theme, valueKey } = this.props;\n      const className = classnames({\n        [theme.selected]: item[valueKey] === this.props.value,\n        [theme.disabled]: item.disabled,\n      });\n      return (\n        <li\n          key={idx}\n          className={className}\n          onClick={!item.disabled && this.handleSelect.bind(this, item[valueKey])}\n        >\n          {this.props.template ? this.props.template(item) : item[labelKey]}\n        </li>\n      );\n    };\n\n    render() {\n      const {\n        allowBlank, auto, labelKey, required, onChange, onFocus, onBlur, // eslint-disable-line no-unused-vars\n        source, template, theme, valueKey, ...others\n      } = this.props;\n      const selected = this.getSelectedItem();\n      const className = classnames(theme.dropdown, {\n        [theme.up]: this.state.up,\n        [theme.active]: this.state.active,\n        [theme.disabled]: this.props.disabled,\n        [theme.required]: this.props.required,\n      }, this.props.className);\n\n      return (\n        <div\n          className={className}\n          data-react-toolbox=\"dropdown\"\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n        >\n          <Input\n            {...others}\n            tabIndex=\"0\"\n            className={theme.value}\n            onClick={this.handleClick}\n            required={this.props.required}\n            readOnly\n            ref={(node) => { this.inputNode = node && node.getWrappedInstance(); }}\n            type={template && selected ? 'hidden' : null}\n            theme={theme}\n            themeNamespace=\"input\"\n            value={selected && selected[labelKey] ? selected[labelKey] : ''}\n          />\n          {template && selected ? this.renderTemplateValue(selected) : null}\n          <ul className={theme.values}>\n            {source.map(this.renderValue)}\n          </ul>\n        </div>\n      );\n    }\n  }\n\n  return Dropdown;\n};\n\nconst Dropdown = factory(InjectInput);\nexport default themr(DROPDOWN)(Dropdown);\nexport { factory as dropdownFactory };\nexport { Dropdown };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/dropdown/index.js":"import { themr } from 'react-css-themr';\nimport { DROPDOWN } from '../identifiers';\nimport { dropdownFactory } from './Dropdown';\nimport { Input } from '../input';\nimport theme from './theme.css';\n\nconst Dropdown = dropdownFactory(Input);\nconst ThemedDropdown = themr(DROPDOWN, theme)(Dropdown);\n\nexport default ThemedDropdown;\nexport { ThemedDropdown as Dropdown };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/font_icon/FontIcon.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\n\nconst FontIcon = ({ alt, children, className, theme, value, ...other}) => ( // eslint-disable-line\n  <span\n    data-react-toolbox=\"font-icon\"\n    aria-label={alt}\n    className={classnames({ 'material-icons': typeof value === 'string' || typeof children === 'string' }, className)}\n    {...other}\n  >\n    {value}\n    {children}\n  </span>\n);\n\nFontIcon.propTypes = {\n  alt: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  theme: PropTypes.object, // eslint-disable-line\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n};\n\nFontIcon.defaultProps = {\n  alt: '',\n  className: '',\n};\n\nexport default FontIcon;\nexport { FontIcon };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/font_icon/index.js":"import { FontIcon } from './FontIcon';\n\nexport default FontIcon;\nexport { FontIcon };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/hoc/ActivableRenderer.js":"import React, { Component, PropTypes } from 'react';\n\nconst ActivableRendererFactory = (options = { delay: 500 }) =>\n  ActivableComponent => class ActivableRenderer extends Component {\n    static propTypes = {\n      active: PropTypes.bool.isRequired,\n      children: PropTypes.node,\n      delay: PropTypes.number,\n    };\n\n    static defaultProps = {\n      delay: options.delay,\n    }\n\n    state = {\n      active: this.props.active,\n      rendered: this.props.active,\n    };\n\n    componentWillReceiveProps(nextProps) {\n      if (nextProps.active && !this.props.active) this.renderAndActivate();\n      if (!nextProps.active && this.props.active) this.deactivateAndUnrender();\n    }\n\n    componentWillUnmount() {\n      clearTimeout(this.activateTimeout);\n      clearTimeout(this.unrenderTimeout);\n    }\n\n    renderAndActivate() {\n      if (this.unrenderTimeout) clearTimeout(this.unrenderTimeout);\n      this.setState({ rendered: true, active: false }, () => {\n        this.activateTimeout = setTimeout(() => this.setState({ active: true }), 20);\n      });\n    }\n\n    deactivateAndUnrender() {\n      this.setState({ rendered: true, active: false }, () => {\n        this.unrenderTimeout = setTimeout(() => {\n          this.setState({ rendered: false });\n          this.unrenderTimeout = null;\n        }, this.props.delay);\n      });\n    }\n\n    render() {\n      const { delay, ...others } = this.props; // eslint-disable-line no-unused-vars\n      const { active, rendered } = this.state;\n      return rendered\n        ? <ActivableComponent {...others} active={active} />\n        : null;\n    }\n  };\n\nexport default ActivableRendererFactory;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/hoc/Portal.js":"import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Portal extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    container: PropTypes.node,\n  }\n\n  static defaultProps = {\n    className: '',\n  }\n\n  componentDidMount() {\n    this._renderOverlay();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this._overlayTarget && nextProps.container !== this.props.container) {\n      this._portalContainerNode.removeChild(this._overlayTarget);\n      this._portalContainerNode = getContainer(nextProps.container);\n      this._portalContainerNode.appendChild(this._overlayTarget);\n    }\n  }\n\n  componentDidUpdate() {\n    this._renderOverlay();\n  }\n\n  componentWillUnmount() {\n    this._unrenderOverlay();\n    this._unmountOverlayTarget();\n  }\n\n  getMountNode() {\n    return this._overlayTarget;\n  }\n\n  getOverlayDOMNode() {\n    if (!this.isMounted()) { // eslint-disable-line\n      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');\n    }\n\n    if (this._overlayInstance) {\n      if (this._overlayInstance.getWrappedDOMNode) {\n        return this._overlayInstance.getWrappedDOMNode();\n      }\n      return ReactDOM.findDOMNode(this._overlayInstance);\n    }\n\n    return null;\n  }\n\n  _getOverlay() {\n    if (!this.props.children) return null;\n    return <div className={this.props.className}>{this.props.children}</div>;\n  }\n\n  _renderOverlay() {\n    const overlay = this._getOverlay();\n    if (overlay !== null) {\n      this._mountOverlayTarget();\n      this._overlayInstance = ReactDOM.unstable_renderSubtreeIntoContainer(\n        this, overlay, this._overlayTarget,\n      );\n    } else {\n      this._unrenderOverlay();\n      this._unmountOverlayTarget();\n    }\n  }\n\n  _unrenderOverlay() {\n    if (this._overlayTarget) {\n      ReactDOM.unmountComponentAtNode(this._overlayTarget);\n      this._overlayInstance = null;\n    }\n  }\n\n  _mountOverlayTarget() {\n    if (!this._overlayTarget) {\n      this._overlayTarget = document.createElement('div');\n      this._portalContainerNode = getContainer(this.props.container);\n      this._portalContainerNode.appendChild(this._overlayTarget);\n    }\n  }\n\n  _unmountOverlayTarget() {\n    if (this._overlayTarget) {\n      this._portalContainerNode.removeChild(this._overlayTarget);\n      this._overlayTarget = null;\n    }\n    this._portalContainerNode = null;\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nfunction getContainer(container) {\n  const _container = typeof container === 'function' ? container() : container;\n  return ReactDOM.findDOMNode(_container) || document.body;\n}\n\nexport default Portal;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/input/index.js":"import { themr } from 'react-css-themr';\nimport { INPUT } from '../identifiers';\nimport { inputFactory } from './Input';\nimport { FontIcon } from '../font_icon/FontIcon';\nimport theme from './theme.css';\n\nconst Input = inputFactory(FontIcon);\nconst ThemedInput = themr(INPUT, theme, { withRef: true })(Input);\n\nexport default ThemedInput;\nexport { ThemedInput as Input };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/input/Input.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { INPUT } from '../identifiers';\nimport InjectedFontIcon from '../font_icon/FontIcon';\n\nconst factory = (FontIcon) => {\n  class Input extends React.Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      defaultValue: PropTypes.string,\n      disabled: PropTypes.bool,\n      error: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.node,\n      ]),\n      floating: PropTypes.bool,\n      hint: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.node,\n      ]),\n      icon: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.node,\n      ]),\n      maxLength: PropTypes.number,\n      multiline: PropTypes.bool,\n      name: PropTypes.string,\n      onBlur: PropTypes.func,\n      onChange: PropTypes.func,\n      onFocus: PropTypes.func,\n      onKeyPress: PropTypes.func,\n      required: PropTypes.bool,\n      rows: PropTypes.number,\n      theme: PropTypes.shape({\n        bar: PropTypes.string,\n        counter: PropTypes.string,\n        disabled: PropTypes.string,\n        error: PropTypes.string,\n        errored: PropTypes.string,\n        hidden: PropTypes.string,\n        hint: PropTypes.string,\n        icon: PropTypes.string,\n        input: PropTypes.string,\n        inputElement: PropTypes.string,\n        required: PropTypes.string,\n        withIcon: PropTypes.string,\n      }),\n      type: PropTypes.string,\n      value: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.object,\n        PropTypes.string,\n      ]),\n    };\n\n    static defaultProps = {\n      className: '',\n      hint: '',\n      disabled: false,\n      floating: true,\n      multiline: false,\n      required: false,\n      type: 'text',\n    };\n\n    componentDidMount() {\n      if (this.props.multiline) {\n        window.addEventListener('resize', this.handleAutoresize);\n        this.handleAutoresize();\n      }\n    }\n\n    componentWillReceiveProps(nextProps) {\n      if (!this.props.multiline && nextProps.multiline) {\n        window.addEventListener('resize', this.handleAutoresize);\n      } else if (this.props.multiline && !nextProps.multiline) {\n        window.removeEventListener('resize', this.handleAutoresize);\n      }\n    }\n\n    componentDidUpdate() {\n      // resize the textarea, if nessesary\n      if (this.props.multiline) this.handleAutoresize();\n    }\n\n    componentWillUnmount() {\n      if (this.props.multiline) window.removeEventListener('resize', this.handleAutoresize);\n    }\n\n    handleChange = (event) => {\n      const { onChange, multiline, maxLength } = this.props;\n      const valueFromEvent = event.target.value;\n\n      // Trim value to maxLength if that exists (only on multiline inputs).\n      // Note that this is still required even tho we have the onKeyPress filter\n      // because the user could paste smt in the textarea.\n      const haveToTrim = (multiline && maxLength && event.target.value.length > maxLength);\n      const value = haveToTrim ? valueFromEvent.substr(0, maxLength) : valueFromEvent;\n\n      // propagate to to store and therefore to the input\n      if (onChange) onChange(value, event);\n    };\n\n    handleAutoresize = () => {\n      const element = this.inputNode;\n      const rows = this.props.rows;\n\n      if (typeof rows === 'number' && !isNaN(rows)) {\n        element.style.height = null;\n      } else {\n        // compute the height difference between inner height and outer height\n        const style = getComputedStyle(element, null);\n        const heightOffset = style.boxSizing === 'content-box'\n          ? -(parseFloat(style.paddingTop) + parseFloat(style.paddingBottom))\n          : parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);\n\n        // resize the input to its content size\n        element.style.height = 'auto';\n        element.style.height = `${element.scrollHeight + heightOffset}px`;\n      }\n    }\n\n    handleKeyPress = (event) => {\n      // prevent insertion of more characters if we're a multiline input\n      // and maxLength exists\n      const { multiline, maxLength, onKeyPress } = this.props;\n      if (multiline && maxLength) {\n        // check if smt is selected, in which case the newly added charcter would\n        // replace the selected characters, so the length of value doesn't actually\n        // increase.\n        const isReplacing = event.target.selectionEnd - event.target.selectionStart;\n        const value = event.target.value;\n\n        if (!isReplacing && value.length === maxLength) {\n          event.preventDefault();\n          event.stopPropagation();\n          return undefined;\n        }\n      }\n\n      if (onKeyPress) onKeyPress(event);\n      return undefined;\n    };\n\n    blur() {\n      this.inputNode.blur();\n    }\n\n    focus() {\n      this.inputNode.focus();\n    }\n\n    valuePresent = value => (\n      value !== null\n        && value !== undefined\n        && value !== ''\n        && !(typeof value === 'number' && isNaN(value))\n    )\n\n    render() {\n      const { children, defaultValue, disabled, error, floating, hint, icon,\n              name, label: labelText, maxLength, multiline, required,\n              theme, type, value, onKeyPress, rows = 1, ...others } = this.props;\n      const length = maxLength && value ? value.length : 0;\n      const labelClassName = classnames(theme.label, { [theme.fixed]: !floating });\n\n      const className = classnames(theme.input, {\n        [theme.disabled]: disabled,\n        [theme.errored]: error,\n        [theme.hidden]: type === 'hidden',\n        [theme.withIcon]: icon,\n      }, this.props.className);\n\n      const valuePresent = this.valuePresent(value) || this.valuePresent(defaultValue);\n\n      const inputElementProps = {\n        ...others,\n        className: classnames(theme.inputElement, { [theme.filled]: valuePresent }),\n        onChange: this.handleChange,\n        ref: (node) => { this.inputNode = node; },\n        role: 'input',\n        name,\n        defaultValue,\n        disabled,\n        required,\n        type,\n        value,\n      };\n      if (!multiline) {\n        inputElementProps.maxLength = maxLength;\n        inputElementProps.onKeyPress = onKeyPress;\n      } else {\n        inputElementProps.rows = rows;\n        inputElementProps.onKeyPress = this.handleKeyPress;\n      }\n\n      return (\n        <div data-react-toolbox=\"input\" className={className}>\n          {React.createElement(multiline ? 'textarea' : 'input', inputElementProps)}\n          {icon ? <FontIcon className={theme.icon} value={icon} /> : null}\n          <span className={theme.bar} />\n          {labelText\n            ? <label className={labelClassName}>\n              {labelText}\n              {required ? <span className={theme.required}> * </span> : null}\n            </label>\n            : null}\n          {hint ? <span hidden={labelText} className={theme.hint}>{hint}</span> : null}\n          {error ? <span className={theme.error}>{error}</span> : null}\n          {maxLength ? <span className={theme.counter}>{length}/{maxLength}</span> : null}\n          {children}\n        </div>\n      );\n    }\n  }\n\n  return Input;\n};\n\nconst Input = factory(InjectedFontIcon);\nexport default themr(INPUT, null, { withRef: true })(Input);\nexport { factory as inputFactory };\nexport { Input };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/layout/index.js":"import { themr } from 'react-css-themr';\nimport { LAYOUT } from '../identifiers';\nimport { layoutFactory } from './Layout';\nimport { sidebarFactory } from './Sidebar';\nimport { navDrawerFactory } from './NavDrawer';\nimport { Panel } from './Panel';\nimport { AppBar } from '../app_bar';\nimport { Drawer } from '../drawer';\nimport theme from './theme.css';\n\nconst injectTheme = component => themr(LAYOUT, theme)(component);\nconst ThemedNavDrawer = injectTheme(navDrawerFactory(Drawer));\nconst ThemedSidebar = injectTheme(sidebarFactory(Drawer));\nconst ThemedPanel = injectTheme(Panel);\nconst ThemedLayout = injectTheme(layoutFactory(AppBar, ThemedNavDrawer, ThemedSidebar));\n\nexport default ThemedLayout;\nexport { ThemedLayout as Layout };\nexport { ThemedSidebar as Sidebar };\nexport { ThemedNavDrawer as NavDrawer };\nexport { ThemedPanel as Panel };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/layout/Layout.js":"import React, { cloneElement, Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { getViewport } from '../utils/utils';\nimport filterReactChildren from '../utils/filter-react-children';\nimport isComponentOfType from '../utils/is-component-of-type';\nimport InjectAppBar from '../app_bar/AppBar';\nimport InjectNavDrawer from './NavDrawer';\nimport InjectSidebar from './Sidebar';\nimport isBrowser from '../utils/is-browser';\nimport breakpoints from '../utils/breakpoints';\nimport { LAYOUT } from '../identifiers';\n\nconst factory = (AppBar, NavDrawer, Sidebar) => {\n  const isNavDrawer = child => isComponentOfType(NavDrawer, child);\n  const isSidebar = child => isComponentOfType(Sidebar, child);\n  const isAppBar = child => isComponentOfType(AppBar, child);\n  const isUnknown = child => !isNavDrawer(child) && !isSidebar(child) && !isAppBar(child);\n\n  class Layout extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      theme: PropTypes.shape({\n        appbarFixed: PropTypes.string,\n        layout: PropTypes.string,\n        navDrawerClipped: PropTypes.string,\n        navDrawerPinned: PropTypes.string,\n        sidebarClipped: PropTypes.string,\n        sidebarPinned: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      className: '',\n    };\n\n    state = {\n      width: isBrowser() && getViewport().width,\n    };\n\n    componentDidMount() {\n      if (!this.state.width) this.handleResize();\n      window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n    }\n\n    handleResize = () => {\n      this.setState({ width: getViewport().width });\n    }\n\n    isPinned = (sideNav) => {\n      if (sideNav) {\n        const { permanentAt, pinned } = sideNav.props;\n        const { width } = this.state;\n        return width > breakpoints[permanentAt] || pinned;\n      }\n      return undefined;\n    }\n\n    render() {\n      const { children, className, theme, ...rest } = this.props;\n      const appBar = filterReactChildren(children, isAppBar)[0];\n      const navDrawer = filterReactChildren(children, isNavDrawer)[0];\n      const sidebar = filterReactChildren(children, isSidebar)[0];\n      const unknown = filterReactChildren(children, isUnknown);\n      const appBarFixed = appBar && appBar.props.fixed;\n      const navDrawerPinned = this.isPinned(navDrawer);\n      const navDrawerClipped = navDrawer && navDrawer.props.clipped;\n      const sidebarWidth = sidebar && sidebar.props.width;\n      const sidebarPinned = this.isPinned(sidebar);\n      const sidebarClipped = sidebar && sidebar.props.clipped;\n\n      const clonedAppBar = appBar && cloneElement(appBar, {\n        theme,\n        themeNamespace: 'appbar',\n      });\n\n      const clonedLeftSideNav = navDrawer && cloneElement(navDrawer, {\n        clipped: navDrawerClipped,\n        pinned: navDrawerPinned,\n      });\n\n      const clonedRightSideNav = sidebar && cloneElement(sidebar, {\n        clipped: sidebarClipped,\n        pinned: sidebarPinned,\n      });\n\n      const _className = classnames(theme.layout,\n        theme[`sidebarWidth${sidebarWidth}`], {\n          [theme.navDrawerPinned]: navDrawerPinned,\n          [theme.navDrawerClipped]: navDrawerClipped,\n          [theme.sidebarPinned]: sidebarPinned,\n          [theme.sidebarClipped]: sidebarClipped,\n          [theme.appbarFixed]: appBarFixed,\n        }, className);\n\n      return (\n        <div {...rest} className={_className}>\n          {clonedLeftSideNav}\n          {clonedAppBar}\n          {unknown}\n          {clonedRightSideNav}\n        </div>\n      );\n    }\n  }\n\n  return Layout;\n};\n\nconst Layout = factory(InjectAppBar, InjectNavDrawer, InjectSidebar);\nexport default themr(LAYOUT)(Layout);\nexport { factory as layoutFactory };\nexport { Layout };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/layout/NavDrawer.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport InjectDrawer from '../drawer/Drawer';\nimport { LAYOUT } from '../identifiers';\n\nconst factory = (Drawer) => {\n  const NavDrawer = ({\n    active,\n    className,\n    clipped,\n    permanentAt, // eslint-disable-line\n    pinned,\n    theme,\n    ...rest\n  }) => {\n    const _className = classnames({\n      [theme.pinned]: pinned,\n      [theme.clipped]: clipped,\n    }, className);\n\n    return (\n      <Drawer\n        {...rest}\n        active={active || pinned}\n        className={_className}\n        insideTree\n        theme={theme}\n        themeNamespace=\"navDrawer\"\n        withOverlay={!pinned}\n      />\n    );\n  };\n\n  NavDrawer.propTypes = {\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    clipped: PropTypes.bool,\n    permanentAt: PropTypes.oneOf(['sm', 'smTablet', 'md', 'lg', 'lgTablet', 'xl', 'xxl', 'xxxl']),\n    pinned: PropTypes.bool,\n    right: PropTypes.bool,\n    theme: PropTypes.shape({\n      clipped: PropTypes.string,\n      pinned: PropTypes.string,\n    }),\n  };\n\n  NavDrawer.defaultProps = {\n    className: '',\n    pinned: false,\n  };\n\n  return NavDrawer;\n};\n\nconst NavDrawer = factory(InjectDrawer);\nexport default themr(LAYOUT)(NavDrawer);\nexport { factory as navDrawerFactory };\nexport { NavDrawer };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/layout/Panel.js":"import React, { PropTypes } from 'react';\nimport cn from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { LAYOUT } from '../identifiers';\n\nconst Panel = ({ bodyScroll, children, className, theme, ...other }) => {\n  const _className = cn(theme.panel, { [theme.bodyScroll]: bodyScroll }, className);\n  return (\n    <div {...other} data-react-toolbox=\"panel\" className={_className}>\n      {children}\n    </div>\n  );\n};\n\nPanel.propTypes = {\n  bodyScroll: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  theme: PropTypes.shape({\n    panel: PropTypes.string,\n  }),\n};\n\nPanel.defaultProps = {\n  bodyScroll: true,\n  className: '',\n};\n\nexport default themr(LAYOUT)(Panel);\nexport { Panel };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/layout/Sidebar.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport InjectDrawer from '../drawer/Drawer';\nimport { LAYOUT } from '../identifiers';\n\nconst factory = (Drawer) => {\n  const Sidebar = ({\n    active,\n    className,\n    clipped,\n    permanentAt, // eslint-disable-line\n    pinned,\n    theme,\n    ...rest\n  }) => {\n    const _className = classnames({\n      [theme.pinned]: pinned,\n      [theme.clipped]: clipped,\n    }, className);\n\n    return (\n      <Drawer\n        {...rest}\n        active={active || pinned}\n        className={_className}\n        insideTree\n        theme={theme}\n        themeNamespace=\"sidebar\"\n        type=\"right\"\n        withOverlay={!pinned}\n      />\n    );\n  };\n\n  Sidebar.propTypes = {\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    clipped: PropTypes.bool,\n    permanentAt: PropTypes.oneOf(['sm', 'smTablet', 'md', 'lg', 'lgTablet', 'xl', 'xxl', 'xxxl']),\n    pinned: PropTypes.bool,\n    theme: PropTypes.shape({\n      clipped: PropTypes.string,\n      pinned: PropTypes.string,\n    }),\n    width: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 25, 33, 50, 66, 75, 100]),\n  };\n\n  Sidebar.defaultProps = {\n    className: '',\n    pinned: false,\n    right: false,\n  };\n\n  return Sidebar;\n};\n\nconst Sidebar = factory(InjectDrawer);\nexport default themr(LAYOUT)(Sidebar);\nexport { factory as sidebarFactory };\nexport { Sidebar };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/link/index.js":"import { themr } from 'react-css-themr';\nimport { LINK } from '../identifiers';\nimport { Link } from './Link';\nimport theme from './theme.css';\n\nconst ThemedLink = themr(LINK, theme)(Link);\n\nexport default ThemedLink;\nexport { ThemedLink as Link };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/link/Link.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { LINK } from '../identifiers';\nimport { FontIcon } from '../font_icon/FontIcon';\n\nconst Link = ({ active, children, className, count, icon, label, theme, ...others }) => {\n  const _className = classnames(theme.link, {\n    [theme.active]: active,\n  }, className);\n\n  return (\n    <a data-react-toolbox=\"link\" className={_className} {...others}>\n      {icon ? <FontIcon className={theme.icon} value={icon} /> : null}\n      {label ? <abbr>{label}</abbr> : null}\n      {count && parseInt(count, 10) !== 0 ? <small>{count}</small> : null}\n      {children}\n    </a>\n  );\n};\n\nLink.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  count: PropTypes.number,\n  icon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]),\n  label: PropTypes.string,\n  theme: PropTypes.shape({\n    active: PropTypes.string,\n    icon: PropTypes.string,\n    link: PropTypes.string,\n  }),\n};\n\nLink.defaultProps = {\n  active: false,\n  className: '',\n};\n\nexport default themr(LINK)(Link);\nexport { Link };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/index.js":"import { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\nimport { Avatar } from '../avatar';\nimport { Checkbox } from '../checkbox';\nimport { ListItemText } from './ListItemText';\nimport { ListItemAction } from './ListItemAction';\nimport { ListSubHeader } from './ListSubHeader';\nimport { ListDivider } from './ListDivider';\nimport { listFactory } from './List';\nimport { listItemFactory } from './ListItem';\nimport { listCheckboxFactory } from './ListCheckbox';\nimport { listItemActionsFactory } from './ListItemActions';\nimport { listItemContentFactory } from './ListItemContent';\nimport { listItemLayoutFactory } from './ListItemLayout';\nimport themedRippleFactory from '../ripple';\nimport theme from './theme.css';\n\nconst applyTheme = Component => themr(LIST, theme)(Component);\nconst ripple = themedRippleFactory({ centered: false, listItemIgnore: true });\nconst ThemedListItemAction = applyTheme(ListItemAction);\nconst ThemedListSubHeader = applyTheme(ListSubHeader);\nconst ThemedListItemText = applyTheme(ListItemText);\nconst ThemedListDivider = applyTheme(ListDivider);\nconst ThemedListItemContent = applyTheme(listItemContentFactory(ThemedListItemText));\nconst ThemedListItemActions = applyTheme(listItemActionsFactory(ThemedListItemAction));\nconst ThemedListItemLayout = applyTheme(\n  listItemLayoutFactory(Avatar, ThemedListItemContent, ThemedListItemActions),\n);\nconst ThemedListCheckbox = applyTheme(listCheckboxFactory(Checkbox, ThemedListItemContent));\nconst ThemedListItem = applyTheme(\n  listItemFactory(ripple, ThemedListItemLayout, ThemedListItemContent),\n);\nconst ThemedList = applyTheme(listFactory(ThemedListItem));\n\nexport { ThemedListItemActions as ListItemActions };\nexport { ThemedListItemContent as ListItemContent };\nexport { ThemedListItemLayout as ListItemLayout };\nexport { ThemedListSubHeader as ListSubHeader };\nexport { ThemedListItemText as ListItemText };\nexport { ThemedListCheckbox as ListCheckbox };\nexport { ThemedListDivider as ListDivider };\nexport { ThemedListItem as ListItem };\nexport { ThemedList as List };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/ListCheckbox.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\nimport InjectCheckbox from '../checkbox/Checkbox';\nimport InjectListItemContent from './ListItemContent';\n\nconst factory = (Checkbox, ListItemContent) => {\n  const ListCheckbox = ({\n    caption,\n    checked,\n    className,\n    disabled,\n    legend,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    theme,\n  }) => {\n    const _className = classnames(theme.item, theme.checkboxItem, {\n      [theme.disabled]: disabled,\n    }, className);\n\n    return (\n      <li className={_className}>\n        <Checkbox\n          checked={checked}\n          className={theme.checkbox}\n          disabled={disabled}\n          label={<ListItemContent caption={caption} legend={legend} />}\n          name={name}\n          onBlur={onBlur}\n          onChange={onChange}\n          onFocus={onFocus}\n        />\n      </li>\n    );\n  };\n\n  ListCheckbox.propTypes = {\n    caption: PropTypes.string,\n    checked: PropTypes.bool,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    legend: PropTypes.string,\n    name: PropTypes.string,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    theme: PropTypes.shape({\n      checkbox: PropTypes.string,\n      checkboxItem: PropTypes.string,\n      disabled: PropTypes.string,\n      item: PropTypes.string,\n    }),\n  };\n\n  ListCheckbox.defaultProps = {\n    checked: false,\n    disabled: false,\n  };\n\n  return ListCheckbox;\n};\n\nconst ListCheckbox = factory(InjectCheckbox, InjectListItemContent);\n\nexport default themr(LIST)(ListCheckbox);\nexport { factory as listCheckboxFactory };\nexport { ListCheckbox };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/ListDivider.js":"import React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\n\nconst ListDivider = ({ inset, theme }) => (\n  <hr className={inset ? `${theme.divider} ${theme.inset}` : theme.divider} />\n);\n\nListDivider.propTypes = {\n  inset: PropTypes.bool,\n  theme: PropTypes.shape({\n    divider: PropTypes.string,\n    inset: PropTypes.string,\n  }),\n};\n\nListDivider.defaultProps = {\n  inset: false,\n};\n\nexport default themr(LIST)(ListDivider);\nexport { ListDivider };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/ListItemAction.js":"import React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\n\nconst ListItemAction = ({ action, theme }) => {\n  const { onClick, onMouseDown } = action.props;\n  const stopRipple = onClick && !onMouseDown;\n  const stop = e => e.stopPropagation();\n  return (\n    <span className={theme.itemAction} onMouseDown={stopRipple && stop} onClick={onClick && stop}>\n      {action}\n    </span>\n  );\n};\n\nListItemAction.propTypes = {\n  action: PropTypes.node,\n  theme: PropTypes.shape({\n    itemAction: PropTypes.string,\n  }),\n};\n\nexport default themr(LIST)(ListItemAction);\nexport { ListItemAction };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/ListItemActions.js":"import React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\nimport InjectListItemAction from './ListItemAction';\n\nconst factory = (ListItemAction) => {\n  const ListItemActions = ({ type, children, theme }) => {\n    const validChildren = React.Children.toArray(children).filter(c => (\n      React.isValidElement(c)\n    ));\n\n    return (\n      <span className={theme[type]}>\n        {validChildren.map((action, i) => (\n          <ListItemAction key={i} theme={theme} action={action} /> // eslint-disable-line\n        ))}\n      </span>\n    );\n  };\n\n  ListItemActions.propTypes = {\n    children: PropTypes.node,\n    theme: PropTypes.shape({\n      left: PropTypes.string,\n      right: PropTypes.string,\n    }),\n    type: PropTypes.oneOf(['left', 'right']),\n  };\n\n  return ListItemActions;\n};\n\nconst ListItemActions = factory(InjectListItemAction);\nexport default themr(LIST)(ListItemActions);\nexport { factory as listItemActionsFactory };\nexport { ListItemActions };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/ListItemContent.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\nimport InjectListItemText from './ListItemText';\n\nconst types = ['auto', 'normal', 'large'];\n\nconst factory = (ListItemText) => {\n  class ListItemContent extends Component {\n    static propTypes = {\n      caption: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.node,\n      ]),\n      children: PropTypes.node,\n      legend: PropTypes.string,\n      theme: PropTypes.shape({\n        auto: PropTypes.string,\n        itemContentRoot: PropTypes.string,\n        large: PropTypes.string,\n        normal: PropTypes.string,\n      }),\n      type: PropTypes.oneOf(types),\n    };\n\n    getType() {\n      const { type, children, caption, legend } = this.props;\n\n      let count = React.Children.count(children);\n      [caption, legend].forEach((s) => { count += s ? 1 : 0; });\n      const typeIndex = Math.min(count, types.length);\n\n      return type || types[typeIndex];\n    }\n\n    render() {\n      const { children, caption, legend, theme } = this.props;\n      const contentType = this.getType();\n      const className = classnames(theme.itemContentRoot, {\n        [theme[contentType]]: theme[contentType],\n      });\n\n      return (\n        <span className={className}>\n          {caption && <ListItemText theme={theme} primary>{caption}</ListItemText>}\n          {legend && <ListItemText theme={theme}>{legend}</ListItemText>}\n          {children}\n        </span>\n      );\n    }\n  }\n\n  return ListItemContent;\n};\n\nconst ListItemContent = factory(InjectListItemText);\nexport default themr(LIST)(ListItemContent);\nexport { factory as listItemContentFactory };\nexport { ListItemContent };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/ListItem.js":"import React, { Component, PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\nimport InjectListItemContent from './ListItemContent';\nimport InjectListItemLayout from './ListItemLayout';\nimport rippleFactory from '../ripple/Ripple';\n\nconst factory = (ripple, ListItemLayout, ListItemContent) => {\n  class ListItem extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      hasRipple: PropTypes.bool,\n      onClick: PropTypes.func,\n      onMouseDown: PropTypes.func,\n      onTouchStart: PropTypes.func,\n      ripple: PropTypes.bool,\n      theme: PropTypes.shape({\n        listItem: PropTypes.string,\n      }),\n      to: PropTypes.string,\n    };\n\n    static defaultProps = {\n      className: '',\n      disabled: false,\n      ripple: false,\n    };\n\n    handleClick = (event) => {\n      if (this.props.onClick && !this.props.disabled) {\n        this.props.onClick(event);\n      }\n    };\n\n    groupChildren() {\n      const children = {\n        leftActions: [],\n        rightActions: [],\n        ignored: [],\n      };\n\n      React.Children.forEach(this.props.children, (child, i) => {\n        if (!React.isValidElement(child)) {\n          return undefined;\n        }\n\n        const { listItemIgnore, ...rest } = child.props;\n        const strippedChild = { ...child, ...{ props: rest } };\n\n        if (listItemIgnore) {\n          children.ignored.push(strippedChild);\n          return undefined;\n        }\n        if (child.type === ListItemContent) {\n          children.itemContent = strippedChild;\n          return undefined;\n        }\n        const bucket = children.itemContent ? 'rightActions' : 'leftActions';\n        children[bucket].push({ ...strippedChild, key: i });\n        return undefined;\n      });\n\n      return children;\n    }\n\n    render() {\n      const {\n        className,\n        ripple: hasRipple,    // eslint-disable-line no-unused-vars\n        onClick,      // eslint-disable-line no-unused-vars\n        onMouseDown,  // eslint-disable-line no-unused-vars\n        onTouchStart, // eslint-disable-line no-unused-vars\n        theme,\n        to,\n        ...other\n      } = this.props;\n      const children = this.groupChildren();\n      const content = <ListItemLayout theme={theme} {...children} {...other} />;\n      return (\n        <li className={`${theme.listItem} ${className}`} onClick={this.handleClick} onMouseDown={onMouseDown} onTouchStart={onTouchStart}>\n          {to ? <a href={this.props.to}>{content}</a> : content}\n          {children.ignored}\n        </li>\n      );\n    }\n  }\n\n  return ripple(ListItem);\n};\n\nconst ripple = rippleFactory({ centered: false, listItemIgnore: true });\nconst ListItem = factory(ripple, InjectListItemLayout, InjectListItemContent);\n\nexport default themr(LIST)(ListItem);\nexport { factory as listItemFactory };\nexport { ListItem };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/ListItemLayout.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\nimport { FontIcon } from '../font_icon/FontIcon';\nimport InjectAvatar from '../avatar/Avatar';\nimport InjectListItemContent from './ListItemContent';\nimport InjectListItemActions from './ListItemActions';\n\nconst factory = (Avatar, ListItemContent, ListItemActions) => {\n  const ListItemLayout = (props) => {\n    const className = classnames(props.theme.item, {\n      [props.theme.disabled]: props.disabled,\n      [props.theme.selectable]: props.selectable,\n    }, props.className);\n\n    const leftActions = [\n      props.leftIcon && <FontIcon value={props.leftIcon} key=\"leftIcon\" />,\n      props.avatar && <Avatar image={props.avatar} key=\"avatar\" />,\n      ...props.leftActions,\n    ];\n    const rightActions = [\n      props.rightIcon && <FontIcon value={props.rightIcon} key=\"rightIcon\" />,\n      ...props.rightActions,\n    ];\n    const emptyActions = item => !item[0] && !item[1] && !item[2];\n    const content = props.itemContent || (\n      <ListItemContent theme={props.theme} caption={props.caption} legend={props.legend} />\n    );\n\n    return (\n      <span className={className}>\n        {!emptyActions(leftActions) > 0 && <ListItemActions type=\"left\" theme={props.theme}>{leftActions}</ListItemActions>}\n        {content}\n        {!emptyActions(rightActions) > 0 && <ListItemActions type=\"right\" theme={props.theme}>{rightActions}</ListItemActions>}\n      </span>\n    );\n  };\n\n  ListItemLayout.propTypes = {\n    avatar: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n    ]),\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    itemContent: PropTypes.element,\n    leftActions: PropTypes.arrayOf(PropTypes.node),\n    leftIcon: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n    ]),\n    legend: PropTypes.string,\n    rightActions: PropTypes.arrayOf(PropTypes.node),\n    rightIcon: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.element,\n    ]),\n    selectable: PropTypes.bool,\n    theme: PropTypes.shape({\n      disabled: PropTypes.string,\n      item: PropTypes.string,\n      selectable: PropTypes.string,\n    }),\n  };\n\n  ListItemLayout.defaultProps = {\n    disabled: false,\n    selectable: false,\n  };\n\n  return ListItemLayout;\n};\n\nconst ListItemLayout = factory(InjectAvatar, InjectListItemContent, InjectListItemActions);\nexport default themr(LIST)(ListItemLayout);\nexport { factory as listItemLayoutFactory };\nexport { ListItemLayout };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/ListItemText.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\n\nconst ListItemText = ({ className, primary, children, theme, ...other }) => {\n  const _className = classnames(theme.itemText, { [theme.primary]: primary }, className);\n  return (\n    <span data-react-toolbox=\"list-item-text\" className={_className} {...other}>\n      {children}\n    </span>\n  );\n};\n\nListItemText.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  primary: PropTypes.bool,\n  theme: PropTypes.shape({\n    itemText: PropTypes.string,\n    primary: PropTypes.string,\n  }),\n};\n\nListItemText.defaultProps = {\n  primary: false,\n};\n\nexport default themr(LIST)(ListItemText);\nexport { ListItemText };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/List.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\nimport InjectListItem from './ListItem';\n\nconst mergeProp = (propName, child, parent) => (\n  child[propName] !== undefined\n  ? child[propName]\n  : parent[propName]\n);\n\nconst factory = (ListItem) => {\n  class List extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      theme: PropTypes.shape({\n        list: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      className: '',\n      ripple: false,\n      selectable: false,\n    };\n\n    renderItems() {\n      return React.Children.map(this.props.children, (item) => {\n        if (item === null || item === undefined) {\n          return item;\n        } else if (item.type === ListItem) {\n          const selectable = mergeProp('selectable', item.props, this.props);\n          const ripple = mergeProp('ripple', item.props, this.props);\n          return React.cloneElement(item, { selectable, ripple });\n        }\n        return React.cloneElement(item);\n      });\n    }\n\n    render() {\n      return (\n        <ul data-react-toolbox=\"list\" className={classnames(this.props.theme.list, this.props.className)}>\n          {this.renderItems()}\n        </ul>\n      );\n    }\n  }\n\n  return List;\n};\n\nconst List = factory(InjectListItem);\nexport default themr(LIST)(List);\nexport { factory as listFactory };\nexport { List };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/list/ListSubHeader.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { LIST } from '../identifiers';\n\nconst ListSubHeader = ({ caption, className, theme }) => (\n  <h5 className={classnames(theme.subheader, className)}>{caption}</h5>\n);\n\nListSubHeader.propTypes = {\n  caption: PropTypes.string,\n  className: PropTypes.string,\n  theme: PropTypes.object, // eslint-disable-line\n};\n\nListSubHeader.defaultProps = {\n  className: '',\n};\n\nexport default themr(LIST)(ListSubHeader);\nexport { ListSubHeader };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/menu/IconMenu.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { MENU } from '../identifiers';\nimport InjectIconButton from '../button/IconButton';\nimport InjectMenu from './Menu';\n\nconst factory = (IconButton, Menu) => {\n  class IconMenu extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      icon: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      iconRipple: PropTypes.bool,\n      menuRipple: PropTypes.bool,\n      onClick: PropTypes.func,\n      onHide: PropTypes.func,\n      onSelect: PropTypes.func,\n      onShow: PropTypes.func,\n      position: PropTypes.string,\n      selectable: PropTypes.bool,\n      selected: PropTypes.node,\n      theme: PropTypes.shape({\n        icon: PropTypes.string,\n        iconMenu: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      className: '',\n      icon: 'more_vert',\n      iconRipple: true,\n      menuRipple: true,\n      position: 'auto',\n      selectable: false,\n    };\n\n    state = {\n      active: false,\n    }\n\n    handleButtonClick = (event) => {\n      this.setState({ active: !this.state.active });\n      if (this.props.onClick) this.props.onClick(event);\n    };\n\n    handleMenuHide = () => {\n      this.setState({ active: false });\n      if (this.props.onHide) this.props.onHide();\n    }\n\n    render() {\n      const {\n        children, className, icon, iconRipple, inverse, menuRipple, onHide, // eslint-disable-line\n        onSelect, onShow, position, selectable, selected, theme, ...other\n      } = this.props;\n      return (\n        <div {...other} className={classnames(theme.iconMenu, className)}>\n          <IconButton\n            className={theme.icon}\n            icon={icon}\n            inverse={inverse}\n            onClick={this.handleButtonClick}\n            ripple={iconRipple}\n          />\n          <Menu\n            active={this.state.active}\n            onHide={this.handleMenuHide}\n            onSelect={onSelect}\n            onShow={onShow}\n            position={position}\n            ripple={menuRipple}\n            selectable={selectable}\n            selected={selected}\n            theme={theme}\n          >\n            {children}\n          </Menu>\n        </div>\n      );\n    }\n  }\n\n  return IconMenu;\n};\n\nconst IconMenu = factory(InjectIconButton, InjectMenu);\nexport default themr(MENU)(IconMenu);\nexport { factory as iconMenuFactory };\nexport { IconMenu };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/menu/index.js":"import { themr } from 'react-css-themr';\nimport { MENU } from '../identifiers';\nimport { IconButton } from '../button';\nimport { MenuDivider } from './MenuDivider';\nimport { menuItemFactory } from './MenuItem';\nimport { menuFactory } from './Menu';\nimport { iconMenuFactory } from './IconMenu';\nimport themedRippleFactory from '../ripple';\nimport theme from './theme.css';\n\nconst applyTheme = Component => themr(MENU, theme)(Component);\nconst ThemedMenuDivider = applyTheme(MenuDivider);\nconst ThemedMenuItem = applyTheme(menuItemFactory(themedRippleFactory({})));\nconst ThemedMenu = applyTheme(menuFactory(ThemedMenuItem));\nconst ThemedIconMenu = applyTheme(iconMenuFactory(IconButton, ThemedMenu));\n\nexport { ThemedMenuDivider as MenuDivider };\nexport { ThemedMenuItem as MenuItem };\nexport { ThemedMenu as Menu };\nexport { ThemedIconMenu as IconMenu };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/menu/MenuDivider.js":"import React, { PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport { MENU } from '../identifiers';\n\nconst MenuDivider = ({ theme }) => (\n  <hr data-react-toolbox=\"menu-divider\" className={theme.menuDivider} />\n);\n\nMenuDivider.propTypes = {\n  theme: PropTypes.shape({\n    menuDivider: PropTypes.string,\n  }),\n};\n\nexport default themr(MENU)(MenuDivider);\nexport { MenuDivider };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/menu/MenuItem.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { MENU } from '../identifiers';\nimport { FontIcon } from '../font_icon/FontIcon';\nimport rippleFactory from '../ripple/Ripple';\n\nconst factory = (ripple) => {\n  class MenuItem extends Component {\n    static propTypes = {\n      caption: PropTypes.string,\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      icon: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      onClick: PropTypes.func,\n      selected: PropTypes.bool,\n      shortcut: PropTypes.string,\n      theme: PropTypes.shape({\n        caption: PropTypes.string,\n        disabled: PropTypes.string,\n        icon: PropTypes.string,\n        menuItem: PropTypes.string,\n        selected: PropTypes.string,\n        shortcut: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      className: '',\n      disabled: false,\n      selected: false,\n    };\n\n    handleClick = (event) => {\n      if (this.props.onClick && !this.props.disabled) {\n        this.props.onClick(event, this);\n      }\n    };\n\n    render() {\n      const {\n        caption,\n        children,\n        disabled,\n        icon,\n        selected,\n        shortcut,\n        theme,\n        ...others\n      } = this.props;\n      const className = classnames(theme.menuItem, {\n        [theme.selected]: selected,\n        [theme.disabled]: disabled,\n      }, this.props.className);\n\n      return (\n        <li {...others} data-react-toolbox=\"menu-item\" className={className} onClick={this.handleClick}>\n          {icon ? <FontIcon value={icon} className={theme.icon} /> : null}\n          <span className={theme.caption}>{caption}</span>\n          {shortcut ? <small className={theme.shortcut}>{shortcut}</small> : null}\n          {children}\n        </li>\n      );\n    }\n  }\n\n  return ripple(MenuItem);\n};\n\nconst MenuItem = factory(rippleFactory({}));\nexport default themr(MENU)(MenuItem);\nexport { factory as menuItemFactory };\nexport { MenuItem };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/menu/Menu.js":"import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { MENU } from '../identifiers';\nimport { events } from '../utils';\nimport { getViewport } from '../utils/utils';\nimport InjectMenuItem from './MenuItem';\n\nconst POSITION = {\n  AUTO: 'auto',\n  STATIC: 'static',\n  TOP_LEFT: 'topLeft',\n  TOP_RIGHT: 'topRight',\n  BOTTOM_LEFT: 'bottomLeft',\n  BOTTOM_RIGHT: 'bottomRight',\n};\n\nconst factory = (MenuItem) => {\n  class Menu extends Component {\n    static propTypes = {\n      active: PropTypes.bool,\n      children: PropTypes.node,\n      className: PropTypes.string,\n      onHide: PropTypes.func,\n      onSelect: PropTypes.func,\n      onShow: PropTypes.func,\n      outline: PropTypes.bool,\n      position: PropTypes.oneOf(Object.keys(POSITION).map(key => POSITION[key])),\n      ripple: PropTypes.bool,\n      selectable: PropTypes.bool,\n      selected: PropTypes.node,\n      theme: PropTypes.shape({\n        active: PropTypes.string,\n        bottomLeft: PropTypes.string,\n        bottomRight: PropTypes.string,\n        menu: PropTypes.string,\n        menuInner: PropTypes.string,\n        outline: PropTypes.string,\n        rippled: PropTypes.string,\n        static: PropTypes.string,\n        topLeft: PropTypes.string,\n        topRight: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      active: false,\n      outline: true,\n      position: POSITION.STATIC,\n      ripple: true,\n      selectable: true,\n    };\n\n    state = {\n      active: this.props.active,\n      rippled: false,\n    };\n\n    componentDidMount() {\n      this.positionTimeoutHandle = setTimeout(() => {\n        const { width, height } = this.menuNode.getBoundingClientRect();\n        const position = this.props.position === POSITION.AUTO\n          ? this.calculatePosition()\n          : this.props.position;\n        this.setState({ position, width, height });\n      });\n    }\n\n    componentWillReceiveProps(nextProps) {\n      if (this.props.position !== nextProps.position) {\n        const position = nextProps.position === POSITION.AUTO\n          ? this.calculatePosition()\n          : nextProps.position;\n        this.setState({ position });\n      }\n\n      /**\n       * If the menu is going to be activated via props and its not active, verify\n       * the position is appropriated and then show it recalculating position if its\n       * wrong. It should be shown in two consecutive setState.\n       */\n      if (!this.props.active && nextProps.active && !this.state.active) {\n        if (nextProps.position === POSITION.AUTO) {\n          const position = this.calculatePosition();\n          if (this.state.position !== position) {\n            this.setState({ position, active: false }, () => {\n              this.activateTimeoutHandle = setTimeout(() => { this.show(); }, 20);\n            });\n          } else {\n            this.show();\n          }\n        } else {\n          this.show();\n        }\n      }\n\n      /**\n       * If the menu is being deactivated via props and the current state is\n       * active, it should be hid.\n       */\n      if (this.props.active && !nextProps.active && this.state.active) {\n        this.hide();\n      }\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n      if (!this.state.active && nextState.active) {\n        events.addEventsToDocument({\n          click: this.handleDocumentClick,\n          touchstart: this.handleDocumentClick,\n        });\n      }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      if (prevState.active && !this.state.active) {\n        if (this.props.onHide) this.props.onHide();\n        events.removeEventsFromDocument({\n          click: this.handleDocumentClick,\n          touchstart: this.handleDocumentClick,\n        });\n      } else if (!prevState.active && this.state.active && this.props.onShow) {\n        this.props.onShow();\n      }\n    }\n\n    componentWillUnmount() {\n      if (this.state.active) {\n        events.removeEventsFromDocument({\n          click: this.handleDocumentClick,\n          touchstart: this.handleDocumentClick,\n        });\n      }\n      clearTimeout(this.positionTimeoutHandle);\n      clearTimeout(this.activateTimeoutHandle);\n    }\n\n    getMenuStyle() {\n      const { width, height, position } = this.state;\n      if (position !== POSITION.STATIC) {\n        if (this.state.active) {\n          return { clip: `rect(0 ${width}px ${height}px 0)` };\n        } else if (position === POSITION.TOP_RIGHT) {\n          return { clip: `rect(0 ${width}px 0 ${width}px)` };\n        } else if (position === POSITION.BOTTOM_RIGHT) {\n          return { clip: `rect(${height}px ${width}px ${height}px ${width}px)` };\n        } else if (position === POSITION.BOTTOM_LEFT) {\n          return { clip: `rect(${height}px 0 ${height}px 0)` };\n        } else if (position === POSITION.TOP_LEFT) {\n          return { clip: 'rect(0 0 0 0)' };\n        }\n      }\n\n      return undefined;\n    }\n\n    getRootStyle() {\n      return this.state.position !== POSITION.STATIC\n        ? { width: this.state.width, height: this.state.height }\n        : undefined;\n    }\n\n    calculatePosition() {\n      const parentNode = ReactDOM.findDOMNode(this).parentNode;\n      if (!parentNode) return undefined;\n      const { top, left, height, width } = parentNode.getBoundingClientRect();\n      const { height: wh, width: ww } = getViewport();\n      const toTop = top < ((wh / 2) - (height / 2));\n      const toLeft = left < ((ww / 2) - (width / 2));\n      return `${toTop ? 'top' : 'bottom'}${toLeft ? 'Left' : 'Right'}`;\n    }\n\n    handleDocumentClick = (event) => {\n      if (this.state.active && !events.targetIsDescendant(event, ReactDOM.findDOMNode(this))) {\n        this.setState({ active: false, rippled: false });\n      }\n    };\n\n    handleSelect = (item, event) => {\n      const { value, onClick } = item.props;\n      if (onClick) event.persist();\n      this.setState({ active: false, rippled: this.props.ripple }, () => {\n        if (onClick) onClick(event);\n        if (this.props.onSelect) this.props.onSelect(value);\n      });\n    };\n\n    show() {\n      const { width, height } = this.menuNode.getBoundingClientRect();\n      this.setState({ active: true, width, height });\n    }\n\n    hide() {\n      this.setState({ active: false });\n    }\n\n    renderItems() {\n      return React.Children.map(this.props.children, (item) => {\n        if (!item) return item;\n        if (item.type === MenuItem) {\n          return React.cloneElement(item, {\n            ripple: item.props.ripple || this.props.ripple,\n            selected: typeof item.props.value !== 'undefined'\n              && this.props.selectable\n              && item.props.value === this.props.selected,\n            onClick: this.handleSelect.bind(this, item),\n          });\n        }\n        return React.cloneElement(item);\n      });\n    }\n\n    render() {\n      const { theme } = this.props;\n      const outlineStyle = { width: this.state.width, height: this.state.height };\n      const className = classnames([theme.menu, theme[this.state.position]], {\n        [theme.active]: this.state.active,\n        [theme.rippled]: this.state.rippled,\n      }, this.props.className);\n\n      return (\n        <div data-react-toolbox=\"menu\" className={className} style={this.getRootStyle()}>\n          {this.props.outline ? <div className={theme.outline} style={outlineStyle} /> : null}\n          <ul\n            ref={(node) => { this.menuNode = node; }}\n            className={theme.menuInner}\n            style={this.getMenuStyle()}\n          >\n            {this.renderItems()}\n          </ul>\n        </div>\n      );\n    }\n  }\n\n  return Menu;\n};\n\nconst Menu = factory(InjectMenuItem);\nexport default themr(MENU)(Menu);\nexport { factory as menuFactory };\nexport { Menu };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/navigation/index.js":"import { themr } from 'react-css-themr';\nimport { NAVIGATION } from '../identifiers';\nimport { navigationFactory } from './Navigation';\nimport { Button } from '../button';\nimport { Link } from '../link';\nimport theme from './theme.css';\n\nconst ThemedNavigation = themr(NAVIGATION, theme)(navigationFactory(Button, Link));\nexport default ThemedNavigation;\nexport { ThemedNavigation as Navigation };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/navigation/Navigation.js":"import React, { PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { NAVIGATION } from '../identifiers';\nimport InjectButton from '../button/Button';\nimport InjectLink from '../link/Link';\n\nconst factory = (Button, Link) => {\n  const Navigation = ({ actions, children, className, routes, theme, type }) => {\n    const _className = classnames(theme[type], className);\n    const buttons = actions.map((action, index) => (\n      <Button className={theme.button} key={index} {...action} /> // eslint-disable-line\n    ));\n\n    const links = routes.map((route, index) => (\n      <Link className={theme.link} key={index} {...route} /> // eslint-disable-line\n    ));\n\n    return (\n      <nav data-react-toolbox=\"navigation\" className={_className}>\n        {links}\n        {buttons}\n        {children}\n      </nav>\n    );\n  };\n\n  Navigation.propTypes = {\n    actions: PropTypes.array, // eslint-disable-line\n    children: PropTypes.node,\n    className: PropTypes.string,\n    routes: PropTypes.array, // eslint-disable-line\n    theme: PropTypes.shape({\n      button: PropTypes.string,\n      horizontal: PropTypes.string,\n      link: PropTypes.string,\n      vertical: PropTypes.string,\n    }),\n    type: PropTypes.oneOf(['vertical', 'horizontal']),\n  };\n\n  Navigation.defaultProps = {\n    actions: [],\n    className: '',\n    type: 'horizontal',\n    routes: [],\n  };\n\n  return Navigation;\n};\n\nconst Navigation = factory(InjectButton, InjectLink);\nexport default themr(NAVIGATION)(Navigation);\nexport { factory as navigationFactory };\nexport { Navigation };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/overlay/index.js":"import { themr } from 'react-css-themr';\nimport { OVERLAY } from '../identifiers';\nimport { Overlay } from './Overlay';\nimport theme from './theme.css';\n\nconst ThemedOverlay = themr(OVERLAY, theme)(Overlay);\nexport default ThemedOverlay;\nexport { ThemedOverlay as Overlay };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/overlay/Overlay.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { OVERLAY } from '../identifiers';\n\nclass Overlay extends Component {\n  static propTypes = {\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    lockScroll: PropTypes.bool,\n    onClick: PropTypes.func,\n    onEscKeyDown: PropTypes.func,\n    theme: PropTypes.shape({\n      active: PropTypes.string,\n      backdrop: PropTypes.string,\n      overlay: PropTypes.string,\n    }),\n  };\n\n  static defaultProps = {\n    lockScroll: true,\n  };\n\n  componentDidMount() {\n    const { active, lockScroll, onEscKeyDown } = this.props;\n    if (onEscKeyDown) document.body.addEventListener('keydown', this.handleEscKey);\n    if (active && lockScroll) document.body.style.overflow = 'hidden';\n  }\n\n  componentWillUpdate(nextProps) {\n    if (this.props.lockScroll) {\n      const becomingActive = nextProps.active && !this.props.active;\n      const becomingUnactive = !nextProps.active && this.props.active;\n\n      if (becomingActive) {\n        document.body.style.overflow = 'hidden';\n      }\n\n      if (becomingUnactive && !document.querySelectorAll('[data-react-toolbox=\"overlay\"]')[1]) {\n        document.body.style.overflow = '';\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.onEscKeyDown) {\n      if (this.props.active && !prevProps.active) {\n        document.body.addEventListener('keydown', this.handleEscKey);\n      } else if (!this.props.active && prevProps.active) {\n        document.body.removeEventListener('keydown', this.handleEscKey);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.active && this.props.lockScroll) {\n      if (!document.querySelectorAll('[data-react-toolbox=\"overlay\"]')[1]) {\n        document.body.style.overflow = '';\n      }\n    }\n\n    if (this.props.onEscKeyDown) {\n      document.body.removeEventListener('keydown', this.handleEscKey);\n    }\n  }\n\n  handleEscKey = (e) => {\n    if (this.props.active && this.props.onEscKeyDown && e.which === 27) {\n      this.props.onEscKeyDown(e);\n    }\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.props.onClick) {\n      this.props.onClick(event);\n    }\n  }\n\n  render() {\n    const { active, className, lockScroll, theme, onEscKeyDown, ...other } = this.props; // eslint-disable-line\n    return (\n      <div\n        {...other}\n        onClick={this.handleClick}\n        className={classnames(theme.overlay, {\n          [theme.active]: active,\n        }, className)}\n      />\n    );\n  }\n}\n\nexport default themr(OVERLAY)(Overlay);\nexport { Overlay };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/progress_bar/index.js":"import { themr } from 'react-css-themr';\nimport { PROGRESS_BAR } from '../identifiers';\nimport { ProgressBar } from './ProgressBar';\nimport theme from './theme.css';\n\nconst ThemedProgressBar = themr(PROGRESS_BAR, theme)(ProgressBar);\n\nexport default ThemedProgressBar;\nexport { ThemedProgressBar as ProgressBar };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/progress_bar/ProgressBar.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { PROGRESS_BAR } from '../identifiers';\nimport prefixer from '../utils/prefixer';\n\nclass ProgressBar extends Component {\n  static propTypes = {\n    buffer: PropTypes.number,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    max: PropTypes.number,\n    min: PropTypes.number,\n    mode: PropTypes.oneOf(['determinate', 'indeterminate']),\n    multicolor: PropTypes.bool,\n    theme: PropTypes.shape({\n      buffer: PropTypes.string,\n      circle: PropTypes.string,\n      circular: PropTypes.string,\n      indeterminate: PropTypes.string,\n      linear: PropTypes.string,\n      multicolor: PropTypes.string,\n      path: PropTypes.string,\n      value: PropTypes.string,\n    }),\n    type: PropTypes.oneOf(['linear', 'circular']),\n    value: PropTypes.number,\n  };\n\n  static defaultProps = {\n    buffer: 0,\n    className: '',\n    max: 100,\n    min: 0,\n    mode: 'indeterminate',\n    multicolor: false,\n    type: 'linear',\n    value: 0,\n  };\n\n  calculateRatio(value) {\n    if (value < this.props.min) return 0;\n    if (value > this.props.max) return 1;\n    return (value - this.props.min) / (this.props.max - this.props.min);\n  }\n\n  circularStyle() {\n    return this.props.mode !== 'indeterminate'\n      ? { strokeDasharray: `${2 * Math.PI * 25 * this.calculateRatio(this.props.value)}, 400` }\n      : undefined;\n  }\n\n  linearStyle() {\n    if (this.props.mode !== 'indeterminate') {\n      return {\n        buffer: prefixer({ transform: `scaleX(${this.calculateRatio(this.props.buffer)})` }),\n        value: prefixer({ transform: `scaleX(${this.calculateRatio(this.props.value)})` }),\n      };\n    }\n    return {};\n  }\n\n  renderCircular() {\n    return (\n      <svg className={this.props.theme.circle} viewBox=\"0 0 60 60\">\n        <circle className={this.props.theme.path} style={this.circularStyle()} cx=\"30\" cy=\"30\" r=\"25\" />\n      </svg>\n    );\n  }\n\n  renderLinear() {\n    const { buffer, value } = this.linearStyle();\n    return (\n      <div>\n        <span data-ref=\"buffer\" className={this.props.theme.buffer} style={buffer} />\n        <span data-ref=\"value\" className={this.props.theme.value} style={value} />\n      </div>\n    );\n  }\n\n  render() {\n    const { className, disabled, max, min, mode, multicolor, type, theme, value } = this.props;\n    const _className = classnames(theme[type], {\n      [theme[mode]]: mode,\n      [theme.multicolor]: multicolor,\n    }, className);\n\n    return (\n      <div\n        disabled={disabled}\n        data-react-toolbox=\"progress-bar\"\n        aria-valuenow={value}\n        aria-valuemin={min}\n        aria-valuemax={max}\n        className={_className}\n      >\n        {type === 'circular' ? this.renderCircular() : this.renderLinear()}\n      </div>\n    );\n  }\n}\n\nexport default themr(PROGRESS_BAR)(ProgressBar);\nexport { ProgressBar };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/radio/index.js":"import { themr } from 'react-css-themr';\nimport { RADIO } from '../identifiers';\nimport themedRippleFactory from '../ripple';\nimport radioFactory from './Radio';\nimport { radioButtonFactory } from './RadioButton';\nimport { radioGroupFactory } from './RadioGroup';\nimport theme from './theme.css';\n\nconst ThemedRadio = radioFactory(themedRippleFactory({ centered: true, spread: 2.6 }));\nconst ThemedRadioButton = themr(RADIO, theme)(radioButtonFactory(ThemedRadio));\nconst ThemedRadioGroup = themr(RADIO, theme)(radioGroupFactory(ThemedRadioButton));\n\nexport default ThemedRadioButton;\nexport { ThemedRadioButton as RadioButton };\nexport { ThemedRadioGroup as RadioGroup };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/radio/RadioButton.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { RADIO } from '../identifiers';\nimport rippleFactory from '../ripple/Ripple';\nimport radioFactory from './Radio';\n\nconst factory = (Radio) => {\n  class RadioButton extends Component {\n    static propTypes = {\n      checked: PropTypes.bool,\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.node,\n      ]),\n      name: PropTypes.string,\n      onBlur: PropTypes.func,\n      onChange: PropTypes.func,\n      onFocus: PropTypes.func,\n      onMouseEnter: PropTypes.func,\n      onMouseLeave: PropTypes.func,\n      theme: PropTypes.shape({\n        disabled: PropTypes.string,\n        field: PropTypes.string,\n        input: PropTypes.string,\n        text: PropTypes.string,\n      }),\n      value: PropTypes.string,\n    };\n\n    static defaultProps = {\n      checked: false,\n      className: '',\n      disabled: false,\n    };\n\n    handleClick = (event) => {\n      const { checked, disabled, onChange } = this.props;\n      if (event.pageX !== 0 && event.pageY !== 0) this.blur();\n      if (!disabled && !checked && onChange) onChange(event, this);\n    };\n\n    blur() {\n      if (this.inputNode) {\n        this.inputNode.blur();\n      }\n    }\n\n    focus() {\n      if (this.inputNode) {\n        this.inputNode.focus();\n      }\n    }\n\n    render() {\n      const {\n        checked,\n        children,\n        className,\n        disabled,\n        label,\n        name,\n        onChange, // eslint-disable-line\n        onMouseEnter,\n        onMouseLeave,\n        theme,\n        ...others\n      } = this.props;\n      const _className = classnames(theme[this.props.disabled ? 'disabled' : 'field'], className);\n      return (\n        <label\n          data-react-toolbox=\"radio-button\"\n          className={_className}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        >\n          <input\n            {...others}\n            checked={checked}\n            className={theme.input}\n            disabled={disabled}\n            name={name}\n            onChange={() => {}}\n            onClick={this.handleClick}\n            ref={(node) => { this.inputNode = node; }}\n            type=\"radio\"\n          />\n          <Radio checked={checked} disabled={disabled} theme={theme} />\n          {label ? <span className={theme.text}>{label}</span> : null}\n          {children}\n        </label>\n      );\n    }\n  }\n\n  return RadioButton;\n};\n\nconst Radio = radioFactory(rippleFactory({ centered: true, spread: 2.6 }));\nconst RadioButton = factory(Radio);\nexport default themr(RADIO)(RadioButton);\nexport { factory as radioButtonFactory };\nexport { RadioButton };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/radio/RadioGroup.js":"import React, { Component, PropTypes } from 'react';\nimport { themr } from 'react-css-themr';\nimport { RADIO } from '../identifiers';\nimport InjectRadioButton from './RadioButton';\nimport isComponentOfType from '../utils/is-component-of-type';\n\nconst factory = (RadioButton) => {\n  class RadioGroup extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      onChange: PropTypes.func,\n      value: PropTypes.string,\n    };\n\n    static defaultProps = {\n      className: '',\n      disabled: false,\n    };\n\n    handleChange = (value) => {\n      if (this.props.onChange) this.props.onChange(value);\n    };\n\n    renderRadioButtons() {\n      return React.Children.map(this.props.children, child => (\n        !isComponentOfType(RadioButton, child)\n          ? child\n          : React.cloneElement(child, {\n            checked: child.props.value === this.props.value,\n            disabled: this.props.disabled || child.props.disabled,\n            onChange: this.handleChange.bind(this, child.props.value),\n          })\n      ));\n    }\n\n    render() {\n      return (\n        <div data-react-toolbox=\"radio-group\" className={this.props.className}>\n          {this.renderRadioButtons()}\n        </div>\n      );\n    }\n  }\n\n  return RadioGroup;\n};\n\nconst RadioGroup = factory(InjectRadioButton);\nexport default themr(RADIO)(RadioGroup);\nexport { factory as radioGroupFactory };\nexport { RadioGroup };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/radio/Radio.js":"import React, { PropTypes } from 'react';\n\nconst factory = (ripple) => {\n  const Radio = ({ checked, onMouseDown, theme, ...other }) => (\n    <div\n      data-react-toolbox=\"radio\"\n      className={theme[checked ? 'radioChecked' : 'radio']}\n      onMouseDown={onMouseDown}\n      {...other}\n    />\n  );\n\n  Radio.propTypes = {\n    checked: PropTypes.bool,\n    children: PropTypes.node,\n    onMouseDown: PropTypes.func,\n    theme: PropTypes.shape({\n      radio: PropTypes.string,\n      radioChecked: PropTypes.string,\n      ripple: PropTypes.string,\n    }),\n  };\n\n  return ripple(Radio);\n};\n\nexport default factory;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/ripple/index.js":"import rippleFactory from './Ripple';\nimport theme from './theme.css';\n\nexport default options => rippleFactory({ ...options, theme });\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/ripple/Ripple.js":"import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport dissoc from 'ramda/src/dissoc';\nimport { RIPPLE } from '../identifiers';\nimport events from '../utils/events';\nimport prefixer from '../utils/prefixer';\n\nconst defaults = {\n  centered: false,\n  className: '',\n  multiple: true,\n  passthrough: true,\n  spread: 2,\n  theme: {},\n};\n\nconst rippleFactory = (options = {}) => {\n  const {\n    centered: defaultCentered,\n    className: defaultClassName,\n    multiple: defaultMultiple,\n    passthrough: defaultPassthrough,\n    spread: defaultSpread,\n    theme: defaultTheme,\n    ...props\n  } = { ...defaults, ...options };\n\n  return (ComposedComponent) => {\n    class RippledComponent extends Component {\n      static propTypes = {\n        children: PropTypes.node,\n        disabled: PropTypes.bool,\n        onMouseDown: PropTypes.func,\n        onRippleEnded: PropTypes.func,\n        onTouchStart: PropTypes.func,\n        ripple: PropTypes.bool,\n        rippleCentered: PropTypes.bool,\n        rippleClassName: PropTypes.string,\n        rippleMultiple: PropTypes.bool,\n        rippleSpread: PropTypes.number,\n        theme: PropTypes.shape({\n          ripple: PropTypes.string,\n          rippleActive: PropTypes.string,\n          rippleRestarting: PropTypes.string,\n          rippleWrapper: PropTypes.string,\n        }),\n      };\n\n      static defaultProps = {\n        disabled: false,\n        ripple: true,\n        rippleCentered: defaultCentered,\n        rippleClassName: defaultClassName,\n        rippleMultiple: defaultMultiple,\n        rippleSpread: defaultSpread,\n      };\n\n      state = {\n        ripples: {},\n      };\n\n      componentDidUpdate(prevProps, prevState) {\n        // If a new ripple was just added, add a remove event listener to its animation\n        if (Object.keys(prevState.ripples).length < Object.keys(this.state.ripples).length) {\n          this.addRippleRemoveEventListener(this.getLastKey());\n        }\n      }\n\n      componentWillUnmount() {\n        // Remove document event listeners for ripple if they still exists\n        Object.keys(this.state.ripples).forEach((key) => {\n          this.state.ripples[key].endRipple();\n        });\n      }\n\n      /**\n       * Find out a descriptor object for the ripple element being created depending on\n       * the position where the it was triggered and the component's dimensions.\n       *\n       * @param {Number} x Coordinate x in the viewport where ripple was triggered\n       * @param {Number} y Coordinate y in the viewport where ripple was triggered\n       * @return {Object} Descriptor element including position and size of the element\n       */\n      getDescriptor(x, y) {\n        const { left, top, height, width } = ReactDOM.findDOMNode(this).getBoundingClientRect();\n        const { rippleCentered: centered, rippleSpread: spread } = this.props;\n        return {\n          left: centered ? 0 : x - left - (width / 2),\n          top: centered ? 0 : y - top - (height / 2),\n          width: width * spread,\n        };\n      }\n\n      /**\n       * Increments and internal counter and returns the next value as a string. It\n       * is used to assign key references to new ripple elements.\n       *\n       * @return {String} Key to be assigned to a ripple.\n       */\n      getNextKey() {\n        this.currentCount = this.currentCount ? this.currentCount + 1 : 1;\n        return `ripple${this.currentCount}`;\n      }\n\n      /**\n       * Return the last generated key for a ripple element. When there is only one ripple\n       * and to get the reference when a ripple was just created.\n       *\n       * @return {String} The last generated ripple key.\n       */\n      getLastKey() {\n        return `ripple${this.currentCount}`;\n      }\n\n      /**\n       * Variable to store the ripple references\n       */\n      rippleNodes = {};\n\n      /**\n       * Determine if a ripple should start depending if its a touch event. For mobile both\n       * touchStart and mouseDown are launched so in case is touch we should always trigger\n       * but if its not we should check if a touch was already triggered to decide.\n       *\n       * @param {Boolean} isTouch True in case a touch event triggered the ripple false otherwise.\n       * @return {Boolean} True in case the ripple should trigger or false if it shouldn't.\n       */\n      rippleShouldTrigger(isTouch) {\n        const shouldStart = isTouch ? true : !this.touchCache;\n        this.touchCache = isTouch;\n        return shouldStart;\n      }\n\n      /**\n       * Start a ripple animation on an specific point with touch or mouse events. First\n       * decides if the animation should trigger. If the ripple is multiple or there is no\n       * ripple present, it creates a new key. If it's a simple ripple and already exists,\n       * it just restarts the current ripple. The animation happens in two state changes\n       * to allow triggering via css.\n       *\n       * @param {Number} x Coordinate X on the screen where animation should start\n       * @param {Number} y Coordinate Y on the screen where animation should start\n       * @param {Boolean} isTouch Use events from touch or mouse.\n       */\n      animateRipple(x, y, isTouch) {\n        if (this.rippleShouldTrigger(isTouch)) {\n          const { top, left, width } = this.getDescriptor(x, y);\n          const noRipplesActive = Object.keys(this.state.ripples).length === 0;\n          const key = (this.props.rippleMultiple || noRipplesActive)\n            ? this.getNextKey()\n            : this.getLastKey();\n          const endRipple = this.addRippleDeactivateEventListener(isTouch, key);\n          const initialState = { active: false, restarting: true, top, left, width, endRipple };\n          const runningState = { active: true, restarting: false };\n          const ripples = { ...this.state.ripples, [key]: initialState };\n          this.setState({ ripples }, () => {\n            if (this.rippleNodes[key]) this.rippleNodes[key].offsetWidth; // eslint-disable-line\n            this.setState({ ripples: {\n              ...this.state.ripples,\n              [key]: Object.assign({}, this.state.ripples[key], runningState),\n            } });\n          });\n        }\n      }\n\n      /**\n       * Add an event listener to the reference with given key so when the animation transition\n       * ends we can be sure that it finished and it can be safely removed from the state.\n       * This function is called whenever a new ripple is added to the component.\n       *\n       * @param {String} rippleKey Is the key of the ripple to add the event.\n       */\n      addRippleRemoveEventListener(rippleKey) {\n        const self = this;\n        const rippleNode = this.rippleNodes[rippleKey];\n        events.addEventListenerOnTransitionEnded(rippleNode, function onOpacityEnd(e) {\n          if (e.propertyName === 'opacity') {\n            if (self.props.onRippleEnded) self.props.onRippleEnded(e);\n            events.removeEventListenerOnTransitionEnded(self.rippleNodes[rippleKey], onOpacityEnd);\n            // self.rippleNodes = dissoc(rippleKey, self.rippleNodes);\n            delete self.rippleNodes[rippleKey];\n            self.setState({ ripples: dissoc(rippleKey, self.state.ripples) });\n          }\n        });\n      }\n\n      /**\n       * Add an event listener to the document needed to deactivate a ripple and make it dissappear.\n       * Deactivation can happen with a touchend or mouseup depending on the trigger type. The\n       * ending function is created from a factory function and returned.\n       *\n       * @param {Boolean} isTouch True in case the trigger was a touch event false otherwise.\n       * @param {String} rippleKey It's a key to identify the ripple that should be deactivated.\n       * @return {Function} Callback function that deactivates the ripple and removes the listener\n       */\n      addRippleDeactivateEventListener(isTouch, rippleKey) {\n        const eventType = isTouch ? 'touchend' : 'mouseup';\n        const endRipple = this.createRippleDeactivateCallback(eventType, rippleKey);\n        document.addEventListener(eventType, endRipple);\n        return endRipple;\n      }\n\n      /**\n       * Generates a function that can be called to deactivate a ripple and remove its finishing\n       * event listener. If is generated because we need to store it to be called on unmount in case\n       * the ripple is still running.\n       *\n       * @param {String} eventType Is the event type that can be touchend or mouseup\n       * @param {String} rippleKey Is the key representing the ripple\n       * @return {Function} Callback function that deactivates the ripple and removes the listener\n       */\n      createRippleDeactivateCallback(eventType, rippleKey) {\n        const self = this;\n        return function endRipple() {\n          document.removeEventListener(eventType, endRipple);\n          self.setState({ ripples: {\n            ...self.state.ripples,\n            [rippleKey]: Object.assign({}, self.state.ripples[rippleKey], { active: false }),\n          } });\n        };\n      }\n\n      doRipple = () => (!this.props.disabled && this.props.ripple)\n\n      handleMouseDown = (event) => {\n        if (this.props.onMouseDown) this.props.onMouseDown(event);\n        if (this.doRipple()) {\n          const { x, y } = events.getMousePosition(event);\n          this.animateRipple(x, y, false);\n        }\n      };\n\n      handleTouchStart = (event) => {\n        if (this.props.onTouchStart) this.props.onTouchStart(event);\n        if (this.doRipple()) {\n          const { x, y } = events.getTouchPosition(event);\n          this.animateRipple(x, y, true);\n        }\n      };\n\n      renderRipple(key, className, { active, left, restarting, top, width }) {\n        const scale = restarting ? 0 : 1;\n        const transform = `translate3d(${(-width / 2) + left}px, ${(-width / 2) + top}px, 0) scale(${scale})`;\n        const _className = classnames(this.props.theme.ripple, {\n          [this.props.theme.rippleActive]: active,\n          [this.props.theme.rippleRestarting]: restarting,\n        }, className);\n        return (\n          <span key={key} data-react-toolbox=\"ripple\" className={this.props.theme.rippleWrapper} {...props}>\n            <span\n              className={_className}\n              ref={(node) => { if (node) this.rippleNodes[key] = node; }}\n              style={prefixer({ transform }, { width, height: width })}\n            />\n          </span>\n        );\n      }\n\n      render() {\n        const {\n          children,\n          disabled,\n          ripple,\n          onRippleEnded,   // eslint-disable-line\n          rippleCentered,  // eslint-disable-line\n          rippleClassName, // eslint-disable-line\n          rippleMultiple,  // eslint-disable-line\n          rippleSpread,    // eslint-disable-line\n          theme,\n          ...other\n        } = this.props;\n        const { ripples } = this.state;\n        const childRipples = Object.keys(ripples).map(key =>\n          this.renderRipple(key, rippleClassName, ripples[key]),\n        );\n        const childProps = {\n          onMouseDown: this.handleMouseDown,\n          onTouchStart: this.handleTouchStart,\n          ...other,\n        };\n        const finalProps = defaultPassthrough\n          ? { ...childProps, theme, disabled }\n          : childProps;\n\n        return !ripple\n          ? React.createElement(ComposedComponent, finalProps, children)\n          : React.createElement(ComposedComponent, finalProps, [children, childRipples]);\n      }\n    }\n\n    return themr(RIPPLE, defaultTheme)(RippledComponent);\n  };\n};\n\nexport default rippleFactory;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/slider/index.js":"import { themr } from 'react-css-themr';\nimport { SLIDER } from '../identifiers';\nimport { ProgressBar } from '../progress_bar';\nimport { Input } from '../input';\nimport { sliderFactory } from './Slider';\nimport theme from './theme.css';\n\nconst ThemedSlider = themr(SLIDER, theme)(sliderFactory(ProgressBar, Input));\nexport default ThemedSlider;\nexport { ThemedSlider as Slider };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/slider/Slider.js":"import React, { Component, PropTypes } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport styleShape from 'react-style-proptype';\nimport { themr } from 'react-css-themr';\nimport { round, range } from '../utils/utils';\nimport { SLIDER } from '../identifiers';\nimport events from '../utils/events';\nimport InjectProgressBar from '../progress_bar/ProgressBar';\nimport InjectInput from '../input/Input';\n\nconst factory = (ProgressBar, Input) => {\n  class Slider extends Component {\n    static propTypes = {\n      buffer: PropTypes.number,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      editable: PropTypes.bool,\n      max: PropTypes.number,\n      min: PropTypes.number,\n      onChange: PropTypes.func,\n      onDragStart: PropTypes.func,\n      onDragStop: PropTypes.func,\n      pinned: PropTypes.bool,\n      snaps: PropTypes.bool,\n      step: PropTypes.number,\n      style: styleShape,\n      theme: PropTypes.shape({\n        container: PropTypes.string,\n        editable: PropTypes.string,\n        innerknob: PropTypes.string,\n        innerprogress: PropTypes.string,\n        input: PropTypes.string,\n        knob: PropTypes.string,\n        pinned: PropTypes.string,\n        pressed: PropTypes.string,\n        progress: PropTypes.string,\n        ring: PropTypes.string,\n        slider: PropTypes.string,\n        snap: PropTypes.string,\n        snaps: PropTypes.string,\n      }),\n      value: PropTypes.number,\n    };\n\n    static defaultProps = {\n      buffer: 0,\n      className: '',\n      editable: false,\n      max: 100,\n      min: 0,\n      onDragStart: () => {},\n      onDragStop: () => {},\n      pinned: false,\n      snaps: false,\n      step: 0.01,\n      value: 0,\n    };\n\n    state = {\n      inputFocused: false,\n      inputValue: null,\n      sliderLength: 0,\n      sliderStart: 0,\n    };\n\n    componentDidMount() {\n      window.addEventListener('resize', this.handleResize);\n      this.handleResize();\n    }\n\n    componentWillReceiveProps(nextProps) {\n      if (this.state.inputFocused && this.props.value !== nextProps.value) {\n        this.setState({ inputValue: this.valueForInput(nextProps.value) });\n      }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n      return this.state.inputFocused || !nextState.inputFocused;\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n      if (nextState.pressed !== this.state.pressed) {\n        if (nextState.pressed) {\n          this.props.onDragStart();\n        } else {\n          this.props.onDragStop();\n        }\n      }\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n      events.removeEventsFromDocument(this.getMouseEventMap());\n      events.removeEventsFromDocument(this.getTouchEventMap());\n      events.removeEventsFromDocument(this.getKeyboardEvents());\n    }\n\n    getInput() {\n      return this.inputNode && this.inputNode.getWrappedInstance\n        ? this.inputNode.getWrappedInstance()\n        : this.inputNode;\n    }\n\n    getKeyboardEvents() {\n      return {\n        keydown: this.handleKeyDown,\n      };\n    }\n\n    getMouseEventMap() {\n      return {\n        mousemove: this.handleMouseMove,\n        mouseup: this.handleMouseUp,\n      };\n    }\n\n    getTouchEventMap() {\n      return {\n        touchmove: this.handleTouchMove,\n        touchend: this.handleTouchEnd,\n      };\n    }\n\n    addToValue(increment) {\n      let value = this.state.inputFocused ? parseFloat(this.state.inputValue) : this.props.value;\n      value = this.trimValue(value + increment);\n      if (value !== this.props.value) this.props.onChange(value);\n    }\n\n    handleInputFocus = () => {\n      this.setState({\n        inputFocused: true,\n        inputValue: this.valueForInput(this.props.value),\n      });\n    };\n\n    handleInputChange = (value) => {\n      this.setState({ inputValue: value });\n    };\n\n    handleInputBlur = (event) => {\n      const value = this.state.inputValue || 0;\n      this.setState({ inputFocused: false, inputValue: null }, () => {\n        this.props.onChange(this.trimValue(value), event);\n      });\n    };\n\n    handleKeyDown = (event) => {\n      if ([13, 27].indexOf(event.keyCode) !== -1) this.getInput().blur();\n      if (event.keyCode === 38) this.addToValue(this.props.step);\n      if (event.keyCode === 40) this.addToValue(-this.props.step);\n    };\n\n    handleMouseDown = (event) => {\n      if (this.state.inputFocused) this.getInput().blur();\n      events.addEventsToDocument(this.getMouseEventMap());\n      this.start(events.getMousePosition(event));\n      events.pauseEvent(event);\n    };\n\n    handleMouseMove = (event) => {\n      events.pauseEvent(event);\n      this.move(events.getMousePosition(event));\n    };\n\n    handleMouseUp = () => {\n      this.end(this.getMouseEventMap());\n    };\n\n    handleResize = (event, callback) => {\n      const { left, right } = ReactDOM.findDOMNode(this.progressbarNode).getBoundingClientRect();\n      const cb = (callback) || (() => {});\n      this.setState({ sliderStart: left, sliderLength: right - left }, cb);\n    };\n\n    handleSliderBlur = () => {\n      events.removeEventsFromDocument(this.getKeyboardEvents());\n    };\n\n    handleSliderFocus = () => {\n      events.addEventsToDocument(this.getKeyboardEvents());\n    };\n\n    handleTouchEnd = () => {\n      this.end(this.getTouchEventMap());\n    };\n\n    handleTouchMove = (event) => {\n      this.move(events.getTouchPosition(event));\n    };\n\n    handleTouchStart = (event) => {\n      if (this.state.inputFocused) this.getInput().blur();\n      this.start(events.getTouchPosition(event));\n      events.addEventsToDocument(this.getTouchEventMap());\n      events.pauseEvent(event);\n    };\n\n    end(revents) {\n      events.removeEventsFromDocument(revents);\n      this.setState({ pressed: false });\n    }\n\n    knobOffset() {\n      const { max, min, value } = this.props;\n      return 100 * ((value - min) / (max - min));\n    }\n\n    move(position) {\n      const newValue = this.positionToValue(position);\n      if (newValue !== this.props.value) this.props.onChange(newValue);\n    }\n\n    positionToValue(position) {\n      const { sliderStart: start, sliderLength: length } = this.state;\n      const { max, min, step } = this.props;\n      const pos = ((position.x - start) / length) * (max - min);\n      return this.trimValue((Math.round(pos / step) * step) + min);\n    }\n\n    start(position) {\n      this.handleResize(null, () => {\n        this.setState({ pressed: true });\n        this.props.onChange(this.positionToValue(position));\n      });\n    }\n\n    stepDecimals() {\n      return (this.props.step.toString().split('.')[1] || []).length;\n    }\n\n    trimValue(value) {\n      if (value < this.props.min) return this.props.min;\n      if (value > this.props.max) return this.props.max;\n      return round(value, this.stepDecimals());\n    }\n\n    valueForInput(value) {\n      const decimals = this.stepDecimals();\n      return decimals > 0 ? value.toFixed(decimals) : value.toString();\n    }\n\n    renderSnaps() {\n      if (!this.props.snaps) return undefined;\n      return (\n        <div className={this.props.theme.snaps}>\n          {range(0, (this.props.max - this.props.min) / this.props.step).map(i =>\n            <div key={`span-${i}`} className={this.props.theme.snap} />,\n          )}\n        </div>\n      );\n    }\n\n    renderInput() {\n      if (!this.props.editable) return undefined;\n      return (\n        <Input\n          ref={(node) => { this.inputNode = node; }}\n          className={this.props.theme.input}\n          disabled={this.props.disabled}\n          onFocus={this.handleInputFocus}\n          onChange={this.handleInputChange}\n          onBlur={this.handleInputBlur}\n          value={this.state.inputFocused\n            ? this.state.inputValue\n            : this.valueForInput(this.props.value)}\n        />\n      );\n    }\n\n    render() {\n      const { theme } = this.props;\n      const knobStyles = { left: `${this.knobOffset()}%` };\n      const className = classnames(theme.slider, {\n        [theme.editable]: this.props.editable,\n        [theme.disabled]: this.props.disabled,\n        [theme.pinned]: this.props.pinned,\n        [theme.pressed]: this.state.pressed,\n        [theme.ring]: this.props.value === this.props.min,\n      }, this.props.className);\n\n      return (\n        <div\n          className={className}\n          disabled={this.props.disabled}\n          data-react-toolbox=\"slider\"\n          onBlur={this.handleSliderBlur}\n          onFocus={this.handleSliderFocus}\n          style={this.props.style}\n          tabIndex=\"0\"\n        >\n          <div\n            ref={(node) => { this.sliderNode = node; }}\n            className={theme.container}\n            onMouseDown={this.handleMouseDown}\n            onTouchStart={this.handleTouchStart}\n          >\n            <div\n              ref={(node) => { this.knobNode = node; }}\n              className={theme.knob}\n              onMouseDown={this.handleMouseDown}\n              onTouchStart={this.handleTouchStart}\n              style={knobStyles}\n            >\n              <div className={theme.innerknob} data-value={parseInt(this.props.value, 10)} />\n            </div>\n\n            <div className={theme.progress}>\n              <ProgressBar\n                disabled={this.props.disabled}\n                ref={(node) => { this.progressbarNode = node; }}\n                className={theme.innerprogress}\n                max={this.props.max}\n                min={this.props.min}\n                mode=\"determinate\"\n                value={this.props.value}\n                buffer={this.props.buffer}\n              />\n              {this.renderSnaps()}\n            </div>\n          </div>\n\n          {this.renderInput()}\n        </div>\n      );\n    }\n  }\n\n  return Slider;\n};\n\nconst Slider = factory(InjectProgressBar, InjectInput);\nexport default themr(SLIDER)(Slider);\nexport { factory as sliderFactory };\nexport { Slider };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/snackbar/index.js":"import { themr } from 'react-css-themr';\nimport { SNACKBAR } from '../identifiers';\nimport { snackbarFactory } from './Snackbar';\nimport { Button } from '../button';\nimport theme from './theme.css';\n\nconst ThemedSnackbar = themr(SNACKBAR, theme)(snackbarFactory(Button));\n\nexport default ThemedSnackbar;\nexport { ThemedSnackbar as Snackbar };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/snackbar/Snackbar.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { SNACKBAR } from '../identifiers';\nimport ActivableRenderer from '../hoc/ActivableRenderer';\nimport InjectButton from '../button/Button';\nimport Portal from '../hoc/Portal';\n\nconst factory = (Button) => {\n  class Snackbar extends Component {\n    static propTypes = {\n      action: PropTypes.string,\n      active: PropTypes.bool,\n      children: PropTypes.node,\n      className: PropTypes.string,\n      label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n      ]),\n      onClick: PropTypes.func,\n      onTimeout: PropTypes.func,\n      theme: PropTypes.shape({\n        accept: PropTypes.string,\n        active: PropTypes.string,\n        button: PropTypes.string,\n        cancel: PropTypes.string,\n        label: PropTypes.string,\n        snackbar: PropTypes.string,\n        warning: PropTypes.string,\n      }),\n      timeout: PropTypes.number,\n      type: PropTypes.oneOf(['accept', 'cancel', 'warning']),\n    };\n\n    componentDidMount() {\n      if (this.props.active && this.props.timeout) {\n        this.scheduleTimeout(this.props);\n      }\n    }\n\n    componentWillReceiveProps(nextProps) {\n      if (nextProps.active && nextProps.timeout) {\n        this.scheduleTimeout(nextProps);\n      }\n    }\n\n    componentWillUnmount() {\n      clearTimeout(this.curTimeout);\n    }\n\n    scheduleTimeout = (props) => {\n      const { onTimeout, timeout } = props;\n      if (this.curTimeout) clearTimeout(this.curTimeout);\n      this.curTimeout = setTimeout(() => {\n        if (onTimeout) onTimeout();\n        this.curTimeout = null;\n      }, timeout);\n    }\n\n    render() {\n      const { action, active, children, label, onClick, theme, type } = this.props;\n      const className = classnames([theme.snackbar, theme[type]], {\n        [theme.active]: active,\n      }, this.props.className);\n\n      return (\n        <Portal className={theme.portal}>\n          <div data-react-toolbox=\"snackbar\" className={className}>\n            <span className={theme.label}>\n              {label}\n              {children}\n            </span>\n            {action ? <Button className={theme.button} label={action} onClick={onClick} /> : null}\n          </div>\n        </Portal>\n      );\n    }\n  }\n\n  return ActivableRenderer()(Snackbar);\n};\n\nconst Snackbar = factory(InjectButton);\nexport default themr(SNACKBAR)(Snackbar);\nexport { factory as snackbarFactory };\nexport { Snackbar };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/switch/index.js":"import { themr } from 'react-css-themr';\nimport { switchFactory } from './Switch';\nimport { SWITCH } from '../identifiers';\nimport thumbFactory from './Thumb';\nimport themedRippleFactory from '../ripple';\nimport theme from './theme.css';\n\nconst applyTheme = Component => themr(SWITCH, theme)(Component);\nconst ripple = themedRippleFactory({ centered: true, spread: 2.6 });\nconst ThemedThumb = applyTheme(thumbFactory(ripple));\nconst ThemedSwitch = applyTheme(switchFactory(ThemedThumb));\n\nexport default ThemedSwitch;\nexport { ThemedSwitch as Switch };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/switch/Switch.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { SWITCH } from '../identifiers';\nimport rippleFactory from '../ripple/Ripple';\nimport thumbFactory from './Thumb';\n\nconst factory = (Thumb) => {\n  class Switch extends Component {\n    static propTypes = {\n      checked: PropTypes.bool,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      label: PropTypes.string,\n      name: PropTypes.string,\n      onBlur: PropTypes.func,\n      onChange: PropTypes.func,\n      onFocus: PropTypes.func,\n      ripple: PropTypes.bool,\n      theme: PropTypes.shape({\n        disabled: PropTypes.string,\n        field: PropTypes.string,\n        input: PropTypes.string,\n        off: PropTypes.string,\n        on: PropTypes.string,\n        ripple: PropTypes.string,\n        text: PropTypes.string,\n        thumb: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      checked: false,\n      className: '',\n      disabled: false,\n    };\n\n    handleToggle = (event) => {\n      if (event.pageX !== 0 && event.pageY !== 0) this.blur();\n      if (!this.props.disabled && this.props.onChange) {\n        this.props.onChange(!this.props.checked, event);\n      }\n    };\n\n    blur() {\n      this.inputNode.blur();\n    }\n\n    focus() {\n      this.inputNode.focus();\n    }\n\n    render() {\n      const {\n        checked,\n        className,\n        disabled,\n        onChange, // eslint-disable-line no-unused-vars\n        ripple,\n        theme,\n        ...others\n      } = this.props;\n      const _className = classnames(theme[disabled ? 'disabled' : 'field'], className);\n      return (\n        <label data-react-toolbox=\"switch\" className={_className}>\n          <input\n            {...others}\n            checked={this.props.checked}\n            className={theme.input}\n            onClick={this.handleToggle}\n            readOnly\n            ref={(node) => { this.inputNode = node; }}\n            type=\"checkbox\"\n          />\n          <span className={theme[checked ? 'on' : 'off']}>\n            <Thumb disabled={this.props.disabled} theme={theme} ripple={ripple} />\n          </span>\n          {this.props.label ? <span className={theme.text}>{this.props.label}</span> : null}\n        </label>\n      );\n    }\n  }\n\n  return Switch;\n};\n\nconst Thumb = thumbFactory(rippleFactory({ centered: true, spread: 2.6 }));\nconst Switch = factory(Thumb);\n\nexport default themr(SWITCH)(Switch);\nexport { factory as switchFactory };\nexport { Switch };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/switch/Thumb.js":"import React, { PropTypes } from 'react';\n\nconst factory = (ripple) => {\n  const Thumb = ({ onMouseDown, theme, ...other }) => (\n    <span className={theme.thumb} onMouseDown={onMouseDown} {...other} />\n  );\n\n  Thumb.propTypes = {\n    children: PropTypes.node,\n    onMouseDown: PropTypes.func,\n    theme: PropTypes.shape({\n      ripple: PropTypes.string,\n      thumb: PropTypes.string,\n    }),\n  };\n\n  return ripple(Thumb);\n};\n\nexport default factory;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/table/index.js":"import { themr } from 'react-css-themr';\nimport { TABLE } from '../identifiers';\nimport { Checkbox } from '../checkbox';\nimport { FontIcon } from '../font_icon';\n\nimport { tableFactory } from './Table';\nimport { tableHeadFactory } from './TableHead';\nimport { tableRowFactory } from './TableRow';\nimport { tableCellFactory } from './TableCell';\nimport theme from './theme.css';\n\nconst applyTheme = Component => themr(TABLE, theme)(Component);\nconst ThemedTableCell = applyTheme(tableCellFactory(FontIcon));\nconst ThemedTableHead = applyTheme(tableHeadFactory(Checkbox, ThemedTableCell));\nconst ThemedTableRow = applyTheme(tableRowFactory(Checkbox, ThemedTableCell));\nconst ThemedTable = applyTheme(tableFactory(ThemedTableHead, ThemedTableRow));\n\nexport default ThemedTable;\nexport { ThemedTable as Table };\nexport { ThemedTableHead as TableHead };\nexport { ThemedTableRow as TableRow };\nexport { ThemedTableCell as TableCell };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/table/TableCell.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { TABLE } from '../identifiers';\nimport InjectFontIcon from '../font_icon/FontIcon';\n\nconst ASC = 'asc';\nconst DESC = 'desc';\n\nconst factory = (FontIcon) => {\n  class TableCell extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      column: PropTypes.number,\n      numeric: PropTypes.bool,\n      onClick: PropTypes.func,\n      row: PropTypes.number,\n      sorted: PropTypes.oneOf([ASC, DESC]),\n      tagName: PropTypes.oneOf(['td', 'th']),\n      theme: PropTypes.shape({\n        asc: PropTypes.string,\n        headCell: PropTypes.string,\n        numeric: PropTypes.string,\n        rowCell: PropTypes.string,\n        sorted: PropTypes.string,\n        sortIcon: PropTypes.string,\n        tableCell: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      children: PropTypes.node,\n      className: '',\n      numeric: false,\n      tagName: 'td',\n    };\n\n    handleClick = (event) => {\n      const { onClick, row, column } = this.props;\n      if (onClick) onClick(event, column, row);\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        numeric,\n        row,    // eslint-disable-line\n        column, // eslint-disable-line\n        sorted,\n        tagName,\n        theme,\n        ...other\n      } = this.props;\n\n      const _className = classnames(theme.tableCell, {\n        [theme.headCell]: tagName === 'th',\n        [theme.rowCell]: tagName === 'td',\n        [theme.sorted]: sorted,\n        [theme.numeric]: numeric,\n      }, className);\n\n      const props = {\n        ...other,\n        className: _className,\n        onClick: this.handleClick,\n      };\n\n      return (\n        React.createElement(tagName, props, [\n          sorted && <FontIcon\n            className={classnames(theme.sortIcon, { [theme.asc]: sorted === ASC })}\n            key=\"icon\"\n            value=\"arrow_downward\"\n          />,\n          children,\n        ])\n      );\n    }\n  }\n\n  return TableCell;\n};\n\nconst TableCell = factory(InjectFontIcon);\nexport default themr(TABLE)(TableCell);\nexport { factory as tableCellFactory };\nexport { TableCell };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/table/TableHead.js":"import React, { Component, PropTypes, cloneElement } from 'react';\nimport { themr } from 'react-css-themr';\nimport { TABLE } from '../identifiers';\nimport InjectCheckbox from '../checkbox/Checkbox';\nimport InjectTableCell from './TableCell';\n\nconst factory = (Checkbox, TableCell) => {\n  class TableHead extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      displaySelect: PropTypes.bool,\n      multiSelectable: PropTypes.bool,\n      onSelect: PropTypes.func,\n      selectable: PropTypes.bool,\n      selected: PropTypes.bool,\n      theme: PropTypes.shape({\n        checkboxCell: PropTypes.string,\n      }),\n    }\n\n    static defaultProps = {\n      displaySelect: true,\n    }\n\n    handleSelect = (value, event) => {\n      this.props.onSelect(value, event);\n    };\n\n    render() {\n      const {\n        children,\n        displaySelect,\n        multiSelectable,\n        onSelect,        // eslint-disable-line\n        selectable,\n        selected,\n        theme,\n        ...other\n      } = this.props;\n      return (\n        <tr {...other}>\n          {selectable && <TableCell className={theme.checkboxCell} tagName=\"th\">\n            {displaySelect && <Checkbox\n              checked={selected}\n              disabled={!multiSelectable}\n              onChange={this.handleSelect}\n            />}\n          </TableCell>}\n          {React.Children.map(children, (child, index) => {\n            if (!child) return null;\n            return cloneElement(child, {\n              column: index,\n              tagName: 'th',\n            });\n          })}\n        </tr>\n      );\n    }\n  }\n\n  return TableHead;\n};\n\nconst TableHead = factory(InjectCheckbox, InjectTableCell);\nexport default themr(TABLE)(TableHead);\nexport { factory as tableHeadFactory };\nexport { TableHead };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/table/Table.js":"import React, { PropTypes, Component, cloneElement } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport filterReactChildren from '../utils/filter-react-children';\nimport isComponentOfType from '../utils/is-component-of-type';\nimport { TABLE } from '../identifiers';\nimport InjectTableHead from './TableHead';\nimport InjectTableRow from './TableRow';\n\nconst factory = (TableHead, TableRow) => {\n  const isTableHead = child => isComponentOfType(TableHead, child);\n  const isTableRow = child => isComponentOfType(TableRow, child);\n\n  class Table extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      multiSelectable: PropTypes.bool,\n      onRowSelect: PropTypes.func,\n      selectable: PropTypes.bool,\n      theme: PropTypes.shape({\n        head: PropTypes.string,\n        table: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      className: '',\n      multiSelectable: false,\n      selectable: true,\n    };\n\n    getRowTuples = () => React.Children\n      .toArray(filterReactChildren(this.props.children, isTableRow))\n      .map((child, index) => [index, Boolean(child.props.selected)]);\n\n    handleHeadSelect = (value) => {\n      if (this.props.onRowSelect) {\n        this.props.onRowSelect(value\n          ? this.getRowTuples().map(item => item[0])\n          : []);\n      }\n    };\n\n    handleRowSelect = (idx) => {\n      if (this.props.onRowSelect) {\n        if (this.props.multiSelectable) {\n          const current = this.getRowTuples().filter(item => item[1]).map(item => item[0]);\n          const rowIndex = current.indexOf(idx);\n          const indexes = rowIndex !== -1\n          ? [...current.slice(0, rowIndex), ...current.slice(rowIndex + 1)]\n          : [...current, idx];\n          this.props.onRowSelect(indexes);\n        } else {\n          this.props.onRowSelect([idx]);\n        }\n      }\n    };\n\n    renderHead = () => {\n      const tuples = this.getRowTuples();\n      const selected = tuples.filter(item => item[1]).length === tuples.length;\n      return React.Children.map(\n        filterReactChildren(this.props.children, isTableHead),\n        child => cloneElement(child, {\n          selected,\n          multiSelectable: this.props.multiSelectable,\n          onSelect: this.handleHeadSelect,\n          selectable: this.props.selectable,\n        }),\n      );\n    };\n\n    renderRows = () => React.Children.map(\n      filterReactChildren(this.props.children, isTableRow),\n      (child, idx) => cloneElement(child, {\n        idx,\n        onSelect: this.handleRowSelect,\n        selectable: this.props.selectable,\n      }),\n    );\n\n    render() {\n      const {\n        className,\n        multiSelectable, // eslint-disable-line\n        onRowSelect,     // eslint-disable-line\n        selectable,      // eslint-disable-line\n        theme,\n        ...rest\n      } = this.props;\n      return (\n        <table {...rest} className={classnames(theme.table, className)}>\n          <thead className={theme.head}>{this.renderHead()}</thead>\n          <tbody>{this.renderRows()}</tbody>\n        </table>\n      );\n    }\n  }\n\n  return Table;\n};\n\nconst Table = factory(InjectTableHead, InjectTableRow);\nexport default themr(TABLE)(Table);\nexport { factory as tableFactory };\nexport { Table };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/table/TableRow.js":"import React, { cloneElement, Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { TABLE } from '../identifiers';\nimport InjectCheckbox from '../checkbox/Checkbox';\nimport InjectTableCell from './TableCell';\n\nconst factory = (Checkbox, TableCell) => {\n  class TableRow extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      idx: PropTypes.number,\n      onSelect: PropTypes.func,\n      selectable: PropTypes.bool,\n      selected: PropTypes.bool,\n      theme: PropTypes.shape({\n        checkboxCell: PropTypes.string,\n        row: PropTypes.string,\n        selected: PropTypes.string,\n      }),\n    };\n\n    handleSelect = (value) => {\n      const { idx, onSelect } = this.props;\n      if (onSelect) onSelect(idx, value);\n    };\n\n    render() {\n      const { children, className, selectable, idx, selected, theme, ...other } = this.props; // eslint-disable-line\n      const _className = classnames(theme.row, {\n        [theme.selected]: selectable && selected,\n      }, className);\n      return (\n        <tr {...other} className={_className}>\n          {selectable && <TableCell className={theme.checkboxCell}>\n            <Checkbox checked={selected} onChange={this.handleSelect} />\n          </TableCell>}\n          {React.Children.map(children, (child, index) => {\n            if (!child) return null;\n            return cloneElement(child, {\n              column: index,\n              tagName: 'td',\n            });\n          })}\n        </tr>\n      );\n    }\n  }\n\n  return TableRow;\n};\n\nconst TableRow = factory(InjectCheckbox, InjectTableCell);\nexport default themr(TABLE)(TableRow);\nexport { factory as tableRowFactory };\nexport { TableRow };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/tabs/index.js":"import { themr } from 'react-css-themr';\nimport { TABS } from '../identifiers';\nimport { tabsFactory } from './Tabs';\nimport { TabContent } from './TabContent';\nimport { tabFactory } from './Tab';\nimport themedRippleFactory from '../ripple';\nimport { FontIcon } from '../font_icon/FontIcon';\nimport theme from './theme.css';\n\nconst applyTheme = Component => themr(TABS, theme)(Component);\nconst ThemedTabContent = applyTheme(TabContent);\nconst ThemedTab = applyTheme(tabFactory(themedRippleFactory({ centered: false })));\nconst ThemedTabs = applyTheme(tabsFactory(ThemedTab, ThemedTabContent, FontIcon));\n\nexport { ThemedTab as Tab };\nexport { ThemedTabs as Tabs };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/tabs/TabContent.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { TABS } from '../identifiers';\n\nclass TabContent extends Component {\n  static propTypes = {\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    tabIndex: PropTypes.number,\n    theme: PropTypes.shape({\n      active: PropTypes.string,\n      tab: PropTypes.string,\n    }),\n  };\n\n  static defaultProps = {\n    active: false,\n    className: '',\n  };\n\n  render() {\n    const className = classnames(this.props.theme.tab, {\n      [this.props.theme.active]: this.props.active,\n    }, this.props.className);\n\n    return (\n      <section className={className} tabIndex={this.props.tabIndex}>\n        {this.props.children}\n      </section>\n    );\n  }\n}\n\nexport default themr(TABS)(TabContent);\nexport { TabContent };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/tabs/Tab.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { FontIcon } from '../font_icon';\nimport { TABS } from '../identifiers';\nimport rippleFactory from '../ripple/Ripple';\n\nconst factory = (ripple) => {\n  class Tab extends Component {\n    static propTypes = {\n      active: PropTypes.bool,\n      activeClassName: PropTypes.string,\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disabled: PropTypes.bool,\n      hidden: PropTypes.bool,\n      icon: PropTypes.node,\n      index: PropTypes.number,\n      label: PropTypes.node,\n      onActive: PropTypes.func,\n      onClick: PropTypes.func,\n      theme: PropTypes.shape({\n        active: PropTypes.string,\n        disabled: PropTypes.string,\n        hidden: PropTypes.string,\n        label: PropTypes.string,\n        rippleWrapper: PropTypes.string,\n        withIcon: PropTypes.string,\n        withText: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      active: false,\n      className: '',\n      disabled: false,\n      hidden: false,\n    };\n\n    componentDidUpdate(prevProps) {\n      if (!prevProps.active && this.props.active && this.props.onActive) {\n        this.props.onActive();\n      }\n    }\n\n    handleClick = (event) => {\n      if (!this.props.disabled && this.props.onClick) {\n        this.props.onClick(event, this.props.index);\n      }\n    };\n\n    render() {\n      const {\n        index, onActive, // eslint-disable-line\n        active, activeClassName, children, className, disabled, hidden, label, icon, theme, ...other\n      } = this.props;\n      const _className = classnames(theme.label, {\n        [theme.active]: active,\n        [theme.hidden]: hidden,\n        [theme.withText]: label,\n        [theme.withIcon]: icon,\n        [theme.disabled]: disabled,\n        [activeClassName]: active,\n      }, className);\n\n      return (\n        <div {...other} data-react-toolbox=\"tab\" className={_className} onClick={this.handleClick}>\n          {icon && <FontIcon className={theme.icon} value={icon} />}\n          {label}\n          {children}\n        </div>\n      );\n    }\n  }\n\n  return ripple(Tab);\n};\n\nconst Tab = factory(rippleFactory({ centered: false }));\nexport default themr(TABS)(Tab);\nexport { factory as tabFactory };\nexport { Tab };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/tabs/Tabs.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { TABS } from '../identifiers';\nimport InjectFontIcon from '../font_icon/FontIcon';\nimport isComponentOfType from '../utils/is-component-of-type';\nimport InjectTab from './Tab';\nimport InjectTabContent from './TabContent';\n\nconst factory = (Tab, TabContent, FontIcon) => {\n  const isTab = child => isComponentOfType(Tab, child);\n  const isTabContent = child => isComponentOfType(TabContent, child);\n\n  class Tabs extends Component {\n    static propTypes = {\n      children: PropTypes.node,\n      className: PropTypes.string,\n      disableAnimatedBottomBorder: PropTypes.bool,\n      fixed: PropTypes.bool,\n      hideMode: PropTypes.oneOf(['display', 'unmounted']),\n      index: PropTypes.number,\n      inverse: PropTypes.bool,\n      onChange: PropTypes.func,\n      theme: PropTypes.shape({\n        arrow: PropTypes.string,\n        arrowContainer: PropTypes.string,\n        disableAnimation: PropTypes.string,\n        fixed: PropTypes.string,\n        inverse: PropTypes.string,\n        navigation: PropTypes.string,\n        navigationContainer: PropTypes.string,\n        pointer: PropTypes.string,\n        tabs: PropTypes.string,\n      }),\n    };\n\n    static defaultProps = {\n      index: 0,\n      fixed: false,\n      inverse: false,\n      hideMode: 'unmounted',\n    };\n\n    state = {\n      pointer: {},\n      arrows: {},\n    };\n\n    componentDidMount() {\n      window.addEventListener('resize', this.handleResize);\n      this.handleResize();\n    }\n\n    componentDidUpdate(prevProps) {\n      const { index, children } = this.props;\n      const { index: prevIndex, children: prevChildren } = prevProps;\n\n      if (index !== prevIndex || children !== prevChildren) {\n        this.updatePointer(index);\n      }\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n      clearTimeout(this.resizeTimeout);\n    }\n\n    handleHeaderClick = (idx) => {\n      if (this.props.onChange) {\n        this.props.onChange(idx);\n      }\n    };\n\n    handleResize = () => {\n      if (this.resizeTimeout) clearTimeout(this.resizeTimeout);\n      this.resizeTimeout = setTimeout(() => {\n        this.updatePointer(this.props.index);\n        this.updateArrows();\n      }, 100);\n    };\n\n    updatePointer = (idx) => {\n      if (this.navigationNode && this.navigationNode.children[idx]) {\n        requestAnimationFrame(() => {\n          const nav = this.navigationNode.getBoundingClientRect();\n          const label = this.navigationNode.children[idx].getBoundingClientRect();\n          const scrollLeft = this.navigationNode.scrollLeft;\n          this.setState({\n            pointer: {\n              top: `${nav.height}px`,\n              left: `${(label.left + scrollLeft) - nav.left}px`,\n              width: `${label.width}px`,\n            },\n          });\n        });\n      }\n    }\n\n    updateArrows = () => {\n      const idx = this.navigationNode.children.length - 2;\n\n      if (idx >= 0) {\n        const scrollLeft = this.navigationNode.scrollLeft;\n        const nav = this.navigationNode.getBoundingClientRect();\n        const lastLabel = this.navigationNode.children[idx].getBoundingClientRect();\n\n        this.setState({\n          arrows: {\n            left: scrollLeft > 0,\n            right: nav.right < (lastLabel.right - 5),\n          },\n        });\n      }\n    }\n\n    scrollNavigation = (factor) => {\n      const oldScrollLeft = this.navigationNode.scrollLeft;\n      this.navigationNode.scrollLeft += factor * this.navigationNode.clientWidth;\n      if (this.navigationNode.scrollLeft !== oldScrollLeft) {\n        this.updateArrows();\n      }\n    }\n\n    scrollRight = () =>\n      this.scrollNavigation(-1);\n\n    scrollLeft = () =>\n      this.scrollNavigation(+1);\n\n    parseChildren() {\n      const headers = [];\n      const contents = [];\n\n      React.Children.forEach(this.props.children, (item) => {\n        if (isTab(item)) {\n          headers.push(item);\n          if (item.props.children) {\n            contents.push(\n              <TabContent theme={this.props.theme}>\n                {item.props.children}\n              </TabContent>,\n            );\n          }\n        } else if (isTabContent(item)) {\n          contents.push(item);\n        }\n      });\n\n      return { headers, contents };\n    }\n\n    renderHeaders(headers) {\n      return headers.map((item, idx) => React.cloneElement(item, {\n        children: null,\n        key: idx, // eslint-disable-line\n        index: idx,\n        theme: this.props.theme,\n        active: this.props.index === idx,\n        onClick: (event, index) => {\n          this.handleHeaderClick(index);\n          if (item.props.onClick) item.props.onClick(event);\n        },\n      }));\n    }\n\n    renderContents(contents) {\n      const contentElements = contents.map((item, idx) => React.cloneElement(item, {\n        key: idx, // eslint-disable-line\n        theme: this.props.theme,\n        active: this.props.index === idx,\n        hidden: this.props.index !== idx && this.props.hideMode === 'display',\n        tabIndex: idx,\n      }));\n\n      return this.props.hideMode === 'display'\n        ? contentElements\n        : contentElements.filter((item, idx) => (idx === this.props.index));\n    }\n\n    render() {\n      const { className, disableAnimatedBottomBorder, theme, fixed, inverse } = this.props;\n      const { left: hasLeftArrow, right: hasRightArrow } = this.state.arrows;\n      const { headers, contents } = this.parseChildren();\n      const classNamePointer = classnames(theme.pointer, {\n        [theme.disableAnimation]: disableAnimatedBottomBorder,\n      });\n\n      const classNames = classnames(theme.tabs, {\n        [theme.fixed]: fixed,\n        [theme.inverse]: inverse,\n      }, className);\n\n      return (\n        <div data-react-toolbox=\"tabs\" className={classNames}>\n          <div className={theme.navigationContainer}>\n            {hasLeftArrow && <div className={theme.arrowContainer} onClick={this.scrollRight}>\n              <FontIcon className={theme.arrow} value=\"keyboard_arrow_left\" />\n            </div>}\n            <nav className={theme.navigation} ref={(node) => { this.navigationNode = node; }}>\n              {this.renderHeaders(headers)}\n              <span className={classNamePointer} style={this.state.pointer} />\n            </nav>\n            {hasRightArrow && <div className={theme.arrowContainer} onClick={this.scrollLeft}>\n              <FontIcon className={theme.arrow} value=\"keyboard_arrow_right\" />\n            </div>}\n          </div>\n          {this.renderContents(contents)}\n        </div>\n      );\n    }\n  }\n\n  return Tabs;\n};\n\nconst Tabs = factory(InjectTab, InjectTabContent, InjectFontIcon);\nexport default themr(TABS)(Tabs);\nexport { factory as tabsFactory };\nexport { Tabs };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/time_picker/ClockFace.js":"/* eslint-disable no-mixed-operators */\nimport React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\n\nclass Face extends Component {\n  static propTypes = {\n    active: PropTypes.number,\n    numbers: PropTypes.arrayOf(PropTypes.number),\n    radius: PropTypes.number,\n    spacing: PropTypes.number,\n    theme: PropTypes.shape({\n      active: PropTypes.string,\n      face: PropTypes.string,\n      number: PropTypes.string,\n    }),\n    twoDigits: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    active: null,\n    numbers: [],\n    radius: 0,\n    twoDigits: false,\n  };\n\n  numberStyle(rad, num) {\n    return {\n      position: 'absolute',\n      left: (rad + rad * Math.sin(360 * (Math.PI / 180) / 12 * (num - 1)) + this.props.spacing),\n      top: (rad - rad * Math.cos(360 * (Math.PI / 180) / 12 * (num - 1)) + this.props.spacing),\n    };\n  }\n\n  faceStyle() {\n    return {\n      height: this.props.radius * 2,\n      width: this.props.radius * 2,\n    };\n  }\n\n  renderNumber = (number, idx) => {\n    const { active, radius, spacing, theme, twoDigits } = this.props;\n    return (\n      <span\n        className={classnames(theme.number, { [theme.active]: number === active })}\n        style={this.numberStyle(radius - spacing, idx + 1)}\n        key={number}\n      >\n        {twoDigits ? (`0${number}`).slice(-2) : number}\n      </span>\n    );\n  }\n\n  render() {\n    const { numbers, onTouchStart, onMouseDown, theme } = this.props; // eslint-disable-line\n    return (\n      <div\n        className={theme.face}\n        onTouchStart={onTouchStart}\n        onMouseDown={onMouseDown}\n        style={this.faceStyle()}\n      >\n        {numbers.map(this.renderNumber)}\n      </div>\n    );\n  }\n}\n\nexport default Face;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/time_picker/ClockHand.js":"import React, { Component, PropTypes } from 'react';\nimport { angle360FromPositions } from '../utils/utils';\nimport events from '../utils/events';\nimport prefixer from '../utils/prefixer';\n\nclass Hand extends Component {\n  static propTypes = {\n    angle: PropTypes.number,\n    className: PropTypes.string,\n    length: PropTypes.number,\n    onMove: PropTypes.func,\n    onMoved: PropTypes.func,\n    origin: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n    }),\n    step: PropTypes.number,\n    theme: PropTypes.shape({\n      hand: PropTypes.string,\n      knob: PropTypes.string,\n    }),\n  };\n\n  static defaultProps = {\n    className: '',\n    angle: 0,\n    length: 0,\n    origin: {},\n  };\n\n  state = {\n    knobWidth: 0,\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ knobWidth: this.knobNode.offsetWidth });\n    });\n  }\n\n  componentWillUnmount() {\n    events.removeEventsFromDocument(this.getMouseEventMap());\n    events.removeEventsFromDocument(this.getTouchEventMap());\n  }\n\n  getMouseEventMap() {\n    return {\n      mousemove: this.handleMouseMove,\n      mouseup: this.handleMouseUp,\n    };\n  }\n\n  getTouchEventMap() {\n    return {\n      touchmove: this.handleTouchMove,\n      touchend: this.handleTouchEnd,\n    };\n  }\n\n  getPositionRadius(position) {\n    const x = this.props.origin.x - position.x;\n    const y = this.props.origin.y - position.y;\n    return Math.sqrt((x * x) + (y * y));\n  }\n\n  mouseStart(event) {\n    events.addEventsToDocument(this.getMouseEventMap());\n    this.move(events.getMousePosition(event));\n  }\n\n  touchStart(event) {\n    events.addEventsToDocument(this.getTouchEventMap());\n    this.move(events.getTouchPosition(event));\n    events.pauseEvent(event);\n  }\n\n  handleMouseMove = (event) => {\n    this.move(events.getMousePosition(event));\n  };\n\n  handleTouchMove = (event) => {\n    this.move(events.getTouchPosition(event));\n  };\n\n  handleMouseUp = () => {\n    this.end(this.getMouseEventMap());\n  };\n\n  handleTouchEnd = () => {\n    this.end(this.getTouchEventMap());\n  };\n\n  trimAngleToValue(angle) {\n    return this.props.step * Math.round(angle / this.props.step);\n  }\n\n  positionToAngle(position) {\n    return angle360FromPositions(this.props.origin.x, this.props.origin.y, position.x, position.y);\n  }\n\n  end(evts) {\n    if (this.props.onMoved) this.props.onMoved();\n    events.removeEventsFromDocument(evts);\n  }\n\n  move(position) {\n    const degrees = this.trimAngleToValue(this.positionToAngle(position));\n    const radius = this.getPositionRadius(position);\n    if (this.props.onMove) this.props.onMove(degrees === 360 ? 0 : degrees, radius);\n  }\n\n  render() {\n    const { theme } = this.props;\n    const className = `${theme.hand} ${this.props.className}`;\n    const handStyle = prefixer({\n      height: this.props.length - (this.state.knobWidth / 2),\n      transform: `rotate(${this.props.angle}deg)`,\n    });\n\n    return (\n      <div className={className} style={handStyle}>\n        <div ref={(node) => { this.knobNode = node; }} className={theme.knob} />\n      </div>\n    );\n  }\n}\n\nexport default Hand;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/time_picker/ClockHours.js":"import React, { Component, PropTypes } from 'react';\nimport { range } from '../utils/utils';\nimport Hand from './ClockHand';\nimport Face from './ClockFace';\n\nconst outerNumbers = [0, ...range(13, 24)];\nconst innerNumbers = [12, ...range(1, 12)];\nconst innerSpacing = 1.7;\nconst step = 360 / 12;\n\nclass Hours extends Component {\n  static propTypes = {\n    center: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n    }),\n    format: PropTypes.oneOf(['24hr', 'ampm']),\n    onChange: PropTypes.func,\n    onHandMoved: PropTypes.func,\n    radius: PropTypes.number,\n    selected: PropTypes.number,\n    spacing: PropTypes.number,\n    theme: PropTypes.object, // eslint-disable-line\n  };\n\n  state = {\n    inner: this.props.format === '24hr' && this.props.selected > 0 && this.props.selected <= 12,\n  };\n\n  handleHandMove = (degrees, radius) => {\n    const currentInner = radius < this.props.radius - (this.props.spacing * innerSpacing);\n    if (this.props.format === '24hr' && this.state.inner !== currentInner) {\n      this.setState({ inner: currentInner }, () => {\n        this.props.onChange(this.valueFromDegrees(degrees));\n      });\n    } else {\n      this.props.onChange(this.valueFromDegrees(degrees));\n    }\n  };\n\n  handleMouseDown = (event) => {\n    this.handNode.mouseStart(event);\n  };\n\n  handleTouchStart = (event) => {\n    this.handNode.touchStart(event);\n  };\n\n  valueFromDegrees(degrees) {\n    if (this.props.format === 'ampm' || (this.props.format === '24hr' && this.state.inner)) {\n      return innerNumbers[degrees / step];\n    }\n    return outerNumbers[degrees / step];\n  }\n\n  renderInnerFace(innerRadius) {\n    if (this.props.format !== '24hr') return undefined;\n    return (\n      <Face\n        onTouchStart={this.handleTouchStart}\n        onMouseDown={this.handleMouseDown}\n        numbers={innerNumbers}\n        spacing={this.props.spacing}\n        radius={innerRadius}\n        theme={this.props.theme}\n        active={this.props.selected}\n      />\n    );\n  }\n\n  render() {\n    const { format, selected, radius, spacing, center, onHandMoved } = this.props;\n    const is24hr = format === '24hr';\n\n    return (\n      <div>\n        <Face\n          onTouchStart={this.handleTouchStart}\n          onMouseDown={this.handleMouseDown}\n          numbers={is24hr ? outerNumbers : innerNumbers}\n          spacing={spacing}\n          radius={radius}\n          twoDigits={is24hr}\n          active={is24hr ? selected : (selected % 12 || 12)}\n          theme={this.props.theme}\n        />\n        {this.renderInnerFace(radius - (spacing * innerSpacing))}\n        <Hand\n          ref={(node) => { this.handNode = node; }}\n          angle={selected * step}\n          length={(this.state.inner ? radius - (spacing * innerSpacing) : radius) - spacing}\n          onMove={this.handleHandMove}\n          theme={this.props.theme}\n          onMoved={onHandMoved}\n          origin={center}\n          step={step}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Hours;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/time_picker/Clock.js":"import React, { Component, PropTypes } from 'react';\nimport CssTransitionGroup from 'react-addons-css-transition-group';\nimport { getAnimationModule } from '../utils/utils';\nimport time from '../utils/time';\nimport Hours from './ClockHours';\nimport Minutes from './ClockMinutes';\n\nclass Clock extends Component {\n  static propTypes = {\n    display: PropTypes.oneOf(['hours', 'minutes']),\n    format: PropTypes.oneOf(['24hr', 'ampm']),\n    onChange: PropTypes.func,\n    onHandMoved: PropTypes.func,\n    theme: PropTypes.shape({\n      clock: PropTypes.string,\n      clockWrapper: PropTypes.string,\n      placeholder: PropTypes.string,\n    }),\n    time: PropTypes.instanceOf(Date),\n  };\n\n  static defaultProps = {\n    className: '',\n    display: 'hours',\n    format: '24hr',\n    time: new Date(),\n  };\n\n  state = {\n    center: { x: null, y: null },\n    radius: 0,\n  };\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleCalculateShape);\n    setTimeout(() => {\n      this.handleCalculateShape();\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleCalculateShape);\n  }\n\n  handleHourChange = (hours) => {\n    if (this.props.time.getHours() !== hours) {\n      this.props.onChange(time.setHours(this.props.time, this.adaptHourToFormat(hours)));\n    }\n  };\n\n  handleMinuteChange = (minutes) => {\n    if (this.props.time.getMinutes() !== minutes) {\n      this.props.onChange(time.setMinutes(this.props.time, minutes));\n    }\n  };\n\n  handleCalculateShape = () => {\n    const { top, left, width } = this.placeholderNode.getBoundingClientRect();\n    this.setState({\n      center: {\n        x: left + ((width / 2) - window.pageXOffset),\n        y: top + ((width / 2) - window.pageXOffset),\n      },\n      radius: width / 2,\n    });\n  };\n\n  adaptHourToFormat(hour) {\n    if (this.props.format === 'ampm') {\n      if (time.getTimeMode(this.props.time) === 'pm') {\n        return hour < 12 ? hour + 12 : hour;\n      }\n      return hour === 12 ? 0 : hour;\n    }\n    return hour;\n  }\n\n  renderHours() {\n    return (\n      <Hours\n        center={this.state.center}\n        format={this.props.format}\n        onChange={this.handleHourChange}\n        radius={this.state.radius}\n        selected={this.props.time.getHours()}\n        spacing={this.state.radius * 0.18}\n        onHandMoved={this.props.onHandMoved}\n        theme={this.props.theme}\n      />\n    );\n  }\n\n  renderMinutes() {\n    return (\n      <Minutes\n        center={this.state.center}\n        onChange={this.handleMinuteChange}\n        radius={this.state.radius}\n        selected={this.props.time.getMinutes()}\n        spacing={this.state.radius * 0.18}\n        onHandMoved={this.props.onHandMoved}\n        theme={this.props.theme}\n      />\n    );\n  }\n\n  render() {\n    const { theme } = this.props;\n    const animation = this.state.display === 'hours' ? 'zoomOut' : 'zoomIn';\n    const animationModule = getAnimationModule(animation, theme);\n    return (\n      <div data-react-toolbox=\"clock\" className={theme.clock}>\n        <div\n          className={theme.placeholder}\n          style={{ height: this.state.radius * 2 }}\n          ref={(node) => { this.placeholderNode = node; }}\n        >\n          <CssTransitionGroup\n            transitionName={animationModule}\n            transitionEnterTimeout={500}\n            transitionLeaveTimeout={500}\n          >\n            <div\n              key={this.props.display}\n              className={theme.clockWrapper}\n              style={{ height: this.state.radius * 2 }}\n            >\n              {this.props.display === 'hours' ? this.renderHours() : null}\n              {this.props.display === 'minutes' ? this.renderMinutes() : null}\n            </div>\n          </CssTransitionGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/time_picker/ClockMinutes.js":"import React, { Component, PropTypes } from 'react';\nimport { range } from '../utils/utils';\nimport Hand from './ClockHand';\nimport Face from './ClockFace';\n\nconst minutes = range(0, 60, 5);\nconst step = 360 / 60;\n\nclass Minutes extends Component {\n  static propTypes = {\n    center: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n    }),\n    onChange: PropTypes.func,\n    radius: PropTypes.number,\n    selected: PropTypes.number,\n    spacing: PropTypes.number,\n    theme: PropTypes.shape({\n      small: PropTypes.string,\n    }),\n  };\n\n  static defaultProps = {\n    selected: 0,\n    onChange: null,\n  };\n\n  handleHandMove = (degrees) => {\n    this.props.onChange(degrees / step);\n  };\n\n  handleMouseDown = (event) => {\n    this.handNode.mouseStart(event);\n  };\n\n  handleTouchStart = (event) => {\n    this.handNode.touchStart(event);\n  };\n\n  render() {\n    return (\n      <div>\n        <Face\n          onTouchStart={this.handleTouchStart}\n          onMouseDown={this.handleMouseDown}\n          numbers={minutes}\n          spacing={this.props.spacing}\n          radius={this.props.radius}\n          active={this.props.selected}\n          theme={this.props.theme}\n          twoDigits\n        />\n        <Hand\n          ref={(node) => { this.handNode = node; }}\n          className={minutes.indexOf(this.props.selected) === -1 ? this.props.theme.small : ''}\n          angle={this.props.selected * step}\n          length={this.props.radius - this.props.spacing}\n          onMove={this.handleHandMove}\n          origin={this.props.center}\n          theme={this.props.theme}\n          step={step}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Minutes;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/time_picker/index.js":"import { themr } from 'react-css-themr';\nimport { TIME_PICKER } from '../identifiers';\nimport { timePickerFactory } from './TimePicker';\nimport timePickerDialogFactory from './TimePickerDialog';\nimport { Dialog } from '../dialog';\nimport { Input } from '../input';\nimport theme from './theme.css';\n\nconst TimePickerDialog = timePickerDialogFactory(Dialog);\nconst ThemedTimePicker = themr(TIME_PICKER, theme)(timePickerFactory(TimePickerDialog, Input));\nexport default ThemedTimePicker;\nexport { ThemedTimePicker as TimePicker };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/time_picker/TimePickerDialog.js":"import React, { Component, PropTypes } from 'react';\nimport cn from 'classnames';\nimport time from '../utils/time';\nimport Clock from './Clock';\n\nconst factory = (Dialog) => {\n  class TimePickerDialog extends Component {\n    static propTypes = {\n      active: PropTypes.bool,\n      cancelLabel: PropTypes.string,\n      className: PropTypes.string,\n      format: PropTypes.oneOf(['24hr', 'ampm']),\n      name: PropTypes.string,\n      okLabel: PropTypes.string,\n      onDismiss: PropTypes.func,\n      onEscKeyDown: PropTypes.func,\n      onOverlayClick: PropTypes.func,\n      onSelect: PropTypes.func,\n      theme: PropTypes.shape({\n        am: PropTypes.string,\n        amFormat: PropTypes.string,\n        ampm: PropTypes.string,\n        button: PropTypes.string,\n        dialog: PropTypes.string,\n        header: PropTypes.string,\n        hours: PropTypes.string,\n        hoursDisplay: PropTypes.string,\n        minutes: PropTypes.string,\n        minutesDisplay: PropTypes.string,\n        pm: PropTypes.string,\n        pmFormat: PropTypes.string,\n        separator: PropTypes.string,\n      }),\n      value: PropTypes.instanceOf(Date),\n    };\n\n    static defaultProps = {\n      active: false,\n      cancelLabel: 'Cancel',\n      format: '24hr',\n      okLabel: 'Ok',\n      value: new Date(),\n    };\n\n    state = {\n      display: 'hours',\n      displayTime: new Date(this.props.value.getTime()),\n    };\n\n    componentWillReceiveProps(nextProps) {\n      if (nextProps.value.getTime() !== this.state.displayTime.getTime()) {\n        this.setState({ displayTime: new Date(nextProps.value.getTime()) });\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!prevProps.active && this.props.active) {\n        setTimeout(this.clockNode.handleCalculateShape, 1000);\n      }\n    }\n\n    handleClockChange = (value) => {\n      this.setState({ displayTime: value });\n    };\n\n    handleSelect = (event) => {\n      this.props.onSelect(this.state.displayTime, event);\n    };\n\n    toggleTimeMode = () => {\n      this.setState({ displayTime: time.toggleTimeMode(this.state.displayTime) });\n    };\n\n    handleHandMoved = () => {\n      if (this.state.display === 'hours') this.setState({ display: 'minutes' });\n    };\n\n    switchDisplay = (event) => {\n      this.setState({ display: event.target.id });\n    };\n\n    actions = [{\n      label: this.props.cancelLabel,\n      className: this.props.theme.button,\n      onClick: this.props.onDismiss,\n    }, {\n      label: this.props.okLabel,\n      className: this.props.theme.button,\n      name: this.props.name,\n      onClick: this.handleSelect,\n    }];\n\n    formatHours() {\n      if (this.props.format === 'ampm') {\n        return this.state.displayTime.getHours() % 12 || 12;\n      }\n      return this.state.displayTime.getHours();\n    }\n\n    renderAMPMLabels() {\n      const { theme } = this.props;\n      if (this.props.format !== 'ampm') return undefined;\n      return (\n        <div className={theme.ampm}>\n          <span className={theme.am} onClick={this.toggleTimeMode}>AM</span>\n          <span className={theme.pm} onClick={this.toggleTimeMode}>PM</span>\n        </div>\n      );\n    }\n\n    render() {\n      const { theme } = this.props;\n      const display = `${this.state.display}Display`;\n      const format = `${time.getTimeMode(this.state.displayTime)}Format`;\n      const className = cn([theme.dialog, theme[display], theme[format]], this.props.className);\n      return (\n        <Dialog\n          actions={this.actions}\n          active={this.props.active}\n          className={className}\n          onEscKeyDown={this.props.onEscKeyDown}\n          onOverlayClick={this.props.onOverlayClick}\n        >\n          <header className={theme.header}>\n            <span id=\"hours\" className={theme.hours} onClick={this.switchDisplay}>\n              {(`0${this.formatHours()}`).slice(-2)}\n            </span>\n            <span className={theme.separator}>:</span>\n            <span id=\"minutes\" className={theme.minutes} onClick={this.switchDisplay}>\n              {(`0${this.state.displayTime.getMinutes()}`).slice(-2)}\n            </span>\n            {this.renderAMPMLabels()}\n          </header>\n          <Clock\n            ref={(node) => { this.clockNode = node; }}\n            display={this.state.display}\n            format={this.props.format}\n            onChange={this.handleClockChange}\n            onHandMoved={this.handleHandMoved}\n            theme={this.props.theme}\n            time={this.state.displayTime}\n          />\n        </Dialog>\n      );\n    }\n  }\n\n  return TimePickerDialog;\n};\n\nexport default factory;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/time_picker/TimePicker.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport { TIME_PICKER } from '../identifiers';\nimport events from '../utils/events';\nimport time from '../utils/time';\nimport InjectDialog from '../dialog/Dialog';\nimport InjectInput from '../input/Input';\nimport timePickerDialogFactory from './TimePickerDialog';\n\nconst factory = (TimePickerDialog, Input) => {\n  class TimePicker extends Component {\n    static propTypes = {\n      active: PropTypes.bool,\n      cancelLabel: PropTypes.string,\n      className: PropTypes.string,\n      error: PropTypes.string,\n      format: PropTypes.oneOf(['24hr', 'ampm']),\n      inputClassName: PropTypes.string,\n      label: PropTypes.string,\n      name: PropTypes.string,\n      okLabel: PropTypes.string,\n      onChange: PropTypes.func,\n      onClick: PropTypes.func,\n      onDismiss: PropTypes.func,\n      onEscKeyDown: PropTypes.func,\n      onKeyPress: PropTypes.func,\n      onOverlayClick: PropTypes.func,\n      readonly: PropTypes.bool,\n      theme: PropTypes.shape({\n        container: PropTypes.string,\n        input: PropTypes.string,\n      }),\n      value: PropTypes.instanceOf(Date),\n    };\n\n    static defaultProps = {\n      active: false,\n      className: '',\n      format: '24hr',\n    };\n\n    state = {\n      active: this.props.active,\n    };\n\n    componentWillReceiveProps(nextProps) {\n      if (nextProps.active !== this.props.active && this.state.active !== nextProps.active) {\n        this.setState({ active: nextProps.active });\n      }\n    }\n\n    handleDismiss = () => {\n      this.setState({ active: false });\n      if (this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n    };\n\n    handleInputFocus = (event) => {\n      events.pauseEvent(event);\n      this.setState({ active: true });\n    };\n\n    handleInputBlur = (event) => {\n      events.pauseEvent(event);\n      this.setState({ active: false });\n    };\n\n    handleInputClick = (event) => {\n      events.pauseEvent(event);\n      this.setState({ active: true });\n      if (this.props.onClick) this.props.onClick(event);\n    };\n\n    handleInputKeyPress = (event) => {\n      if (event.charCode === 13) {\n        events.pauseEvent(event);\n        this.setState({ active: true });\n      }\n      if (this.props.onKeyPress) this.props.onKeyPress(event);\n    };\n\n    handleSelect = (value, event) => {\n      if (this.props.onChange) this.props.onChange(value, event);\n      this.setState({ active: false });\n    };\n\n    render() {\n      const {\n        active, onDismiss, // eslint-disable-line\n        cancelLabel, format, inputClassName, okLabel, onEscKeyDown, onOverlayClick,\n        readonly, value, ...others\n      } = this.props;\n      const formattedTime = value ? time.formatTime(value, format) : '';\n      return (\n        <div data-react-toolbox=\"time-picker\" className={this.props.theme.container}>\n          <Input\n            {...others}\n            className={classnames(this.props.theme.input, { [inputClassName]: inputClassName })}\n            disabled={readonly}\n            error={this.props.error}\n            label={this.props.label}\n            name={this.props.name}\n            onKeyPress={this.handleInputKeyPress}\n            onClick={this.handleInputClick}\n            readOnly\n            type=\"text\"\n            value={formattedTime}\n          />\n          <TimePickerDialog\n            active={this.state.active}\n            cancelLabel={cancelLabel}\n            className={this.props.className}\n            format={format}\n            name={this.props.name}\n            okLabel={okLabel}\n            onDismiss={this.handleDismiss}\n            onEscKeyDown={onEscKeyDown}\n            onOverlayClick={onOverlayClick}\n            onSelect={this.handleSelect}\n            theme={this.props.theme}\n            value={this.props.value}\n          />\n        </div>\n      );\n    }\n  }\n\n  return TimePicker;\n};\n\nconst TimePickerDialog = timePickerDialogFactory(InjectDialog);\nconst TimePicker = factory(TimePickerDialog, InjectInput);\nexport default themr(TIME_PICKER)(TimePicker);\nexport { factory as timePickerFactory };\nexport { TimePicker };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/tooltip/index.js":"import tooltipFactory from './Tooltip';\nimport theme from './theme.css';\n\nconst themedTooltipFactory = options => tooltipFactory({ ...options, theme });\nexport default tooltipFactory({ theme });\nexport { themedTooltipFactory as tooltipFactory };\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/tooltip/Tooltip.js":"import React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { themr } from 'react-css-themr';\nimport Portal from '../hoc/Portal';\nimport { getViewport } from '../utils/utils';\nimport { TOOLTIP } from '../identifiers';\nimport events from '../utils/events';\n\nconst POSITION = {\n  BOTTOM: 'bottom',\n  HORIZONTAL: 'horizontal',\n  LEFT: 'left',\n  RIGHT: 'right',\n  TOP: 'top',\n  VERTICAL: 'vertical',\n};\n\nconst defaults = {\n  className: '',\n  delay: 0,\n  hideOnClick: true,\n  passthrough: true,\n  showOnClick: false,\n  position: POSITION.VERTICAL,\n  theme: {},\n};\n\nconst tooltipFactory = (options = {}) => {\n  const {\n    className: defaultClassName,\n    delay: defaultDelay,\n    hideOnClick: defaultHideOnClick,\n    showOnClick: defaultShowOnClick,\n    passthrough: defaultPassthrough,\n    position: defaultPosition,\n    theme: defaultTheme,\n  } = { ...defaults, ...options };\n\n  return (ComposedComponent) => {\n    class TooltippedComponent extends Component {\n      static propTypes = {\n        children: PropTypes.node,\n        className: PropTypes.string,\n        onClick: PropTypes.func,\n        onMouseEnter: PropTypes.func,\n        onMouseLeave: PropTypes.func,\n        theme: PropTypes.shape({\n          tooltip: PropTypes.string,\n          tooltipActive: PropTypes.string,\n          tooltipWrapper: PropTypes.string,\n        }),\n        tooltip: PropTypes.oneOfType([\n          PropTypes.string,\n          PropTypes.node,\n        ]),\n        tooltipDelay: PropTypes.number,\n        tooltipHideOnClick: PropTypes.bool,\n        tooltipPosition: PropTypes.oneOf(Object.keys(POSITION).map(key => POSITION[key])),\n        tooltipShowOnClick: PropTypes.bool,\n      };\n\n      static defaultProps = {\n        className: defaultClassName,\n        tooltipDelay: defaultDelay,\n        tooltipHideOnClick: defaultHideOnClick,\n        tooltipPosition: defaultPosition,\n        tooltipShowOnClick: defaultShowOnClick,\n      };\n\n      state = {\n        active: false,\n        position: this.props.tooltipPosition,\n        visible: false,\n      };\n\n      componentWillUnmount() {\n        if (this.tooltipNode) {\n          events.removeEventListenerOnTransitionEnded(this.tooltipNode, this.onTransformEnd);\n        }\n        if (this.timeout) clearTimeout(this.timeout);\n      }\n\n      onTransformEnd = (e) => {\n        if (e.propertyName === 'transform') {\n          events.removeEventListenerOnTransitionEnded(this.tooltipNode, this.onTransformEnd);\n          this.setState({ visible: false });\n        }\n      };\n\n      getPosition(element) {\n        const { tooltipPosition } = this.props;\n        if (tooltipPosition === POSITION.HORIZONTAL) {\n          const origin = element.getBoundingClientRect();\n          const { width: ww } = getViewport();\n          const toRight = origin.left < ((ww / 2) - (origin.width / 2));\n          return toRight ? POSITION.RIGHT : POSITION.LEFT;\n        } else if (tooltipPosition === POSITION.VERTICAL) {\n          const origin = element.getBoundingClientRect();\n          const { height: wh } = getViewport();\n          const toBottom = origin.top < ((wh / 2) - (origin.height / 2));\n          return toBottom ? POSITION.BOTTOM : POSITION.TOP;\n        }\n        return tooltipPosition;\n      }\n\n      activate({ top, left, position }) {\n        if (this.timeout) clearTimeout(this.timeout);\n        this.setState({ visible: true, position });\n        this.timeout = setTimeout(() => {\n          this.setState({ active: true, top, left });\n        }, this.props.tooltipDelay);\n      }\n\n      deactivate() {\n        if (this.timeout) clearTimeout(this.timeout);\n        if (this.state.active) {\n          events.addEventListenerOnTransitionEnded(this.tooltipNode, this.onTransformEnd);\n          this.setState({ active: false });\n        } else if (this.state.visible) {\n          this.setState({ visible: false });\n        }\n      }\n\n      calculatePosition(element) {\n        const position = this.getPosition(element);\n        const { top, left, height, width } = element.getBoundingClientRect();\n        const xOffset = window.scrollX || window.pageXOffset;\n        const yOffset = window.scrollY || window.pageYOffset;\n        if (position === POSITION.BOTTOM) {\n          return {\n            top: top + height + yOffset,\n            left: left + (width / 2) + xOffset,\n            position,\n          };\n        } else if (position === POSITION.TOP) {\n          return {\n            top: top + yOffset,\n            left: left + (width / 2) + xOffset,\n            position,\n          };\n        } else if (position === POSITION.LEFT) {\n          return {\n            top: top + (height / 2) + yOffset,\n            left: left + xOffset,\n            position,\n          };\n        } else if (position === POSITION.RIGHT) {\n          return {\n            top: top + (height / 2) + yOffset,\n            left: left + width + xOffset,\n            position,\n          };\n        }\n        return undefined;\n      }\n\n      handleMouseEnter = (event) => {\n        this.activate(this.calculatePosition(event.currentTarget));\n        if (this.props.onMouseEnter) this.props.onMouseEnter(event);\n      };\n\n      handleMouseLeave = (event) => {\n        this.deactivate();\n        if (this.props.onMouseLeave) this.props.onMouseLeave(event);\n      };\n\n      handleClick = (event) => {\n        if (this.props.tooltipHideOnClick && this.state.active) {\n          this.deactivate();\n        }\n\n        if (this.props.tooltipShowOnClick && !this.state.active) {\n          this.activate(this.calculatePosition(event.currentTarget));\n        }\n\n        if (this.props.onClick) this.props.onClick(event);\n      };\n\n      render() {\n        const { active, left, top, position, visible } = this.state;\n        const positionClass = `tooltip${position.charAt(0).toUpperCase() + position.slice(1)}`;\n        const {\n          children,\n          className,\n          theme,\n          onClick,            // eslint-disable-line no-unused-vars\n          onMouseEnter,       // eslint-disable-line no-unused-vars\n          onMouseLeave,       // eslint-disable-line no-unused-vars\n          tooltip,\n          tooltipDelay,       // eslint-disable-line no-unused-vars\n          tooltipHideOnClick, // eslint-disable-line no-unused-vars\n          tooltipPosition,    // eslint-disable-line no-unused-vars\n          tooltipShowOnClick, // eslint-disable-line no-unused-vars\n          ...other\n        } = this.props;\n\n        const _className = classnames(theme.tooltip, {\n          [theme.tooltipActive]: active,\n          [theme[positionClass]]: theme[positionClass],\n        });\n\n        const childProps = {\n          ...other,\n          className,\n          onClick: this.handleClick,\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n        };\n\n        const shouldPass = typeof ComposedComponent !== 'string' && defaultPassthrough;\n        const finalProps = shouldPass ? { ...childProps, theme } : childProps;\n\n        return React.createElement(ComposedComponent, finalProps, children,\n          visible && (\n            <Portal>\n              <span\n                ref={(node) => { this.tooltipNode = node; }}\n                className={_className}\n                data-react-toolbox=\"tooltip\"\n                style={{ top, left }}\n              >\n                <span className={theme.tooltipInner}>{tooltip}</span>\n              </span>\n            </Portal>\n          ),\n        );\n      }\n    }\n\n    return themr(TOOLTIP, defaultTheme)(TooltippedComponent);\n  };\n};\n\nexport default tooltipFactory;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/breakpoints.js":"export default {\n  xxs: 480,\n  xs: 600,\n  smTablet: 720,\n  sm: 840,\n  md: 960,\n  lgTablet: 1024,\n  lg: 1280,\n  xl: 1440,\n  xxl: 1600,\n  xxxl: 1920,\n};\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/events.js":"import keys from 'ramda/src/keys';\n\nexport default {\n  getMousePosition(event) {\n    return {\n      x: event.pageX - (window.scrollX || window.pageXOffset),\n      y: event.pageY - (window.scrollY || window.pageYOffset),\n    };\n  },\n\n  getTouchPosition(event) {\n    return {\n      x: event.touches[0].pageX - (window.scrollX || window.pageXOffset),\n      y: event.touches[0].pageY - (window.scrollY || window.pageYOffset),\n    };\n  },\n\n  pauseEvent(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  },\n\n  addEventsToDocument(eventMap) {\n    Object.keys(eventMap).forEach((key) => {\n      document.addEventListener(key, eventMap[key], false);\n    });\n  },\n\n  removeEventsFromDocument(eventMap) {\n    Object.keys(eventMap).forEach((key) => {\n      document.removeEventListener(key, eventMap[key], false);\n    });\n  },\n\n  targetIsDescendant(event, parent) {\n    let node = event.target;\n    while (node !== null) {\n      if (node === parent) return true;\n      node = node.parentNode;\n    }\n    return false;\n  },\n\n  addEventListenerOnTransitionEnded(element, fn) {\n    const eventName = transitionEventNamesFor(element);\n    if (!eventName) return false;\n    element.addEventListener(eventName, fn);\n    return true;\n  },\n\n  removeEventListenerOnTransitionEnded(element, fn) {\n    const eventName = transitionEventNamesFor(element);\n    if (!eventName) return false;\n    element.removeEventListener(eventName, fn);\n    return true;\n  },\n};\n\nconst TRANSITIONS = {\n  transition: 'transitionend',\n  OTransition: 'oTransitionEnd',\n  MozTransition: 'transitionend',\n  WebkitTransition: 'webkitTransitionEnd',\n};\n\nfunction transitionEventNamesFor(element) {\n  return keys(TRANSITIONS).reduce((result, transition) => (\n    !result && (element && element.style[transition] !== undefined)\n      ? TRANSITIONS[transition]\n      : result\n  ), null);\n}\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/filter-react-children.js":"import React from 'react';\n\n/**\n * Looks through a collection of React children elements, filtering them\n * according to the predicate passed.\n *\n * @param {Array/Object} children - colleciton of >=1 react elements\n * @param {function} predicate - function returning true when provided with an entry as argument\n */\nexport default function (children, predicate) {\n  if (children) {\n    const result = [];\n    React.Children.forEach(children, (entry, idx) => {\n      if (predicate && predicate.call(this, entry, idx)) {\n        result.push(entry);\n      }\n    });\n    return result;\n  }\n\n  return undefined;\n}\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/index.js":"import events from './events';\nimport prefixer from './prefixer';\nimport time from './time';\n\nexport default { events, prefixer, time };\nexport { events };\nexport { prefixer };\nexport { time };\nexport * from './utils';\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/is-browser.js":"export default function isBrowser() {\n  return typeof window !== 'undefined' && window.document;\n}\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/is-component-of-type.js":"let customChecker;\n\n/**\n *  Sets customChecker which will be used for all components.\n *\n * @param providedChecker {Function} - Checker function\n */\nexport function overrideComponentTypeChecker(providedChecker) {\n  customChecker = providedChecker;\n}\n\n/**\n * Returns true if the provided element is a component of the provided type.\n *\n * @param classType {ReactElement class} - the class of a React Element\n * @param reactElement {ReactElement} - any React Element (not a real DOM node)\n */\nexport function defaultChecker(classType, reactElement) {\n  return reactElement && reactElement.type === classType;\n}\n\n\n/**\n * Executes customChecker if it's set or defaultChecker.\n *\n * @param classType {ReactElement class} - the class of a React Element\n * @param reactElement {ReactElement} - any React Element (not a real DOM node)\n */\nexport default function isComponentOfType(classType, reactElement) {\n  return customChecker\n    ? customChecker(classType, reactElement)\n    : defaultChecker(classType, reactElement);\n}\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/polyfills.js":"import 'core-js/fn/array/from';\nimport 'core-js/fn/array/iterator';\nimport 'core-js/fn/array/find-index';\nimport 'core-js/fn/map';\nimport 'core-js/fn/string/starts-with';\nimport 'core-js/fn/string/includes';\nimport 'core-js/fn/symbol';\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/prefixer.js":"const WEBKIT = 'Webkit';\nconst MICROSOFT = 'Ms';\n\nconst properties = {\n  transform: [WEBKIT, MICROSOFT],\n};\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.substr(1);\n}\n\nfunction getPrefixes(property, value) {\n  return properties[property].reduce((acc, item) => {\n    acc[`${item}${capitalize(property)}`] = value; // eslint-disable-line no-param-reassign\n    return acc;\n  }, {});\n}\n\nfunction addPrefixesTo(style, property, value) {\n  const vendor = getPrefixes(property, value);\n  for (const prefix in vendor) { // eslint-disable-line no-restricted-syntax\n    if ({}.hasOwnProperty.call(vendor, prefix)) {\n      style[prefix] = vendor[prefix]; // eslint-disable-line no-param-reassign\n    }\n  }\n\n  return style;\n}\n\nfunction prefixer(style, defaultValue = {}) {\n  const _style = defaultValue;\n  for (const property in style) {  // eslint-disable-line no-restricted-syntax\n    if ({}.hasOwnProperty.call(style, property)) {\n      _style[property] = style[property];\n      if (properties[property]) {\n        addPrefixesTo(_style, property, style[property]);\n      }\n    }\n  }\n\n  return _style;\n}\n\nexport default prefixer;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/testing.js":"import React from 'react';\nimport TestUtils from 'react-addons-test-utils';\n\nexport default {\n  renderComponent(Component, props = {}, state = {}) {\n    const component = TestUtils.renderIntoDocument(<Component {...props} />);\n    if (state !== {}) { component.setState(state); }\n    return component;\n  },\n\n  shallowRenderComponent(component, props, ...children) {\n    const shallowRenderer = TestUtils.createRenderer();\n    shallowRenderer.render(React.createElement(component, props, children.length > 1\n      ? children\n      : children[0],\n    ));\n    return shallowRenderer.getRenderOutput();\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/time.js":"import hasOwnProperty from './hasOwnProperty';\n\nconst dateLocales = {\n  de: {\n    months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),\n    monthsShort: 'Jan_Feb_März_Apr_Mai_Juni_Juli_Aug_Sept_Okt_Nov_Dez'.split('_'),\n    weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),\n    weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),\n    weekdaysLetter: 'S_M_D_M_D_F_S'.split('_'),\n  },\n  no: {\n    months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),\n    monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),\n    weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),\n    weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),\n    weekdaysLetter: [],\n  },\n  en: {\n    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n    monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n    weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n    weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n    weekdaysLetter: [],\n  },\n  es: {\n    months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n    monthsShort: 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),\n    weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n    weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n    weekdaysLetter: 'D_L_M_X_J_V_S'.split('_'),\n  },\n  af: {\n    months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),\n    monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),\n    weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),\n    weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),\n    weekdaysLetter: [],\n  },\n  ar: {\n    months: ['كانون الثاني يناير', 'شباط فبراير', 'آذار مارس', 'نيسان أبريل', 'أيار مايو', 'حزيران يونيو', 'تموز يوليو', 'آب أغسطس', 'أيلول سبتمبر', 'تشرين الأول أكتوبر', 'تشرين الثاني نوفمبر', 'كانون الأول ديسمبر'],\n    monthsShort: ['كانون الثاني يناير', 'شباط فبراير', 'آذار مارس', 'نيسان أبريل', 'أيار مايو', 'حزيران يونيو', 'تموز يوليو', 'آب أغسطس', 'أيلول سبتمبر', 'تشرين الأول أكتوبر', 'تشرين الثاني نوفمبر', 'كانون الأول ديسمبر'],\n    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),\n    weekdaysLetter: [],\n  },\n  be: {\n    months: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_'),\n    monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),\n    weekdays: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),\n    weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),\n    weekdaysLetter: [],\n  },\n  bg: {\n    months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),\n    monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),\n    weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),\n    weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),\n    weekdaysLetter: [],\n  },\n  bn: {\n    months: 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),\n    monthsShort: 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),\n    weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রবার_শনিবার'.split('_'),\n    weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্র_শনি'.split('_'),\n    weekdaysLetter: [],\n  },\n  bo: {\n    months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),\n    monthsShort: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),\n    weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),\n    weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),\n    weekdaysLetter: [],\n  },\n  br: {\n    months: 'Genver_C\\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),\n    monthsShort: 'Gen_C\\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),\n    weekdays: 'Sul_Lun_Meurzh_Merc\\'her_Yaou_Gwener_Sadorn'.split('_'),\n    weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),\n    weekdaysLetter: [],\n  },\n  bs: {\n    months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),\n    monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),\n    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),\n    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),\n    weekdaysLetter: [],\n  },\n  ca: {\n    months: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),\n    monthsShort: 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),\n    weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),\n    weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),\n    weekdaysLetter: 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),\n  },\n  gl: {\n    months: 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),\n    monthsShort: 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),\n    weekdays: 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),\n    weekdaysShort: 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),\n    weekdaysLetter: 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),\n  },\n  eu: {\n    months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),\n    monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),\n    weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),\n    weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),\n    weekdaysLetter: 'ig_al_ar_az_og_ol_lr'.split('_'),\n  },\n  pt: {\n    months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),\n    monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),\n    weekdays: 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),\n    weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),\n    weekdaysLetter: [],\n  },\n  it: {\n    months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),\n    monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),\n    weekdays: 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),\n    weekdaysShort: 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),\n    weekdaysLetter: [],\n  },\n  fr: {\n    months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\n    monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\n    weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\n    weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\n    weekdaysLetter: [],\n  },\n  ru: {\n    months: 'Январь_Февраль_Март_Апрель_Май_Июнь_Июль_Август_Сентябрь_Октябрь_Ноябрь_Декабрь'.split('_'),\n    monthsShort: 'Янв_Фев_Мар_Апр_Май_Июн_Июл_Авг_Сен_Окт_Ноя_Дек'.split('_'),\n    weekdays: 'Воскресенье_Понедельник_Вторник_Среда_Четверг_Пятница_Суббота'.split('_'),\n    weekdaysShort: 'Вс_Пн_Вт_Ср_Чт_Пт_Сб'.split('_'),\n    weekdaysLetter: [],\n  },\n  ua: {\n    months: 'Січень_Лютий_Березень_Квітень_Травень_Червень_Липень_Серпень_Вересень_Жовтень_Листопад_Грудень'.split('_'),\n    monthsShort: 'Січ_Лют_Берез_Квіт_Трав_Черв_Лип_Серп_Верес_Жовт_Листоп_Груд'.split('_'),\n    weekdays: 'Неділя_Понеділок_Вівторок_Середа_Четвер_П’ятниця_Субота'.split('_'),\n    weekdaysShort: 'Нд_Пн_Вт_Ср_Чт_Пт_Сб'.split('_'),\n    weekdaysLetter: [],\n  },\n  'zh-cn': {\n    months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),\n    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n    weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),\n    weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),\n    weekdaysLetter: '日_一_二_三_四_五_六'.split('_'),\n  },\n  'zh-hk': {\n    months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),\n    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n    weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),\n    weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),\n    weekdaysLetter: '日_一_二_三_四_五_六'.split('_'),\n  },\n  'zh-tw': {\n    months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),\n    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n    weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),\n    weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),\n    weekdaysLetter: '日_一_二_三_四_五_六'.split('_'),\n  },\n};\n\nconst time = {\n  getDaysInMonth(d) {\n    const resultDate = this.getFirstDayOfMonth(d);\n    resultDate.setMonth(resultDate.getMonth() + 1);\n    resultDate.setDate(resultDate.getDate() - 1);\n    return resultDate.getDate();\n  },\n\n  getFirstDayOfMonth(d) {\n    return new Date(d.getFullYear(), d.getMonth(), 1);\n  },\n\n  getFirstWeekDay(d) {\n    return this.getFirstDayOfMonth(d).getDay();\n  },\n\n  getTimeMode(d) {\n    return d.getHours() >= 12 ? 'pm' : 'am';\n  },\n\n  getFullMonth(d, locale = 'en') {\n    const month = d.getMonth();\n    const l = ((typeof locale === 'string') ? dateLocales[locale] : locale) || dateLocales.en;\n    return (hasOwnProperty(l, 'months'))\n      ? l.months[month] || 'Unknown'\n      : 'Unknown';\n  },\n\n  getShortMonth(d, locale = 'en') {\n    const month = d.getMonth();\n    const l = ((typeof locale === 'string') ? dateLocales[locale] : locale) || dateLocales.en;\n    return (hasOwnProperty(l, 'monthsShort'))\n      ? l.monthsShort[month] || 'Unknown'\n      : 'Unknown';\n  },\n\n  getFullDayOfWeek(day, locale = 'en') {\n    const l = ((typeof locale === 'string') ? dateLocales[locale] : locale) || dateLocales.en;\n    return (hasOwnProperty(l, 'weekdays'))\n      ? l.weekdays[day] || 'Unknown'\n      : 'Unknown';\n  },\n\n  getShortDayOfWeek(day, locale = 'en') {\n    const l = ((typeof locale === 'string') ? dateLocales[locale] : locale) || dateLocales.en;\n    return (hasOwnProperty(l, 'weekdaysShort'))\n      ? l.weekdaysShort[day] || 'Unknown'\n      : 'Unknown';\n  },\n\n  getDayOfWeekLetter(day, locale = 'en') {\n    const l = ((typeof locale === 'string') ? dateLocales[locale] : locale) || dateLocales.en;\n    return (hasOwnProperty(l, 'weekdaysLetter'))\n      ? l.weekdaysLetter[day] || this.getFullDayOfWeek(day, locale).charAt(0)\n      : 'Unknown';\n  },\n\n  clone(d) {\n    return new Date(d.getTime());\n  },\n\n  cloneAsDate(d) {\n    const clonedDate = this.clone(d);\n    clonedDate.setHours(0, 0, 0, 0);\n    return clonedDate;\n  },\n\n  isDateObject(d) {\n    return d instanceof Date;\n  },\n\n  addDays(d, days) {\n    const newDate = this.clone(d);\n    newDate.setDate(d.getDate() + days);\n    return newDate;\n  },\n\n  addMonths(d, months) {\n    const newDate = this.clone(d);\n    newDate.setMonth(d.getMonth() + months, 1);\n    return newDate;\n  },\n\n  addYears(d, years) {\n    const newDate = this.clone(d);\n    newDate.setFullYear(d.getFullYear() + years);\n    return newDate;\n  },\n\n  setDay(d, day) {\n    const newDate = this.clone(d);\n    newDate.setDate(day);\n    return newDate;\n  },\n\n  setMonth(d, month) {\n    const newDate = this.clone(d);\n    newDate.setMonth(month);\n    return newDate;\n  },\n\n  setYear(d, year) {\n    const newDate = this.clone(d);\n    newDate.setFullYear(year);\n    return newDate;\n  },\n\n  setHours(d, hours) {\n    const newDate = this.clone(d);\n    newDate.setHours(hours);\n    return newDate;\n  },\n\n  setMinutes(d, minutes) {\n    const newDate = this.clone(d);\n    newDate.setMinutes(minutes);\n    return newDate;\n  },\n\n  toggleTimeMode(d) {\n    const newDate = this.clone(d);\n    const hours = newDate.getHours();\n\n    newDate.setHours(hours - (hours > 12 ? -12 : 12));\n    return newDate;\n  },\n\n  formatTime(date, format) {\n    let hours = date.getHours();\n    let mins = date.getMinutes().toString();\n\n    if (format === 'ampm') {\n      const isAM = hours < 12;\n      const additional = isAM ? ' am' : ' pm';\n\n      hours %= 12;\n      hours = (hours || 12).toString();\n      if (mins.length < 2) mins = `0${mins}`;\n\n      return hours + (mins === '00' ? '' : `:${mins}`) + additional;\n    }\n\n    hours = hours.toString();\n    if (hours.length < 2) hours = `0${hours}`;\n    if (mins.length < 2) mins = `0${mins}`;\n    return `${hours}:${mins}`;\n  },\n\n  dateOutOfRange(date, minDate, maxDate) {\n    return ((minDate && !(date >= minDate)) || (maxDate && !(date <= maxDate)));\n  },\n\n  closestDate(to, date1, date2) {\n    const toTime = to.getTime();\n\n    const diff1 = Math.abs(toTime - date1.getTime());\n    const diff2 = Math.abs(toTime - date2.getTime());\n\n    return diff1 < diff2 ? date1 : date2;\n  },\n\n  formatDate(date, locale = 'en') {\n    if (locale === 'en') {\n      return `${date.getDate()} ${time.getFullMonth(date, locale)} ${date.getFullYear()}`;\n    }\n    return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n  },\n};\n\nexport default time;\n","/home/travis/build/npmtest/node-npmtest-react-toolbox/node_modules/react-toolbox/components/utils/utils.js":"import assoc from 'ramda/src/assoc';\nimport compose from 'ramda/src/compose';\nimport keys from 'ramda/src/keys';\nimport reduce from 'ramda/src/reduce';\nimport pickBy from 'ramda/src/pickBy';\n\nexport const angleFromPositions = (cx, cy, ex, ey) => {\n  const theta = Math.atan2(ey - cy, ex - cx) + (Math.PI / 2);\n  return (theta * 180) / Math.PI;\n};\n\nexport const angle360FromPositions = (cx, cy, ex, ey) => {\n  const angle = angleFromPositions(cx, cy, ex, ey);\n  return angle < 0 ? 360 + angle : angle;\n};\n\nexport const range = (start = 0, stop = null, step = 1) => {\n  let [_start, _stop] = [0, start];\n  if (stop !== null) {\n    [_start, _stop] = [start, stop];\n  }\n  const length = Math.max(Math.ceil((_stop - _start) / step), 0);\n  const _range = Array(length);\n\n  for (let idx = 0; idx < length; idx += 1, _start += step) {\n    _range[idx] = _start;\n  }\n\n  return _range;\n};\n\nexport const round = (number, decimals) => {\n  if (!isNaN(parseFloat(number)) && isFinite(number)) {\n    const decimalPower = 10 ** decimals;\n    return Math.round(parseFloat(number) * decimalPower) / decimalPower;\n  }\n  return NaN;\n};\n\nexport const getViewport = () => ({\n  height: window.innerHeight || document.documentElement.offsetHeight,\n  width: window.innerWidth || document.documentElement.offsetWidth,\n});\n\nexport const cloneObject = object =>\n  JSON.parse(JSON.stringify(object));\n\nexport const inputTypeForPrototype = (prototype) => {\n  if (prototype === Date) return 'date';\n  if (prototype === Number) return 'number';\n  if (prototype === Boolean) return 'checkbox';\n  return 'text';\n};\n\nexport const prepareValueForInput = (value, type) => {\n  if (type === 'date') return new Date(value).toISOString().slice(0, 10);\n  if (type === 'checkbox') {\n    return value ? 'on' : '';\n  }\n  return value;\n};\n\nexport const transformKeys = fn => (obj) => {\n  const addTransformedKey = (result, key) => assoc(fn(key), obj[key], result);\n  return reduce(addTransformedKey, {}, keys(obj));\n};\n\nexport const removeNamespace = namespace => (key) => {\n  const capitalized = key.substr(namespace.length);\n  return capitalized.slice(0, 1).toLowerCase() + capitalized.slice(1);\n};\n\nexport const getAnimationModule = (animation, theme) => compose(\n  transformKeys(removeNamespace(animation)),\n  pickBy((v, k) => k.startsWith(animation)),\n)(theme);\n"}